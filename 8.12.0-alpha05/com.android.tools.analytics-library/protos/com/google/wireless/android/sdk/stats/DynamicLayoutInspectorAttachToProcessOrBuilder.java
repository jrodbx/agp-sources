// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface DynamicLayoutInspectorAttachToProcessOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.DynamicLayoutInspectorAttachToProcess)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Client type: Legacy or AppInspection
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAttachToProcess.ClientType client_type = 1;</code>
   * @return Whether the clientType field is set.
   */
  boolean hasClientType();
  /**
   * <pre>
   * Client type: Legacy or AppInspection
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAttachToProcess.ClientType client_type = 1;</code>
   * @return The clientType.
   */
  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAttachToProcess.ClientType getClientType();

  /**
   * <pre>
   * True if the attach to process succeeded
   * </pre>
   *
   * <code>optional bool success = 2;</code>
   * @return Whether the success field is set.
   */
  boolean hasSuccess();
  /**
   * <pre>
   * True if the attach to process succeeded
   * </pre>
   *
   * <code>optional bool success = 2;</code>
   * @return The success.
   */
  boolean getSuccess();

  /**
   * <pre>
   * Error information if the attach failed
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorErrorInfo error_info = 3 [lazy = true];</code>
   * @return Whether the errorInfo field is set.
   */
  boolean hasErrorInfo();
  /**
   * <pre>
   * Error information if the attach failed
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorErrorInfo error_info = 3 [lazy = true];</code>
   * @return The errorInfo.
   */
  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorErrorInfo getErrorInfo();
  /**
   * <pre>
   * Error information if the attach failed
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorErrorInfo error_info = 3 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorErrorInfoOrBuilder getErrorInfoOrBuilder();

  /**
   * <pre>
   * Error information if the compose inspector failed
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorErrorInfo.AttachErrorCode compose_error_code = 4;</code>
   * @return Whether the composeErrorCode field is set.
   */
  boolean hasComposeErrorCode();
  /**
   * <pre>
   * Error information if the compose inspector failed
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorErrorInfo.AttachErrorCode compose_error_code = 4;</code>
   * @return The composeErrorCode.
   */
  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorErrorInfo.AttachErrorCode getComposeErrorCode();

  /**
   * <pre>
   * When we attached to a process, were there multiple projects open?
   * </pre>
   *
   * <code>optional bool multiple_projects_open = 5;</code>
   * @return Whether the multipleProjectsOpen field is set.
   */
  boolean hasMultipleProjectsOpen();
  /**
   * <pre>
   * When we attached to a process, were there multiple projects open?
   * </pre>
   *
   * <code>optional bool multiple_projects_open = 5;</code>
   * @return The multipleProjectsOpen.
   */
  boolean getMultipleProjectsOpen();

  /**
   * <pre>
   * Was the debugger running for this session
   * </pre>
   *
   * <code>optional bool debugger_attached = 6;</code>
   * @return Whether the debuggerAttached field is set.
   */
  boolean hasDebuggerAttached();
  /**
   * <pre>
   * Was the debugger running for this session
   * </pre>
   *
   * <code>optional bool debugger_attached = 6;</code>
   * @return The debuggerAttached.
   */
  boolean getDebuggerAttached();

  /**
   * <pre>
   * Was the debugger paused during the attach
   * </pre>
   *
   * <code>optional bool debugger_paused_during_attach = 7;</code>
   * @return Whether the debuggerPausedDuringAttach field is set.
   */
  boolean hasDebuggerPausedDuringAttach();
  /**
   * <pre>
   * Was the debugger paused during the attach
   * </pre>
   *
   * <code>optional bool debugger_paused_during_attach = 7;</code>
   * @return The debuggerPausedDuringAttach.
   */
  boolean getDebuggerPausedDuringAttach();

  /**
   * <pre>
   * Was auto connect enabled for this session
   * </pre>
   *
   * <code>optional bool auto_connect_enabled = 8;</code>
   * @return Whether the autoConnectEnabled field is set.
   */
  boolean hasAutoConnectEnabled();
  /**
   * <pre>
   * Was auto connect enabled for this session
   * </pre>
   *
   * <code>optional bool auto_connect_enabled = 8;</code>
   * @return The autoConnectEnabled.
   */
  boolean getAutoConnectEnabled();

  /**
   * <pre>
   * Was Layout Inspector embedded in the Running Devices Tool Window
   * </pre>
   *
   * <code>optional bool is_embedded_layout_inspector = 9;</code>
   * @return Whether the isEmbeddedLayoutInspector field is set.
   */
  boolean hasIsEmbeddedLayoutInspector();
  /**
   * <pre>
   * Was Layout Inspector embedded in the Running Devices Tool Window
   * </pre>
   *
   * <code>optional bool is_embedded_layout_inspector = 9;</code>
   * @return The isEmbeddedLayoutInspector.
   */
  boolean getIsEmbeddedLayoutInspector();

  /**
   * <pre>
   * The time it took for attach to start and end.
   * It can end because of success, error or cancellation.
   * </pre>
   *
   * <code>optional int64 attach_duration_ms = 10;</code>
   * @return Whether the attachDurationMs field is set.
   */
  boolean hasAttachDurationMs();
  /**
   * <pre>
   * The time it took for attach to start and end.
   * It can end because of success, error or cancellation.
   * </pre>
   *
   * <code>optional int64 attach_duration_ms = 10;</code>
   * @return The attachDurationMs.
   */
  long getAttachDurationMs();

  /**
   * <pre>
   * True if connected to a process running on an XR device.
   * </pre>
   *
   * <code>optional bool is_xr = 11;</code>
   * @return Whether the isXr field is set.
   */
  boolean hasIsXr();
  /**
   * <pre>
   * True if connected to a process running on an XR device.
   * </pre>
   *
   * <code>optional bool is_xr = 11;</code>
   * @return The isXr.
   */
  boolean getIsXr();

  /**
   * <pre>
   * True if on-device render is enabled for this session.
   * </pre>
   *
   * <code>optional bool is_on_device_render_enabled = 12;</code>
   * @return Whether the isOnDeviceRenderEnabled field is set.
   */
  boolean hasIsOnDeviceRenderEnabled();
  /**
   * <pre>
   * True if on-device render is enabled for this session.
   * </pre>
   *
   * <code>optional bool is_on_device_render_enabled = 12;</code>
   * @return The isOnDeviceRenderEnabled.
   */
  boolean getIsOnDeviceRenderEnabled();
}
