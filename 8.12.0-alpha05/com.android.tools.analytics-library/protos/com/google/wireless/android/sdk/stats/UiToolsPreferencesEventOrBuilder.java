// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface UiToolsPreferencesEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.UiToolsPreferencesEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * View mode of the first opening of resources files. It can be code, split or
   * design
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.ViewMode resources_view_mode = 1;</code>
   * @return Whether the resourcesViewMode field is set.
   */
  boolean hasResourcesViewMode();
  /**
   * <pre>
   * View mode of the first opening of resources files. It can be code, split or
   * design
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.ViewMode resources_view_mode = 1;</code>
   * @return The resourcesViewMode.
   */
  com.google.wireless.android.sdk.stats.UiToolsPreferencesEvent.ViewMode getResourcesViewMode();

  /**
   * <pre>
   * Kotlin files view mode can be code, split or design
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.ViewMode editor_view_mode = 2;</code>
   * @return Whether the editorViewMode field is set.
   */
  boolean hasEditorViewMode();
  /**
   * <pre>
   * Kotlin files view mode can be code, split or design
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.ViewMode editor_view_mode = 2;</code>
   * @return The editorViewMode.
   */
  com.google.wireless.android.sdk.stats.UiToolsPreferencesEvent.ViewMode getEditorViewMode();

  /**
   * <pre>
   * When true, it always shows the split mode whenever a code file contains
   * &#64;Preview annotations
   * </pre>
   *
   * <code>optional bool show_split_mode_on_annotations = 3;</code>
   * @return Whether the showSplitModeOnAnnotations field is set.
   */
  boolean hasShowSplitModeOnAnnotations();
  /**
   * <pre>
   * When true, it always shows the split mode whenever a code file contains
   * &#64;Preview annotations
   * </pre>
   *
   * <code>optional bool show_split_mode_on_annotations = 3;</code>
   * @return The showSplitModeOnAnnotations.
   */
  boolean getShowSplitModeOnAnnotations();

  /**
   * <pre>
   * The percentage of sensitivity level of the Trackpad, the value is in an
   * interval between 0 and 100
   * </pre>
   *
   * <code>optional int32 track_pad_sensitivity_level = 4;</code>
   * @return Whether the trackPadSensitivityLevel field is set.
   */
  boolean hasTrackPadSensitivityLevel();
  /**
   * <pre>
   * The percentage of sensitivity level of the Trackpad, the value is in an
   * interval between 0 and 100
   * </pre>
   *
   * <code>optional int32 track_pad_sensitivity_level = 4;</code>
   * @return The trackPadSensitivityLevel.
   */
  int getTrackPadSensitivityLevel();

  /**
   * <pre>
   * The layout mode of previews when its file is opened for the first time, it
   * can be grid, list, or gallery.
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.LayoutMode preview_layout_mode = 6;</code>
   * @return Whether the previewLayoutMode field is set.
   */
  boolean hasPreviewLayoutMode();
  /**
   * <pre>
   * The layout mode of previews when its file is opened for the first time, it
   * can be grid, list, or gallery.
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.LayoutMode preview_layout_mode = 6;</code>
   * @return The previewLayoutMode.
   */
  com.google.wireless.android.sdk.stats.UiToolsPreferencesEvent.LayoutMode getPreviewLayoutMode();

  /**
   * <pre>
   * Amount or resources used to show previews: can be default, default without
   * live updates or essential
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.ResourceUsage resource_usage = 7;</code>
   * @return Whether the resourceUsage field is set.
   */
  boolean hasResourceUsage();
  /**
   * <pre>
   * Amount or resources used to show previews: can be default, default without
   * live updates or essential
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent.ResourceUsage resource_usage = 7;</code>
   * @return The resourceUsage.
   */
  com.google.wireless.android.sdk.stats.UiToolsPreferencesEvent.ResourceUsage getResourceUsage();
}
