// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface AtfAuditResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.AtfAuditResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * What triggered Accessibility testing framework
   * </pre>
   *
   * <code>optional .android_studio.AtfAuditResult.Trigger trigger = 1;</code>
   * @return Whether the trigger field is set.
   */
  boolean hasTrigger();
  /**
   * <pre>
   * What triggered Accessibility testing framework
   * </pre>
   *
   * <code>optional .android_studio.AtfAuditResult.Trigger trigger = 1;</code>
   * @return The trigger.
   */
  com.google.wireless.android.sdk.stats.AtfAuditResult.Trigger getTrigger();

  /**
   * <pre>
   * result count.
   * </pre>
   *
   * <code>repeated .android_studio.AtfAuditResult.AtfResultCount counts = 2;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.AtfAuditResult.AtfResultCount> 
      getCountsList();
  /**
   * <pre>
   * result count.
   * </pre>
   *
   * <code>repeated .android_studio.AtfAuditResult.AtfResultCount counts = 2;</code>
   */
  com.google.wireless.android.sdk.stats.AtfAuditResult.AtfResultCount getCounts(int index);
  /**
   * <pre>
   * result count.
   * </pre>
   *
   * <code>repeated .android_studio.AtfAuditResult.AtfResultCount counts = 2;</code>
   */
  int getCountsCount();
  /**
   * <pre>
   * result count.
   * </pre>
   *
   * <code>repeated .android_studio.AtfAuditResult.AtfResultCount counts = 2;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.AtfAuditResult.AtfResultCountOrBuilder> 
      getCountsOrBuilderList();
  /**
   * <pre>
   * result count.
   * </pre>
   *
   * <code>repeated .android_studio.AtfAuditResult.AtfResultCount counts = 2;</code>
   */
  com.google.wireless.android.sdk.stats.AtfAuditResult.AtfResultCountOrBuilder getCountsOrBuilder(
      int index);

  /**
   * <pre>
   * Render result. True if render was successful. False otherwise.
   * </pre>
   *
   * <code>optional bool render_result = 3;</code>
   * @return Whether the renderResult field is set.
   */
  boolean hasRenderResult();
  /**
   * <pre>
   * Render result. True if render was successful. False otherwise.
   * </pre>
   *
   * <code>optional bool render_result = 3;</code>
   * @return The renderResult.
   */
  boolean getRenderResult();

  /**
   * <pre>
   * Number of components rendered
   * </pre>
   *
   * <code>optional int32 component_count = 4;</code>
   * @return Whether the componentCount field is set.
   */
  boolean hasComponentCount();
  /**
   * <pre>
   * Number of components rendered
   * </pre>
   *
   * <code>optional int32 component_count = 4;</code>
   * @return The componentCount.
   */
  int getComponentCount();

  /**
   * <pre>
   * Time it took for audit to run in milliseconds, per render.
   * </pre>
   *
   * <code>optional int64 audit_duration_ms = 5;</code>
   * @return Whether the auditDurationMs field is set.
   */
  boolean hasAuditDurationMs();
  /**
   * <pre>
   * Time it took for audit to run in milliseconds, per render.
   * </pre>
   *
   * <code>optional int64 audit_duration_ms = 5;</code>
   * @return The auditDurationMs.
   */
  long getAuditDurationMs();

  /**
   * <pre>
   * Full render time in ms
   * </pre>
   *
   * <code>optional int64 total_render_time_ms = 6;</code>
   * @return Whether the totalRenderTimeMs field is set.
   */
  boolean hasTotalRenderTimeMs();
  /**
   * <pre>
   * Full render time in ms
   * </pre>
   *
   * <code>optional int64 total_render_time_ms = 6;</code>
   * @return The totalRenderTimeMs.
   */
  long getTotalRenderTimeMs();

  /**
   * <pre>
   * Errors displayed in the error panel, including non ATF errors.
   * </pre>
   *
   * <code>optional int32 error_count = 7;</code>
   * @return Whether the errorCount field is set.
   */
  boolean hasErrorCount();
  /**
   * <pre>
   * Errors displayed in the error panel, including non ATF errors.
   * </pre>
   *
   * <code>optional int32 error_count = 7;</code>
   * @return The errorCount.
   */
  int getErrorCount();
}
