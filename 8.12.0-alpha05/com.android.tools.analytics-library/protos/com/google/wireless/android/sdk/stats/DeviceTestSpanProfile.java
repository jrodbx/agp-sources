// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Provides details of a test run on a single device. This includes the
 * provisioning of the device, apk install, test suite run, and device tear
 * down. A single test task may have one or more DeviceTestSpanProfile's as
 * tests may be sharded across multiple devices, or in the case of connected
 * test may run all tests on multiple devices.
 * </pre>
 *
 * Protobuf type {@code android_studio.DeviceTestSpanProfile}
 */
public final class DeviceTestSpanProfile extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.DeviceTestSpanProfile)
    DeviceTestSpanProfileOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DeviceTestSpanProfile.newBuilder() to construct.
  private DeviceTestSpanProfile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DeviceTestSpanProfile() {
    deviceType_ = 0;
    testKind_ = 0;
    processType_ = 0;
    progressResult_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DeviceTestSpanProfile();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DeviceTestSpanProfile_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DeviceTestSpanProfile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.class, com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.Builder.class);
  }

  /**
   * Protobuf enum {@code android_studio.DeviceTestSpanProfile.DeviceType}
   */
  public enum DeviceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_DEVICE_TYPE = 0;</code>
     */
    UNKNOWN_DEVICE_TYPE(0),
    /**
     * <pre>
     * Device is a physical device
     * </pre>
     *
     * <code>CONNECTED_DEVICE_PHYSICAL = 1;</code>
     */
    CONNECTED_DEVICE_PHYSICAL(1),
    /**
     * <pre>
     * Device is a emulator device managed by the host
     * </pre>
     *
     * <code>CONNECTED_DEVICE_EMULATOR = 2;</code>
     */
    CONNECTED_DEVICE_EMULATOR(2),
    /**
     * <pre>
     * Device is Gradle managed emulator
     * </pre>
     *
     * <code>VIRTUAL_MANAGED_DEVICE = 3;</code>
     */
    VIRTUAL_MANAGED_DEVICE(3),
    ;

    /**
     * <code>UNKNOWN_DEVICE_TYPE = 0;</code>
     */
    public static final int UNKNOWN_DEVICE_TYPE_VALUE = 0;
    /**
     * <pre>
     * Device is a physical device
     * </pre>
     *
     * <code>CONNECTED_DEVICE_PHYSICAL = 1;</code>
     */
    public static final int CONNECTED_DEVICE_PHYSICAL_VALUE = 1;
    /**
     * <pre>
     * Device is a emulator device managed by the host
     * </pre>
     *
     * <code>CONNECTED_DEVICE_EMULATOR = 2;</code>
     */
    public static final int CONNECTED_DEVICE_EMULATOR_VALUE = 2;
    /**
     * <pre>
     * Device is Gradle managed emulator
     * </pre>
     *
     * <code>VIRTUAL_MANAGED_DEVICE = 3;</code>
     */
    public static final int VIRTUAL_MANAGED_DEVICE_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DeviceType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_DEVICE_TYPE;
        case 1: return CONNECTED_DEVICE_PHYSICAL;
        case 2: return CONNECTED_DEVICE_EMULATOR;
        case 3: return VIRTUAL_MANAGED_DEVICE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceType>() {
            public DeviceType findValueByNumber(int number) {
              return DeviceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.getDescriptor().getEnumTypes().get(0);
    }

    private static final DeviceType[] VALUES = values();

    public static DeviceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DeviceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DeviceTestSpanProfile.DeviceType)
  }

  /**
   * Protobuf enum {@code android_studio.DeviceTestSpanProfile.ProcessType}
   */
  public enum ProcessType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_PROCESS_TYPE = 0;</code>
     */
    UNKNOWN_PROCESS_TYPE(0),
    /**
     * <pre>
     * Unified Test Platform instance being run in a separate one-shot process.
     * </pre>
     *
     * <code>EXTERNAL_UTP_PROCESS = 1;</code>
     */
    EXTERNAL_UTP_PROCESS(1),
    /**
     * <pre>
     * Tests were run on a new load of Unified Test Platform from within the
     * Gradle daemon.
     * </pre>
     *
     * <code>IN_PROCESS_UTP_FIRST_RUN = 2;</code>
     */
    IN_PROCESS_UTP_FIRST_RUN(2),
    /**
     * <pre>
     * Tests were run on a Unified Test Platform with the plugins already loaded
     * from a previous run.
     * </pre>
     *
     * <code>IN_PROCESS_UTP_SUBSEQUENT_RUN = 3;</code>
     */
    IN_PROCESS_UTP_SUBSEQUENT_RUN(3),
    ;

    /**
     * <code>UNKNOWN_PROCESS_TYPE = 0;</code>
     */
    public static final int UNKNOWN_PROCESS_TYPE_VALUE = 0;
    /**
     * <pre>
     * Unified Test Platform instance being run in a separate one-shot process.
     * </pre>
     *
     * <code>EXTERNAL_UTP_PROCESS = 1;</code>
     */
    public static final int EXTERNAL_UTP_PROCESS_VALUE = 1;
    /**
     * <pre>
     * Tests were run on a new load of Unified Test Platform from within the
     * Gradle daemon.
     * </pre>
     *
     * <code>IN_PROCESS_UTP_FIRST_RUN = 2;</code>
     */
    public static final int IN_PROCESS_UTP_FIRST_RUN_VALUE = 2;
    /**
     * <pre>
     * Tests were run on a Unified Test Platform with the plugins already loaded
     * from a previous run.
     * </pre>
     *
     * <code>IN_PROCESS_UTP_SUBSEQUENT_RUN = 3;</code>
     */
    public static final int IN_PROCESS_UTP_SUBSEQUENT_RUN_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProcessType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ProcessType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_PROCESS_TYPE;
        case 1: return EXTERNAL_UTP_PROCESS;
        case 2: return IN_PROCESS_UTP_FIRST_RUN;
        case 3: return IN_PROCESS_UTP_SUBSEQUENT_RUN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProcessType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProcessType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProcessType>() {
            public ProcessType findValueByNumber(int number) {
              return ProcessType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.getDescriptor().getEnumTypes().get(1);
    }

    private static final ProcessType[] VALUES = values();

    public static ProcessType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ProcessType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DeviceTestSpanProfile.ProcessType)
  }

  /**
   * Protobuf enum {@code android_studio.DeviceTestSpanProfile.TestProgressResult}
   */
  public enum TestProgressResult
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_RESULT = 0;</code>
     */
    UNKNOWN_RESULT(0),
    /**
     * <code>UNKNOWN_FAILURE = 1;</code>
     */
    UNKNOWN_FAILURE(1),
    /**
     * <code>TESTS_COMPLETED = 2;</code>
     */
    TESTS_COMPLETED(2),
    /**
     * <code>DEVICE_PROVISION_FAILURE = 3;</code>
     */
    DEVICE_PROVISION_FAILURE(3),
    /**
     * <code>UTP_INFRASTRUCTURE_FAILURE = 4;</code>
     */
    UTP_INFRASTRUCTURE_FAILURE(4),
    ;

    /**
     * <code>UNKNOWN_RESULT = 0;</code>
     */
    public static final int UNKNOWN_RESULT_VALUE = 0;
    /**
     * <code>UNKNOWN_FAILURE = 1;</code>
     */
    public static final int UNKNOWN_FAILURE_VALUE = 1;
    /**
     * <code>TESTS_COMPLETED = 2;</code>
     */
    public static final int TESTS_COMPLETED_VALUE = 2;
    /**
     * <code>DEVICE_PROVISION_FAILURE = 3;</code>
     */
    public static final int DEVICE_PROVISION_FAILURE_VALUE = 3;
    /**
     * <code>UTP_INFRASTRUCTURE_FAILURE = 4;</code>
     */
    public static final int UTP_INFRASTRUCTURE_FAILURE_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TestProgressResult valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TestProgressResult forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_RESULT;
        case 1: return UNKNOWN_FAILURE;
        case 2: return TESTS_COMPLETED;
        case 3: return DEVICE_PROVISION_FAILURE;
        case 4: return UTP_INFRASTRUCTURE_FAILURE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TestProgressResult>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TestProgressResult> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TestProgressResult>() {
            public TestProgressResult findValueByNumber(int number) {
              return TestProgressResult.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.getDescriptor().getEnumTypes().get(2);
    }

    private static final TestProgressResult[] VALUES = values();

    public static TestProgressResult valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TestProgressResult(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DeviceTestSpanProfile.TestProgressResult)
  }

  private int bitField0_;
  public static final int DEVICE_TYPE_FIELD_NUMBER = 1;
  private int deviceType_ = 0;
  /**
   * <pre>
   * Type of device used in this test run
   * </pre>
   *
   * <code>optional .android_studio.DeviceTestSpanProfile.DeviceType device_type = 1;</code>
   * @return Whether the deviceType field is set.
   */
  @java.lang.Override public boolean hasDeviceType() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Type of device used in this test run
   * </pre>
   *
   * <code>optional .android_studio.DeviceTestSpanProfile.DeviceType device_type = 1;</code>
   * @return The deviceType.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType getDeviceType() {
    com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType result = com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType.forNumber(deviceType_);
    return result == null ? com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType.UNKNOWN_DEVICE_TYPE : result;
  }

  public static final int TEST_KIND_FIELD_NUMBER = 2;
  private int testKind_ = 0;
  /**
   * <pre>
   * Type of test being run on this device
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestKind test_kind = 2;</code>
   * @return Whether the testKind field is set.
   */
  @java.lang.Override public boolean hasTestKind() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Type of test being run on this device
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestKind test_kind = 2;</code>
   * @return The testKind.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.TestRun.TestKind getTestKind() {
    com.google.wireless.android.sdk.stats.TestRun.TestKind result = com.google.wireless.android.sdk.stats.TestRun.TestKind.forNumber(testKind_);
    return result == null ? com.google.wireless.android.sdk.stats.TestRun.TestKind.UNKNOWN_TEST_KIND : result;
  }

  public static final int PROCESS_TYPE_FIELD_NUMBER = 3;
  private int processType_ = 0;
  /**
   * <pre>
   * Type of process that is used to install, run, and manage the test.
   * </pre>
   *
   * <code>optional .android_studio.DeviceTestSpanProfile.ProcessType process_type = 3;</code>
   * @return Whether the processType field is set.
   */
  @java.lang.Override public boolean hasProcessType() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Type of process that is used to install, run, and manage the test.
   * </pre>
   *
   * <code>optional .android_studio.DeviceTestSpanProfile.ProcessType process_type = 3;</code>
   * @return The processType.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType getProcessType() {
    com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType result = com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType.forNumber(processType_);
    return result == null ? com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType.UNKNOWN_PROCESS_TYPE : result;
  }

  public static final int DEVICE_LOCK_WAIT_START_TIME_MS_FIELD_NUMBER = 5;
  private long deviceLockWaitStartTimeMs_ = 0L;
  /**
   * <pre>
   * Span of how long the test waited for device(s) to become available.
   * These fields will only be set if a Gradle Managed Device is used and will
   * be the same across all shards in the same test run.
   * </pre>
   *
   * <code>optional int64 device_lock_wait_start_time_ms = 5;</code>
   * @return Whether the deviceLockWaitStartTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasDeviceLockWaitStartTimeMs() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Span of how long the test waited for device(s) to become available.
   * These fields will only be set if a Gradle Managed Device is used and will
   * be the same across all shards in the same test run.
   * </pre>
   *
   * <code>optional int64 device_lock_wait_start_time_ms = 5;</code>
   * @return The deviceLockWaitStartTimeMs.
   */
  @java.lang.Override
  public long getDeviceLockWaitStartTimeMs() {
    return deviceLockWaitStartTimeMs_;
  }

  public static final int DEVICE_LOCK_WAIT_DURATION_MS_FIELD_NUMBER = 6;
  private long deviceLockWaitDurationMs_ = 0L;
  /**
   * <code>optional int64 device_lock_wait_duration_ms = 6;</code>
   * @return Whether the deviceLockWaitDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasDeviceLockWaitDurationMs() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>optional int64 device_lock_wait_duration_ms = 6;</code>
   * @return The deviceLockWaitDurationMs.
   */
  @java.lang.Override
  public long getDeviceLockWaitDurationMs() {
    return deviceLockWaitDurationMs_;
  }

  public static final int UTP_SETUP_START_TIME_MS_FIELD_NUMBER = 7;
  private long utpSetupStartTimeMs_ = 0L;
  /**
   * <pre>
   * Span of how long the Unified Test Platform needed for internal setup before
   * requesting the device provider.
   * </pre>
   *
   * <code>optional int64 utp_setup_start_time_ms = 7;</code>
   * @return Whether the utpSetupStartTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpSetupStartTimeMs() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Span of how long the Unified Test Platform needed for internal setup before
   * requesting the device provider.
   * </pre>
   *
   * <code>optional int64 utp_setup_start_time_ms = 7;</code>
   * @return The utpSetupStartTimeMs.
   */
  @java.lang.Override
  public long getUtpSetupStartTimeMs() {
    return utpSetupStartTimeMs_;
  }

  public static final int UTP_SETUP_DURATION_MS_FIELD_NUMBER = 8;
  private long utpSetupDurationMs_ = 0L;
  /**
   * <code>optional int64 utp_setup_duration_ms = 8;</code>
   * @return Whether the utpSetupDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpSetupDurationMs() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <code>optional int64 utp_setup_duration_ms = 8;</code>
   * @return The utpSetupDurationMs.
   */
  @java.lang.Override
  public long getUtpSetupDurationMs() {
    return utpSetupDurationMs_;
  }

  public static final int UTP_PROVIDE_DEVICE_START_TIME_MS_FIELD_NUMBER = 9;
  private long utpProvideDeviceStartTimeMs_ = 0L;
  /**
   * <pre>
   * Span of how long the device took to be provisioned by the device provider
   * </pre>
   *
   * <code>optional int64 utp_provide_device_start_time_ms = 9;</code>
   * @return Whether the utpProvideDeviceStartTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpProvideDeviceStartTimeMs() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Span of how long the device took to be provisioned by the device provider
   * </pre>
   *
   * <code>optional int64 utp_provide_device_start_time_ms = 9;</code>
   * @return The utpProvideDeviceStartTimeMs.
   */
  @java.lang.Override
  public long getUtpProvideDeviceStartTimeMs() {
    return utpProvideDeviceStartTimeMs_;
  }

  public static final int UTP_PROVIDE_DEVICE_DURATION_MS_FIELD_NUMBER = 10;
  private long utpProvideDeviceDurationMs_ = 0L;
  /**
   * <code>optional int64 utp_provide_device_duration_ms = 10;</code>
   * @return Whether the utpProvideDeviceDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpProvideDeviceDurationMs() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <code>optional int64 utp_provide_device_duration_ms = 10;</code>
   * @return The utpProvideDeviceDurationMs.
   */
  @java.lang.Override
  public long getUtpProvideDeviceDurationMs() {
    return utpProvideDeviceDurationMs_;
  }

  public static final int UTP_TEST_SETUP_START_TIME_MS_FIELD_NUMBER = 11;
  private long utpTestSetupStartTimeMs_ = 0L;
  /**
   * <pre>
   * Span of how long the device took after device was provided, but before
   * tests start. This includes steps like installing testing and tested apks,
   * checking device state, and setting up test orchestration.
   * </pre>
   *
   * <code>optional int64 utp_test_setup_start_time_ms = 11;</code>
   * @return Whether the utpTestSetupStartTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpTestSetupStartTimeMs() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Span of how long the device took after device was provided, but before
   * tests start. This includes steps like installing testing and tested apks,
   * checking device state, and setting up test orchestration.
   * </pre>
   *
   * <code>optional int64 utp_test_setup_start_time_ms = 11;</code>
   * @return The utpTestSetupStartTimeMs.
   */
  @java.lang.Override
  public long getUtpTestSetupStartTimeMs() {
    return utpTestSetupStartTimeMs_;
  }

  public static final int UTP_TEST_SETUP_DURATION_MS_FIELD_NUMBER = 12;
  private long utpTestSetupDurationMs_ = 0L;
  /**
   * <code>optional int64 utp_test_setup_duration_ms = 12;</code>
   * @return Whether the utpTestSetupDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpTestSetupDurationMs() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <code>optional int64 utp_test_setup_duration_ms = 12;</code>
   * @return The utpTestSetupDurationMs.
   */
  @java.lang.Override
  public long getUtpTestSetupDurationMs() {
    return utpTestSetupDurationMs_;
  }

  public static final int UTP_TEST_RUN_START_TIME_MS_FIELD_NUMBER = 13;
  private long utpTestRunStartTimeMs_ = 0L;
  /**
   * <pre>
   * Span for how long the tests actually took to run.
   * </pre>
   *
   * <code>optional int64 utp_test_run_start_time_ms = 13;</code>
   * @return Whether the utpTestRunStartTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpTestRunStartTimeMs() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * Span for how long the tests actually took to run.
   * </pre>
   *
   * <code>optional int64 utp_test_run_start_time_ms = 13;</code>
   * @return The utpTestRunStartTimeMs.
   */
  @java.lang.Override
  public long getUtpTestRunStartTimeMs() {
    return utpTestRunStartTimeMs_;
  }

  public static final int UTP_TEST_RUN_DURATION_MS_FIELD_NUMBER = 14;
  private long utpTestRunDurationMs_ = 0L;
  /**
   * <code>optional int64 utp_test_run_duration_ms = 14;</code>
   * @return Whether the utpTestRunDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpTestRunDurationMs() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <code>optional int64 utp_test_run_duration_ms = 14;</code>
   * @return The utpTestRunDurationMs.
   */
  @java.lang.Override
  public long getUtpTestRunDurationMs() {
    return utpTestRunDurationMs_;
  }

  public static final int UTP_TEAR_DOWN_START_TIME_MS_FIELD_NUMBER = 15;
  private long utpTearDownStartTimeMs_ = 0L;
  /**
   * <pre>
   * Span of how long it took to clean up the device and test process.
   * This step can include uninstalling apks, closing the managed device,
   * resetting device state, etc.
   * </pre>
   *
   * <code>optional int64 utp_tear_down_start_time_ms = 15;</code>
   * @return Whether the utpTearDownStartTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpTearDownStartTimeMs() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * Span of how long it took to clean up the device and test process.
   * This step can include uninstalling apks, closing the managed device,
   * resetting device state, etc.
   * </pre>
   *
   * <code>optional int64 utp_tear_down_start_time_ms = 15;</code>
   * @return The utpTearDownStartTimeMs.
   */
  @java.lang.Override
  public long getUtpTearDownStartTimeMs() {
    return utpTearDownStartTimeMs_;
  }

  public static final int UTP_TEAR_DOWN_DURATION_MS_FIELD_NUMBER = 16;
  private long utpTearDownDurationMs_ = 0L;
  /**
   * <code>optional int64 utp_tear_down_duration_ms = 16;</code>
   * @return Whether the utpTearDownDurationMs field is set.
   */
  @java.lang.Override
  public boolean hasUtpTearDownDurationMs() {
    return ((bitField0_ & 0x00004000) != 0);
  }
  /**
   * <code>optional int64 utp_tear_down_duration_ms = 16;</code>
   * @return The utpTearDownDurationMs.
   */
  @java.lang.Override
  public long getUtpTearDownDurationMs() {
    return utpTearDownDurationMs_;
  }

  public static final int PROGRESS_RESULT_FIELD_NUMBER = 17;
  private int progressResult_ = 0;
  /**
   * <pre>
   * Whether or not the tests were able to finish, and, if failed, what caused
   * the failure.
   * </pre>
   *
   * <code>optional .android_studio.DeviceTestSpanProfile.TestProgressResult progress_result = 17;</code>
   * @return Whether the progressResult field is set.
   */
  @java.lang.Override public boolean hasProgressResult() {
    return ((bitField0_ & 0x00008000) != 0);
  }
  /**
   * <pre>
   * Whether or not the tests were able to finish, and, if failed, what caused
   * the failure.
   * </pre>
   *
   * <code>optional .android_studio.DeviceTestSpanProfile.TestProgressResult progress_result = 17;</code>
   * @return The progressResult.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult getProgressResult() {
    com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult result = com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult.forNumber(progressResult_);
    return result == null ? com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult.UNKNOWN_RESULT : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, deviceType_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeEnum(2, testKind_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeEnum(3, processType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeInt64(5, deviceLockWaitStartTimeMs_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeInt64(6, deviceLockWaitDurationMs_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeInt64(7, utpSetupStartTimeMs_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeInt64(8, utpSetupDurationMs_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeInt64(9, utpProvideDeviceStartTimeMs_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeInt64(10, utpProvideDeviceDurationMs_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeInt64(11, utpTestSetupStartTimeMs_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      output.writeInt64(12, utpTestSetupDurationMs_);
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      output.writeInt64(13, utpTestRunStartTimeMs_);
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      output.writeInt64(14, utpTestRunDurationMs_);
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      output.writeInt64(15, utpTearDownStartTimeMs_);
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      output.writeInt64(16, utpTearDownDurationMs_);
    }
    if (((bitField0_ & 0x00008000) != 0)) {
      output.writeEnum(17, progressResult_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, deviceType_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, testKind_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, processType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, deviceLockWaitStartTimeMs_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, deviceLockWaitDurationMs_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, utpSetupStartTimeMs_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, utpSetupDurationMs_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, utpProvideDeviceStartTimeMs_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, utpProvideDeviceDurationMs_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(11, utpTestSetupStartTimeMs_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(12, utpTestSetupDurationMs_);
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(13, utpTestRunStartTimeMs_);
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(14, utpTestRunDurationMs_);
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(15, utpTearDownStartTimeMs_);
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(16, utpTearDownDurationMs_);
    }
    if (((bitField0_ & 0x00008000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(17, progressResult_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.DeviceTestSpanProfile)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.DeviceTestSpanProfile other = (com.google.wireless.android.sdk.stats.DeviceTestSpanProfile) obj;

    if (hasDeviceType() != other.hasDeviceType()) return false;
    if (hasDeviceType()) {
      if (deviceType_ != other.deviceType_) return false;
    }
    if (hasTestKind() != other.hasTestKind()) return false;
    if (hasTestKind()) {
      if (testKind_ != other.testKind_) return false;
    }
    if (hasProcessType() != other.hasProcessType()) return false;
    if (hasProcessType()) {
      if (processType_ != other.processType_) return false;
    }
    if (hasDeviceLockWaitStartTimeMs() != other.hasDeviceLockWaitStartTimeMs()) return false;
    if (hasDeviceLockWaitStartTimeMs()) {
      if (getDeviceLockWaitStartTimeMs()
          != other.getDeviceLockWaitStartTimeMs()) return false;
    }
    if (hasDeviceLockWaitDurationMs() != other.hasDeviceLockWaitDurationMs()) return false;
    if (hasDeviceLockWaitDurationMs()) {
      if (getDeviceLockWaitDurationMs()
          != other.getDeviceLockWaitDurationMs()) return false;
    }
    if (hasUtpSetupStartTimeMs() != other.hasUtpSetupStartTimeMs()) return false;
    if (hasUtpSetupStartTimeMs()) {
      if (getUtpSetupStartTimeMs()
          != other.getUtpSetupStartTimeMs()) return false;
    }
    if (hasUtpSetupDurationMs() != other.hasUtpSetupDurationMs()) return false;
    if (hasUtpSetupDurationMs()) {
      if (getUtpSetupDurationMs()
          != other.getUtpSetupDurationMs()) return false;
    }
    if (hasUtpProvideDeviceStartTimeMs() != other.hasUtpProvideDeviceStartTimeMs()) return false;
    if (hasUtpProvideDeviceStartTimeMs()) {
      if (getUtpProvideDeviceStartTimeMs()
          != other.getUtpProvideDeviceStartTimeMs()) return false;
    }
    if (hasUtpProvideDeviceDurationMs() != other.hasUtpProvideDeviceDurationMs()) return false;
    if (hasUtpProvideDeviceDurationMs()) {
      if (getUtpProvideDeviceDurationMs()
          != other.getUtpProvideDeviceDurationMs()) return false;
    }
    if (hasUtpTestSetupStartTimeMs() != other.hasUtpTestSetupStartTimeMs()) return false;
    if (hasUtpTestSetupStartTimeMs()) {
      if (getUtpTestSetupStartTimeMs()
          != other.getUtpTestSetupStartTimeMs()) return false;
    }
    if (hasUtpTestSetupDurationMs() != other.hasUtpTestSetupDurationMs()) return false;
    if (hasUtpTestSetupDurationMs()) {
      if (getUtpTestSetupDurationMs()
          != other.getUtpTestSetupDurationMs()) return false;
    }
    if (hasUtpTestRunStartTimeMs() != other.hasUtpTestRunStartTimeMs()) return false;
    if (hasUtpTestRunStartTimeMs()) {
      if (getUtpTestRunStartTimeMs()
          != other.getUtpTestRunStartTimeMs()) return false;
    }
    if (hasUtpTestRunDurationMs() != other.hasUtpTestRunDurationMs()) return false;
    if (hasUtpTestRunDurationMs()) {
      if (getUtpTestRunDurationMs()
          != other.getUtpTestRunDurationMs()) return false;
    }
    if (hasUtpTearDownStartTimeMs() != other.hasUtpTearDownStartTimeMs()) return false;
    if (hasUtpTearDownStartTimeMs()) {
      if (getUtpTearDownStartTimeMs()
          != other.getUtpTearDownStartTimeMs()) return false;
    }
    if (hasUtpTearDownDurationMs() != other.hasUtpTearDownDurationMs()) return false;
    if (hasUtpTearDownDurationMs()) {
      if (getUtpTearDownDurationMs()
          != other.getUtpTearDownDurationMs()) return false;
    }
    if (hasProgressResult() != other.hasProgressResult()) return false;
    if (hasProgressResult()) {
      if (progressResult_ != other.progressResult_) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDeviceType()) {
      hash = (37 * hash) + DEVICE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + deviceType_;
    }
    if (hasTestKind()) {
      hash = (37 * hash) + TEST_KIND_FIELD_NUMBER;
      hash = (53 * hash) + testKind_;
    }
    if (hasProcessType()) {
      hash = (37 * hash) + PROCESS_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + processType_;
    }
    if (hasDeviceLockWaitStartTimeMs()) {
      hash = (37 * hash) + DEVICE_LOCK_WAIT_START_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDeviceLockWaitStartTimeMs());
    }
    if (hasDeviceLockWaitDurationMs()) {
      hash = (37 * hash) + DEVICE_LOCK_WAIT_DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDeviceLockWaitDurationMs());
    }
    if (hasUtpSetupStartTimeMs()) {
      hash = (37 * hash) + UTP_SETUP_START_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpSetupStartTimeMs());
    }
    if (hasUtpSetupDurationMs()) {
      hash = (37 * hash) + UTP_SETUP_DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpSetupDurationMs());
    }
    if (hasUtpProvideDeviceStartTimeMs()) {
      hash = (37 * hash) + UTP_PROVIDE_DEVICE_START_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpProvideDeviceStartTimeMs());
    }
    if (hasUtpProvideDeviceDurationMs()) {
      hash = (37 * hash) + UTP_PROVIDE_DEVICE_DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpProvideDeviceDurationMs());
    }
    if (hasUtpTestSetupStartTimeMs()) {
      hash = (37 * hash) + UTP_TEST_SETUP_START_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpTestSetupStartTimeMs());
    }
    if (hasUtpTestSetupDurationMs()) {
      hash = (37 * hash) + UTP_TEST_SETUP_DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpTestSetupDurationMs());
    }
    if (hasUtpTestRunStartTimeMs()) {
      hash = (37 * hash) + UTP_TEST_RUN_START_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpTestRunStartTimeMs());
    }
    if (hasUtpTestRunDurationMs()) {
      hash = (37 * hash) + UTP_TEST_RUN_DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpTestRunDurationMs());
    }
    if (hasUtpTearDownStartTimeMs()) {
      hash = (37 * hash) + UTP_TEAR_DOWN_START_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpTearDownStartTimeMs());
    }
    if (hasUtpTearDownDurationMs()) {
      hash = (37 * hash) + UTP_TEAR_DOWN_DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUtpTearDownDurationMs());
    }
    if (hasProgressResult()) {
      hash = (37 * hash) + PROGRESS_RESULT_FIELD_NUMBER;
      hash = (53 * hash) + progressResult_;
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.DeviceTestSpanProfile prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Provides details of a test run on a single device. This includes the
   * provisioning of the device, apk install, test suite run, and device tear
   * down. A single test task may have one or more DeviceTestSpanProfile's as
   * tests may be sharded across multiple devices, or in the case of connected
   * test may run all tests on multiple devices.
   * </pre>
   *
   * Protobuf type {@code android_studio.DeviceTestSpanProfile}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.DeviceTestSpanProfile)
      com.google.wireless.android.sdk.stats.DeviceTestSpanProfileOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DeviceTestSpanProfile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DeviceTestSpanProfile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.class, com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      deviceType_ = 0;
      testKind_ = 0;
      processType_ = 0;
      deviceLockWaitStartTimeMs_ = 0L;
      deviceLockWaitDurationMs_ = 0L;
      utpSetupStartTimeMs_ = 0L;
      utpSetupDurationMs_ = 0L;
      utpProvideDeviceStartTimeMs_ = 0L;
      utpProvideDeviceDurationMs_ = 0L;
      utpTestSetupStartTimeMs_ = 0L;
      utpTestSetupDurationMs_ = 0L;
      utpTestRunStartTimeMs_ = 0L;
      utpTestRunDurationMs_ = 0L;
      utpTearDownStartTimeMs_ = 0L;
      utpTearDownDurationMs_ = 0L;
      progressResult_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DeviceTestSpanProfile_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile build() {
      com.google.wireless.android.sdk.stats.DeviceTestSpanProfile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile buildPartial() {
      com.google.wireless.android.sdk.stats.DeviceTestSpanProfile result = new com.google.wireless.android.sdk.stats.DeviceTestSpanProfile(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.DeviceTestSpanProfile result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.deviceType_ = deviceType_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.testKind_ = testKind_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.processType_ = processType_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.deviceLockWaitStartTimeMs_ = deviceLockWaitStartTimeMs_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.deviceLockWaitDurationMs_ = deviceLockWaitDurationMs_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.utpSetupStartTimeMs_ = utpSetupStartTimeMs_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.utpSetupDurationMs_ = utpSetupDurationMs_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.utpProvideDeviceStartTimeMs_ = utpProvideDeviceStartTimeMs_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.utpProvideDeviceDurationMs_ = utpProvideDeviceDurationMs_;
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.utpTestSetupStartTimeMs_ = utpTestSetupStartTimeMs_;
        to_bitField0_ |= 0x00000200;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.utpTestSetupDurationMs_ = utpTestSetupDurationMs_;
        to_bitField0_ |= 0x00000400;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.utpTestRunStartTimeMs_ = utpTestRunStartTimeMs_;
        to_bitField0_ |= 0x00000800;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.utpTestRunDurationMs_ = utpTestRunDurationMs_;
        to_bitField0_ |= 0x00001000;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.utpTearDownStartTimeMs_ = utpTearDownStartTimeMs_;
        to_bitField0_ |= 0x00002000;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.utpTearDownDurationMs_ = utpTearDownDurationMs_;
        to_bitField0_ |= 0x00004000;
      }
      if (((from_bitField0_ & 0x00008000) != 0)) {
        result.progressResult_ = progressResult_;
        to_bitField0_ |= 0x00008000;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.DeviceTestSpanProfile) {
        return mergeFrom((com.google.wireless.android.sdk.stats.DeviceTestSpanProfile)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.DeviceTestSpanProfile other) {
      if (other == com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.getDefaultInstance()) return this;
      if (other.hasDeviceType()) {
        setDeviceType(other.getDeviceType());
      }
      if (other.hasTestKind()) {
        setTestKind(other.getTestKind());
      }
      if (other.hasProcessType()) {
        setProcessType(other.getProcessType());
      }
      if (other.hasDeviceLockWaitStartTimeMs()) {
        setDeviceLockWaitStartTimeMs(other.getDeviceLockWaitStartTimeMs());
      }
      if (other.hasDeviceLockWaitDurationMs()) {
        setDeviceLockWaitDurationMs(other.getDeviceLockWaitDurationMs());
      }
      if (other.hasUtpSetupStartTimeMs()) {
        setUtpSetupStartTimeMs(other.getUtpSetupStartTimeMs());
      }
      if (other.hasUtpSetupDurationMs()) {
        setUtpSetupDurationMs(other.getUtpSetupDurationMs());
      }
      if (other.hasUtpProvideDeviceStartTimeMs()) {
        setUtpProvideDeviceStartTimeMs(other.getUtpProvideDeviceStartTimeMs());
      }
      if (other.hasUtpProvideDeviceDurationMs()) {
        setUtpProvideDeviceDurationMs(other.getUtpProvideDeviceDurationMs());
      }
      if (other.hasUtpTestSetupStartTimeMs()) {
        setUtpTestSetupStartTimeMs(other.getUtpTestSetupStartTimeMs());
      }
      if (other.hasUtpTestSetupDurationMs()) {
        setUtpTestSetupDurationMs(other.getUtpTestSetupDurationMs());
      }
      if (other.hasUtpTestRunStartTimeMs()) {
        setUtpTestRunStartTimeMs(other.getUtpTestRunStartTimeMs());
      }
      if (other.hasUtpTestRunDurationMs()) {
        setUtpTestRunDurationMs(other.getUtpTestRunDurationMs());
      }
      if (other.hasUtpTearDownStartTimeMs()) {
        setUtpTearDownStartTimeMs(other.getUtpTearDownStartTimeMs());
      }
      if (other.hasUtpTearDownDurationMs()) {
        setUtpTearDownDurationMs(other.getUtpTearDownDurationMs());
      }
      if (other.hasProgressResult()) {
        setProgressResult(other.getProgressResult());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType tmpValue =
                  com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(1, tmpRaw);
              } else {
                deviceType_ = tmpRaw;
                bitField0_ |= 0x00000001;
              }
              break;
            } // case 8
            case 16: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.TestRun.TestKind tmpValue =
                  com.google.wireless.android.sdk.stats.TestRun.TestKind.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(2, tmpRaw);
              } else {
                testKind_ = tmpRaw;
                bitField0_ |= 0x00000002;
              }
              break;
            } // case 16
            case 24: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType tmpValue =
                  com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(3, tmpRaw);
              } else {
                processType_ = tmpRaw;
                bitField0_ |= 0x00000004;
              }
              break;
            } // case 24
            case 40: {
              deviceLockWaitStartTimeMs_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 40
            case 48: {
              deviceLockWaitDurationMs_ = input.readInt64();
              bitField0_ |= 0x00000010;
              break;
            } // case 48
            case 56: {
              utpSetupStartTimeMs_ = input.readInt64();
              bitField0_ |= 0x00000020;
              break;
            } // case 56
            case 64: {
              utpSetupDurationMs_ = input.readInt64();
              bitField0_ |= 0x00000040;
              break;
            } // case 64
            case 72: {
              utpProvideDeviceStartTimeMs_ = input.readInt64();
              bitField0_ |= 0x00000080;
              break;
            } // case 72
            case 80: {
              utpProvideDeviceDurationMs_ = input.readInt64();
              bitField0_ |= 0x00000100;
              break;
            } // case 80
            case 88: {
              utpTestSetupStartTimeMs_ = input.readInt64();
              bitField0_ |= 0x00000200;
              break;
            } // case 88
            case 96: {
              utpTestSetupDurationMs_ = input.readInt64();
              bitField0_ |= 0x00000400;
              break;
            } // case 96
            case 104: {
              utpTestRunStartTimeMs_ = input.readInt64();
              bitField0_ |= 0x00000800;
              break;
            } // case 104
            case 112: {
              utpTestRunDurationMs_ = input.readInt64();
              bitField0_ |= 0x00001000;
              break;
            } // case 112
            case 120: {
              utpTearDownStartTimeMs_ = input.readInt64();
              bitField0_ |= 0x00002000;
              break;
            } // case 120
            case 128: {
              utpTearDownDurationMs_ = input.readInt64();
              bitField0_ |= 0x00004000;
              break;
            } // case 128
            case 136: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult tmpValue =
                  com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(17, tmpRaw);
              } else {
                progressResult_ = tmpRaw;
                bitField0_ |= 0x00008000;
              }
              break;
            } // case 136
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int deviceType_ = 0;
    /**
     * <pre>
     * Type of device used in this test run
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.DeviceType device_type = 1;</code>
     * @return Whether the deviceType field is set.
     */
    @java.lang.Override public boolean hasDeviceType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Type of device used in this test run
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.DeviceType device_type = 1;</code>
     * @return The deviceType.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType getDeviceType() {
      com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType result = com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType.forNumber(deviceType_);
      return result == null ? com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType.UNKNOWN_DEVICE_TYPE : result;
    }
    /**
     * <pre>
     * Type of device used in this test run
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.DeviceType device_type = 1;</code>
     * @param value The deviceType to set.
     * @return This builder for chaining.
     */
    public Builder setDeviceType(com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.DeviceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      deviceType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of device used in this test run
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.DeviceType device_type = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeviceType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      deviceType_ = 0;
      onChanged();
      return this;
    }

    private int testKind_ = 0;
    /**
     * <pre>
     * Type of test being run on this device
     * </pre>
     *
     * <code>optional .android_studio.TestRun.TestKind test_kind = 2;</code>
     * @return Whether the testKind field is set.
     */
    @java.lang.Override public boolean hasTestKind() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Type of test being run on this device
     * </pre>
     *
     * <code>optional .android_studio.TestRun.TestKind test_kind = 2;</code>
     * @return The testKind.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.TestRun.TestKind getTestKind() {
      com.google.wireless.android.sdk.stats.TestRun.TestKind result = com.google.wireless.android.sdk.stats.TestRun.TestKind.forNumber(testKind_);
      return result == null ? com.google.wireless.android.sdk.stats.TestRun.TestKind.UNKNOWN_TEST_KIND : result;
    }
    /**
     * <pre>
     * Type of test being run on this device
     * </pre>
     *
     * <code>optional .android_studio.TestRun.TestKind test_kind = 2;</code>
     * @param value The testKind to set.
     * @return This builder for chaining.
     */
    public Builder setTestKind(com.google.wireless.android.sdk.stats.TestRun.TestKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      testKind_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of test being run on this device
     * </pre>
     *
     * <code>optional .android_studio.TestRun.TestKind test_kind = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTestKind() {
      bitField0_ = (bitField0_ & ~0x00000002);
      testKind_ = 0;
      onChanged();
      return this;
    }

    private int processType_ = 0;
    /**
     * <pre>
     * Type of process that is used to install, run, and manage the test.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.ProcessType process_type = 3;</code>
     * @return Whether the processType field is set.
     */
    @java.lang.Override public boolean hasProcessType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Type of process that is used to install, run, and manage the test.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.ProcessType process_type = 3;</code>
     * @return The processType.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType getProcessType() {
      com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType result = com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType.forNumber(processType_);
      return result == null ? com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType.UNKNOWN_PROCESS_TYPE : result;
    }
    /**
     * <pre>
     * Type of process that is used to install, run, and manage the test.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.ProcessType process_type = 3;</code>
     * @param value The processType to set.
     * @return This builder for chaining.
     */
    public Builder setProcessType(com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.ProcessType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      processType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of process that is used to install, run, and manage the test.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.ProcessType process_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearProcessType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      processType_ = 0;
      onChanged();
      return this;
    }

    private long deviceLockWaitStartTimeMs_ ;
    /**
     * <pre>
     * Span of how long the test waited for device(s) to become available.
     * These fields will only be set if a Gradle Managed Device is used and will
     * be the same across all shards in the same test run.
     * </pre>
     *
     * <code>optional int64 device_lock_wait_start_time_ms = 5;</code>
     * @return Whether the deviceLockWaitStartTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasDeviceLockWaitStartTimeMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Span of how long the test waited for device(s) to become available.
     * These fields will only be set if a Gradle Managed Device is used and will
     * be the same across all shards in the same test run.
     * </pre>
     *
     * <code>optional int64 device_lock_wait_start_time_ms = 5;</code>
     * @return The deviceLockWaitStartTimeMs.
     */
    @java.lang.Override
    public long getDeviceLockWaitStartTimeMs() {
      return deviceLockWaitStartTimeMs_;
    }
    /**
     * <pre>
     * Span of how long the test waited for device(s) to become available.
     * These fields will only be set if a Gradle Managed Device is used and will
     * be the same across all shards in the same test run.
     * </pre>
     *
     * <code>optional int64 device_lock_wait_start_time_ms = 5;</code>
     * @param value The deviceLockWaitStartTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setDeviceLockWaitStartTimeMs(long value) {

      deviceLockWaitStartTimeMs_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Span of how long the test waited for device(s) to become available.
     * These fields will only be set if a Gradle Managed Device is used and will
     * be the same across all shards in the same test run.
     * </pre>
     *
     * <code>optional int64 device_lock_wait_start_time_ms = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeviceLockWaitStartTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000008);
      deviceLockWaitStartTimeMs_ = 0L;
      onChanged();
      return this;
    }

    private long deviceLockWaitDurationMs_ ;
    /**
     * <code>optional int64 device_lock_wait_duration_ms = 6;</code>
     * @return Whether the deviceLockWaitDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasDeviceLockWaitDurationMs() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional int64 device_lock_wait_duration_ms = 6;</code>
     * @return The deviceLockWaitDurationMs.
     */
    @java.lang.Override
    public long getDeviceLockWaitDurationMs() {
      return deviceLockWaitDurationMs_;
    }
    /**
     * <code>optional int64 device_lock_wait_duration_ms = 6;</code>
     * @param value The deviceLockWaitDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setDeviceLockWaitDurationMs(long value) {

      deviceLockWaitDurationMs_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 device_lock_wait_duration_ms = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeviceLockWaitDurationMs() {
      bitField0_ = (bitField0_ & ~0x00000010);
      deviceLockWaitDurationMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpSetupStartTimeMs_ ;
    /**
     * <pre>
     * Span of how long the Unified Test Platform needed for internal setup before
     * requesting the device provider.
     * </pre>
     *
     * <code>optional int64 utp_setup_start_time_ms = 7;</code>
     * @return Whether the utpSetupStartTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpSetupStartTimeMs() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Span of how long the Unified Test Platform needed for internal setup before
     * requesting the device provider.
     * </pre>
     *
     * <code>optional int64 utp_setup_start_time_ms = 7;</code>
     * @return The utpSetupStartTimeMs.
     */
    @java.lang.Override
    public long getUtpSetupStartTimeMs() {
      return utpSetupStartTimeMs_;
    }
    /**
     * <pre>
     * Span of how long the Unified Test Platform needed for internal setup before
     * requesting the device provider.
     * </pre>
     *
     * <code>optional int64 utp_setup_start_time_ms = 7;</code>
     * @param value The utpSetupStartTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpSetupStartTimeMs(long value) {

      utpSetupStartTimeMs_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Span of how long the Unified Test Platform needed for internal setup before
     * requesting the device provider.
     * </pre>
     *
     * <code>optional int64 utp_setup_start_time_ms = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpSetupStartTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000020);
      utpSetupStartTimeMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpSetupDurationMs_ ;
    /**
     * <code>optional int64 utp_setup_duration_ms = 8;</code>
     * @return Whether the utpSetupDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpSetupDurationMs() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional int64 utp_setup_duration_ms = 8;</code>
     * @return The utpSetupDurationMs.
     */
    @java.lang.Override
    public long getUtpSetupDurationMs() {
      return utpSetupDurationMs_;
    }
    /**
     * <code>optional int64 utp_setup_duration_ms = 8;</code>
     * @param value The utpSetupDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpSetupDurationMs(long value) {

      utpSetupDurationMs_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 utp_setup_duration_ms = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpSetupDurationMs() {
      bitField0_ = (bitField0_ & ~0x00000040);
      utpSetupDurationMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpProvideDeviceStartTimeMs_ ;
    /**
     * <pre>
     * Span of how long the device took to be provisioned by the device provider
     * </pre>
     *
     * <code>optional int64 utp_provide_device_start_time_ms = 9;</code>
     * @return Whether the utpProvideDeviceStartTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpProvideDeviceStartTimeMs() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Span of how long the device took to be provisioned by the device provider
     * </pre>
     *
     * <code>optional int64 utp_provide_device_start_time_ms = 9;</code>
     * @return The utpProvideDeviceStartTimeMs.
     */
    @java.lang.Override
    public long getUtpProvideDeviceStartTimeMs() {
      return utpProvideDeviceStartTimeMs_;
    }
    /**
     * <pre>
     * Span of how long the device took to be provisioned by the device provider
     * </pre>
     *
     * <code>optional int64 utp_provide_device_start_time_ms = 9;</code>
     * @param value The utpProvideDeviceStartTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpProvideDeviceStartTimeMs(long value) {

      utpProvideDeviceStartTimeMs_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Span of how long the device took to be provisioned by the device provider
     * </pre>
     *
     * <code>optional int64 utp_provide_device_start_time_ms = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpProvideDeviceStartTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000080);
      utpProvideDeviceStartTimeMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpProvideDeviceDurationMs_ ;
    /**
     * <code>optional int64 utp_provide_device_duration_ms = 10;</code>
     * @return Whether the utpProvideDeviceDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpProvideDeviceDurationMs() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional int64 utp_provide_device_duration_ms = 10;</code>
     * @return The utpProvideDeviceDurationMs.
     */
    @java.lang.Override
    public long getUtpProvideDeviceDurationMs() {
      return utpProvideDeviceDurationMs_;
    }
    /**
     * <code>optional int64 utp_provide_device_duration_ms = 10;</code>
     * @param value The utpProvideDeviceDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpProvideDeviceDurationMs(long value) {

      utpProvideDeviceDurationMs_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 utp_provide_device_duration_ms = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpProvideDeviceDurationMs() {
      bitField0_ = (bitField0_ & ~0x00000100);
      utpProvideDeviceDurationMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpTestSetupStartTimeMs_ ;
    /**
     * <pre>
     * Span of how long the device took after device was provided, but before
     * tests start. This includes steps like installing testing and tested apks,
     * checking device state, and setting up test orchestration.
     * </pre>
     *
     * <code>optional int64 utp_test_setup_start_time_ms = 11;</code>
     * @return Whether the utpTestSetupStartTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpTestSetupStartTimeMs() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Span of how long the device took after device was provided, but before
     * tests start. This includes steps like installing testing and tested apks,
     * checking device state, and setting up test orchestration.
     * </pre>
     *
     * <code>optional int64 utp_test_setup_start_time_ms = 11;</code>
     * @return The utpTestSetupStartTimeMs.
     */
    @java.lang.Override
    public long getUtpTestSetupStartTimeMs() {
      return utpTestSetupStartTimeMs_;
    }
    /**
     * <pre>
     * Span of how long the device took after device was provided, but before
     * tests start. This includes steps like installing testing and tested apks,
     * checking device state, and setting up test orchestration.
     * </pre>
     *
     * <code>optional int64 utp_test_setup_start_time_ms = 11;</code>
     * @param value The utpTestSetupStartTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpTestSetupStartTimeMs(long value) {

      utpTestSetupStartTimeMs_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Span of how long the device took after device was provided, but before
     * tests start. This includes steps like installing testing and tested apks,
     * checking device state, and setting up test orchestration.
     * </pre>
     *
     * <code>optional int64 utp_test_setup_start_time_ms = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpTestSetupStartTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000200);
      utpTestSetupStartTimeMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpTestSetupDurationMs_ ;
    /**
     * <code>optional int64 utp_test_setup_duration_ms = 12;</code>
     * @return Whether the utpTestSetupDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpTestSetupDurationMs() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional int64 utp_test_setup_duration_ms = 12;</code>
     * @return The utpTestSetupDurationMs.
     */
    @java.lang.Override
    public long getUtpTestSetupDurationMs() {
      return utpTestSetupDurationMs_;
    }
    /**
     * <code>optional int64 utp_test_setup_duration_ms = 12;</code>
     * @param value The utpTestSetupDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpTestSetupDurationMs(long value) {

      utpTestSetupDurationMs_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 utp_test_setup_duration_ms = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpTestSetupDurationMs() {
      bitField0_ = (bitField0_ & ~0x00000400);
      utpTestSetupDurationMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpTestRunStartTimeMs_ ;
    /**
     * <pre>
     * Span for how long the tests actually took to run.
     * </pre>
     *
     * <code>optional int64 utp_test_run_start_time_ms = 13;</code>
     * @return Whether the utpTestRunStartTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpTestRunStartTimeMs() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Span for how long the tests actually took to run.
     * </pre>
     *
     * <code>optional int64 utp_test_run_start_time_ms = 13;</code>
     * @return The utpTestRunStartTimeMs.
     */
    @java.lang.Override
    public long getUtpTestRunStartTimeMs() {
      return utpTestRunStartTimeMs_;
    }
    /**
     * <pre>
     * Span for how long the tests actually took to run.
     * </pre>
     *
     * <code>optional int64 utp_test_run_start_time_ms = 13;</code>
     * @param value The utpTestRunStartTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpTestRunStartTimeMs(long value) {

      utpTestRunStartTimeMs_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Span for how long the tests actually took to run.
     * </pre>
     *
     * <code>optional int64 utp_test_run_start_time_ms = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpTestRunStartTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000800);
      utpTestRunStartTimeMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpTestRunDurationMs_ ;
    /**
     * <code>optional int64 utp_test_run_duration_ms = 14;</code>
     * @return Whether the utpTestRunDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpTestRunDurationMs() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional int64 utp_test_run_duration_ms = 14;</code>
     * @return The utpTestRunDurationMs.
     */
    @java.lang.Override
    public long getUtpTestRunDurationMs() {
      return utpTestRunDurationMs_;
    }
    /**
     * <code>optional int64 utp_test_run_duration_ms = 14;</code>
     * @param value The utpTestRunDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpTestRunDurationMs(long value) {

      utpTestRunDurationMs_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 utp_test_run_duration_ms = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpTestRunDurationMs() {
      bitField0_ = (bitField0_ & ~0x00001000);
      utpTestRunDurationMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpTearDownStartTimeMs_ ;
    /**
     * <pre>
     * Span of how long it took to clean up the device and test process.
     * This step can include uninstalling apks, closing the managed device,
     * resetting device state, etc.
     * </pre>
     *
     * <code>optional int64 utp_tear_down_start_time_ms = 15;</code>
     * @return Whether the utpTearDownStartTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpTearDownStartTimeMs() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Span of how long it took to clean up the device and test process.
     * This step can include uninstalling apks, closing the managed device,
     * resetting device state, etc.
     * </pre>
     *
     * <code>optional int64 utp_tear_down_start_time_ms = 15;</code>
     * @return The utpTearDownStartTimeMs.
     */
    @java.lang.Override
    public long getUtpTearDownStartTimeMs() {
      return utpTearDownStartTimeMs_;
    }
    /**
     * <pre>
     * Span of how long it took to clean up the device and test process.
     * This step can include uninstalling apks, closing the managed device,
     * resetting device state, etc.
     * </pre>
     *
     * <code>optional int64 utp_tear_down_start_time_ms = 15;</code>
     * @param value The utpTearDownStartTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpTearDownStartTimeMs(long value) {

      utpTearDownStartTimeMs_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Span of how long it took to clean up the device and test process.
     * This step can include uninstalling apks, closing the managed device,
     * resetting device state, etc.
     * </pre>
     *
     * <code>optional int64 utp_tear_down_start_time_ms = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpTearDownStartTimeMs() {
      bitField0_ = (bitField0_ & ~0x00002000);
      utpTearDownStartTimeMs_ = 0L;
      onChanged();
      return this;
    }

    private long utpTearDownDurationMs_ ;
    /**
     * <code>optional int64 utp_tear_down_duration_ms = 16;</code>
     * @return Whether the utpTearDownDurationMs field is set.
     */
    @java.lang.Override
    public boolean hasUtpTearDownDurationMs() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <code>optional int64 utp_tear_down_duration_ms = 16;</code>
     * @return The utpTearDownDurationMs.
     */
    @java.lang.Override
    public long getUtpTearDownDurationMs() {
      return utpTearDownDurationMs_;
    }
    /**
     * <code>optional int64 utp_tear_down_duration_ms = 16;</code>
     * @param value The utpTearDownDurationMs to set.
     * @return This builder for chaining.
     */
    public Builder setUtpTearDownDurationMs(long value) {

      utpTearDownDurationMs_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 utp_tear_down_duration_ms = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtpTearDownDurationMs() {
      bitField0_ = (bitField0_ & ~0x00004000);
      utpTearDownDurationMs_ = 0L;
      onChanged();
      return this;
    }

    private int progressResult_ = 0;
    /**
     * <pre>
     * Whether or not the tests were able to finish, and, if failed, what caused
     * the failure.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.TestProgressResult progress_result = 17;</code>
     * @return Whether the progressResult field is set.
     */
    @java.lang.Override public boolean hasProgressResult() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * Whether or not the tests were able to finish, and, if failed, what caused
     * the failure.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.TestProgressResult progress_result = 17;</code>
     * @return The progressResult.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult getProgressResult() {
      com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult result = com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult.forNumber(progressResult_);
      return result == null ? com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult.UNKNOWN_RESULT : result;
    }
    /**
     * <pre>
     * Whether or not the tests were able to finish, and, if failed, what caused
     * the failure.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.TestProgressResult progress_result = 17;</code>
     * @param value The progressResult to set.
     * @return This builder for chaining.
     */
    public Builder setProgressResult(com.google.wireless.android.sdk.stats.DeviceTestSpanProfile.TestProgressResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00008000;
      progressResult_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether or not the tests were able to finish, and, if failed, what caused
     * the failure.
     * </pre>
     *
     * <code>optional .android_studio.DeviceTestSpanProfile.TestProgressResult progress_result = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearProgressResult() {
      bitField0_ = (bitField0_ & ~0x00008000);
      progressResult_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.DeviceTestSpanProfile)
  }

  // @@protoc_insertion_point(class_scope:android_studio.DeviceTestSpanProfile)
  private static final com.google.wireless.android.sdk.stats.DeviceTestSpanProfile DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.DeviceTestSpanProfile();
  }

  public static com.google.wireless.android.sdk.stats.DeviceTestSpanProfile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<DeviceTestSpanProfile>
      PARSER = new com.google.protobuf.AbstractParser<DeviceTestSpanProfile>() {
    @java.lang.Override
    public DeviceTestSpanProfile parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DeviceTestSpanProfile> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DeviceTestSpanProfile> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.DeviceTestSpanProfile getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

