// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface AndroidStudioEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.AndroidStudioEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Describes a group of event kinds related to each other.
   * Necessary only for events that were originally being reported to Google
   * Analytics (GA).
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.EventCategory category = 1;</code>
   * @return Whether the category field is set.
   */
  boolean hasCategory();
  /**
   * <pre>
   * Describes a group of event kinds related to each other.
   * Necessary only for events that were originally being reported to Google
   * Analytics (GA).
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.EventCategory category = 1;</code>
   * @return The category.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.EventCategory getCategory();

  /**
   * <pre>
   * Specific kind of event, primary separation key of all Android Studio
   * related events.
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.EventKind kind = 2;</code>
   * @return Whether the kind field is set.
   */
  boolean hasKind();
  /**
   * <pre>
   * Specific kind of event, primary separation key of all Android Studio
   * related events.
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.EventKind kind = 2;</code>
   * @return The kind.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.EventKind getKind();

  /**
   * <pre>
   * The session id is a UUID tracking a single instance of Android Studio
   * to associate events together such as kind = TEST_RUN
   * </pre>
   *
   * <code>optional string studio_session_id = 3;</code>
   * @return Whether the studioSessionId field is set.
   */
  boolean hasStudioSessionId();
  /**
   * <pre>
   * The session id is a UUID tracking a single instance of Android Studio
   * to associate events together such as kind = TEST_RUN
   * </pre>
   *
   * <code>optional string studio_session_id = 3;</code>
   * @return The studioSessionId.
   */
  java.lang.String getStudioSessionId();
  /**
   * <pre>
   * The session id is a UUID tracking a single instance of Android Studio
   * to associate events together such as kind = TEST_RUN
   * </pre>
   *
   * <code>optional string studio_session_id = 3;</code>
   * @return The bytes for studioSessionId.
   */
  com.google.protobuf.ByteString
      getStudioSessionIdBytes();

  /**
   * <pre>
   * Fully set when kind = STUDIO_PING
   * or ANDROID_STUDIO_TEST
   * or ANDROID_STUDIO_THROUGH_GRADLE
   * or kind = EMULATOR_PING
   * or kind = TEST_RUN
   * or kind = GAME_TOOLS_PING
   * or kind = AGDE_PING.
   * The version field is set for most messages.
   * </pre>
   *
   * <code>optional .android_studio.ProductDetails product_details = 4 [lazy = true];</code>
   * @return Whether the productDetails field is set.
   */
  boolean hasProductDetails();
  /**
   * <pre>
   * Fully set when kind = STUDIO_PING
   * or ANDROID_STUDIO_TEST
   * or ANDROID_STUDIO_THROUGH_GRADLE
   * or kind = EMULATOR_PING
   * or kind = TEST_RUN
   * or kind = GAME_TOOLS_PING
   * or kind = AGDE_PING.
   * The version field is set for most messages.
   * </pre>
   *
   * <code>optional .android_studio.ProductDetails product_details = 4 [lazy = true];</code>
   * @return The productDetails.
   */
  com.google.wireless.android.sdk.stats.ProductDetails getProductDetails();
  /**
   * <pre>
   * Fully set when kind = STUDIO_PING
   * or ANDROID_STUDIO_TEST
   * or ANDROID_STUDIO_THROUGH_GRADLE
   * or kind = EMULATOR_PING
   * or kind = TEST_RUN
   * or kind = GAME_TOOLS_PING
   * or kind = AGDE_PING.
   * The version field is set for most messages.
   * </pre>
   *
   * <code>optional .android_studio.ProductDetails product_details = 4 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ProductDetailsOrBuilder getProductDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = MONITOR_ACTIVATED or kind = MONITOR_RUNNING
   * Deprecated by AndroidProfilerEvent
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.MonitorType monitor_type = 5 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.monitor_type is deprecated.
   *     See studio_stats.proto;l=38
   * @return Whether the monitorType field is set.
   */
  @java.lang.Deprecated boolean hasMonitorType();
  /**
   * <pre>
   * set when kind = MONITOR_ACTIVATED or kind = MONITOR_RUNNING
   * Deprecated by AndroidProfilerEvent
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.MonitorType monitor_type = 5 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.monitor_type is deprecated.
   *     See studio_stats.proto;l=38
   * @return The monitorType.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.AndroidStudioEvent.MonitorType getMonitorType();

  /**
   * <pre>
   * set when kind = MONITOR_RUNNING
   * Deprecated by AndroidProfilerEvent
   * </pre>
   *
   * <code>optional bool monitor_paused = 6 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.monitor_paused is deprecated.
   *     See studio_stats.proto;l=42
   * @return Whether the monitorPaused field is set.
   */
  @java.lang.Deprecated boolean hasMonitorPaused();
  /**
   * <pre>
   * set when kind = MONITOR_RUNNING
   * Deprecated by AndroidProfilerEvent
   * </pre>
   *
   * <code>optional bool monitor_paused = 6 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.monitor_paused is deprecated.
   *     See studio_stats.proto;l=42
   * @return The monitorPaused.
   */
  @java.lang.Deprecated boolean getMonitorPaused();

  /**
   * <pre>
   * set when kind = PROFILING_OPEN or PROFILING_CAPTURE
   * Deprecated by AndroidProfilerEvent
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.ProfilerCaptureType profiler_capture_type = 7 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.profiler_capture_type is deprecated.
   *     See studio_stats.proto;l=46
   * @return Whether the profilerCaptureType field is set.
   */
  @java.lang.Deprecated boolean hasProfilerCaptureType();
  /**
   * <pre>
   * set when kind = PROFILING_OPEN or PROFILING_CAPTURE
   * Deprecated by AndroidProfilerEvent
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.ProfilerCaptureType profiler_capture_type = 7 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.profiler_capture_type is deprecated.
   *     See studio_stats.proto;l=46
   * @return The profilerCaptureType.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.AndroidStudioEvent.ProfilerCaptureType getProfilerCaptureType();

  /**
   * <pre>
   * set when kind = CLOUD_TESTING_BACKEND_ERROR
   * </pre>
   *
   * <code>optional string cloud_testing_error_message = 8;</code>
   * @return Whether the cloudTestingErrorMessage field is set.
   */
  boolean hasCloudTestingErrorMessage();
  /**
   * <pre>
   * set when kind = CLOUD_TESTING_BACKEND_ERROR
   * </pre>
   *
   * <code>optional string cloud_testing_error_message = 8;</code>
   * @return The cloudTestingErrorMessage.
   */
  java.lang.String getCloudTestingErrorMessage();
  /**
   * <pre>
   * set when kind = CLOUD_TESTING_BACKEND_ERROR
   * </pre>
   *
   * <code>optional string cloud_testing_error_message = 8;</code>
   * @return The bytes for cloudTestingErrorMessage.
   */
  com.google.protobuf.ByteString
      getCloudTestingErrorMessageBytes();

  /**
   * <pre>
   * set when kind = CLOUD_TESTING_COMPARE_SCREENSHOTS_OPENED
   * </pre>
   *
   * <code>optional int32 cloud_testing_loaded_screenshots_count = 9;</code>
   * @return Whether the cloudTestingLoadedScreenshotsCount field is set.
   */
  boolean hasCloudTestingLoadedScreenshotsCount();
  /**
   * <pre>
   * set when kind = CLOUD_TESTING_COMPARE_SCREENSHOTS_OPENED
   * </pre>
   *
   * <code>optional int32 cloud_testing_loaded_screenshots_count = 9;</code>
   * @return The cloudTestingLoadedScreenshotsCount.
   */
  int getCloudTestingLoadedScreenshotsCount();

  /**
   * <pre>
   * Deprecated, use debug_session_start_details instead.
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.RunConfigurationType run_configuration_type = 10 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.run_configuration_type is deprecated.
   *     See studio_stats.proto;l=56
   * @return Whether the runConfigurationType field is set.
   */
  @java.lang.Deprecated boolean hasRunConfigurationType();
  /**
   * <pre>
   * Deprecated, use debug_session_start_details instead.
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.RunConfigurationType run_configuration_type = 10 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.run_configuration_type is deprecated.
   *     See studio_stats.proto;l=56
   * @return The runConfigurationType.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.AndroidStudioEvent.RunConfigurationType getRunConfigurationType();

  /**
   * <pre>
   * Deprecated, use debug_session_start_details instead.
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.DebuggerType debugger_type = 11 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.debugger_type is deprecated.
   *     See studio_stats.proto;l=60
   * @return Whether the debuggerType field is set.
   */
  @java.lang.Deprecated boolean hasDebuggerType();
  /**
   * <pre>
   * Deprecated, use debug_session_start_details instead.
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.DebuggerType debugger_type = 11 [deprecated = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.debugger_type is deprecated.
   *     See studio_stats.proto;l=60
   * @return The debuggerType.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.AndroidStudioEvent.DebuggerType getDebuggerType();

  /**
   * <pre>
   * set when kind = LLDB_LAUNCHED
   * or kind = DEPLOYMENT_APK
   * or kind = DEPLOYMENT_EMULATOR
   * or kind = CLOUD_TESTING_CONFIGURE_CLOUD_DEVICE
   * or kind = CLOUD_TESTING_LAUNCH_CLOUD_DEVICE
   * or kind = CLOUD_TESTING_DEBUG_FROM_RESULTS
   * or kind = TEST_RUN
   * or kind = LayoutInspectorEvent and LayoutInspectorEventType = CAPTURE
   * or kind = ANDROID_PROFILER and AndroidProfilerEvent.Type = CHANGE_DEVICE
   * or kind = DynamicLayoutInspectorEvent
   * or kind = AppInspectionEvent and AppInspectionEvent.Type = PROCESS_SELECTED
   * </pre>
   *
   * <code>optional .android_studio.DeviceInfo device_info = 12 [lazy = true];</code>
   * @return Whether the deviceInfo field is set.
   */
  boolean hasDeviceInfo();
  /**
   * <pre>
   * set when kind = LLDB_LAUNCHED
   * or kind = DEPLOYMENT_APK
   * or kind = DEPLOYMENT_EMULATOR
   * or kind = CLOUD_TESTING_CONFIGURE_CLOUD_DEVICE
   * or kind = CLOUD_TESTING_LAUNCH_CLOUD_DEVICE
   * or kind = CLOUD_TESTING_DEBUG_FROM_RESULTS
   * or kind = TEST_RUN
   * or kind = LayoutInspectorEvent and LayoutInspectorEventType = CAPTURE
   * or kind = ANDROID_PROFILER and AndroidProfilerEvent.Type = CHANGE_DEVICE
   * or kind = DynamicLayoutInspectorEvent
   * or kind = AppInspectionEvent and AppInspectionEvent.Type = PROCESS_SELECTED
   * </pre>
   *
   * <code>optional .android_studio.DeviceInfo device_info = 12 [lazy = true];</code>
   * @return The deviceInfo.
   */
  com.google.wireless.android.sdk.stats.DeviceInfo getDeviceInfo();
  /**
   * <pre>
   * set when kind = LLDB_LAUNCHED
   * or kind = DEPLOYMENT_APK
   * or kind = DEPLOYMENT_EMULATOR
   * or kind = CLOUD_TESTING_CONFIGURE_CLOUD_DEVICE
   * or kind = CLOUD_TESTING_LAUNCH_CLOUD_DEVICE
   * or kind = CLOUD_TESTING_DEBUG_FROM_RESULTS
   * or kind = TEST_RUN
   * or kind = LayoutInspectorEvent and LayoutInspectorEventType = CAPTURE
   * or kind = ANDROID_PROFILER and AndroidProfilerEvent.Type = CHANGE_DEVICE
   * or kind = DynamicLayoutInspectorEvent
   * or kind = AppInspectionEvent and AppInspectionEvent.Type = PROCESS_SELECTED
   * </pre>
   *
   * <code>optional .android_studio.DeviceInfo device_info = 12 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceInfoOrBuilder getDeviceInfoOrBuilder();

  /**
   * <pre>
   * set when kind = LLDB_INSTALL_FAILED
   * e.g. 'failed to get reply to handshake packet'
   * </pre>
   *
   * <code>optional string lldb_session_failure_message = 13;</code>
   * @return Whether the lldbSessionFailureMessage field is set.
   */
  boolean hasLldbSessionFailureMessage();
  /**
   * <pre>
   * set when kind = LLDB_INSTALL_FAILED
   * e.g. 'failed to get reply to handshake packet'
   * </pre>
   *
   * <code>optional string lldb_session_failure_message = 13;</code>
   * @return The lldbSessionFailureMessage.
   */
  java.lang.String getLldbSessionFailureMessage();
  /**
   * <pre>
   * set when kind = LLDB_INSTALL_FAILED
   * e.g. 'failed to get reply to handshake packet'
   * </pre>
   *
   * <code>optional string lldb_session_failure_message = 13;</code>
   * @return The bytes for lldbSessionFailureMessage.
   */
  com.google.protobuf.ByteString
      getLldbSessionFailureMessageBytes();

  /**
   * <pre>
   * set when kind = DEVELOPER_SERVICES_INSTALLED
   * or kind = DEVELOPER_SERVICES_REMOVED
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.DeveloperServiceKind developer_service_kind = 14;</code>
   * @return Whether the developerServiceKind field is set.
   */
  boolean hasDeveloperServiceKind();
  /**
   * <pre>
   * set when kind = DEVELOPER_SERVICES_INSTALLED
   * or kind = DEVELOPER_SERVICES_REMOVED
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.DeveloperServiceKind developer_service_kind = 14;</code>
   * @return The developerServiceKind.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.DeveloperServiceKind getDeveloperServiceKind();

  /**
   * <pre>
   * set when category = GRADLE_SYNC
   * </pre>
   *
   * <code>optional string gradle_version = 15;</code>
   * @return Whether the gradleVersion field is set.
   */
  boolean hasGradleVersion();
  /**
   * <pre>
   * set when category = GRADLE_SYNC
   * </pre>
   *
   * <code>optional string gradle_version = 15;</code>
   * @return The gradleVersion.
   */
  java.lang.String getGradleVersion();
  /**
   * <pre>
   * set when category = GRADLE_SYNC
   * </pre>
   *
   * <code>optional string gradle_version = 15;</code>
   * @return The bytes for gradleVersion.
   */
  com.google.protobuf.ByteString
      getGradleVersionBytes();

  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE_DETAILS (previously set when kind =
   * GRADLE_SYNC_FAILURE)
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.GradleSyncFailure gradle_sync_failure = 16;</code>
   * @return Whether the gradleSyncFailure field is set.
   */
  boolean hasGradleSyncFailure();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE_DETAILS (previously set when kind =
   * GRADLE_SYNC_FAILURE)
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.GradleSyncFailure gradle_sync_failure = 16;</code>
   * @return The gradleSyncFailure.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.GradleSyncFailure getGradleSyncFailure();

  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE and gradle_sync_failure = *_NOT_FOUND
   * e.g. 'org.gradle.api.internal.DemoClass.demoMethod'
   * </pre>
   *
   * <code>optional string gradle_missing_signature = 17;</code>
   * @return Whether the gradleMissingSignature field is set.
   */
  boolean hasGradleMissingSignature();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE and gradle_sync_failure = *_NOT_FOUND
   * e.g. 'org.gradle.api.internal.DemoClass.demoMethod'
   * </pre>
   *
   * <code>optional string gradle_missing_signature = 17;</code>
   * @return The gradleMissingSignature.
   */
  java.lang.String getGradleMissingSignature();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE and gradle_sync_failure = *_NOT_FOUND
   * e.g. 'org.gradle.api.internal.DemoClass.demoMethod'
   * </pre>
   *
   * <code>optional string gradle_missing_signature = 17;</code>
   * @return The bytes for gradleMissingSignature.
   */
  com.google.protobuf.ByteString
      getGradleMissingSignatureBytes();

  /**
   * <pre>
   * set when kind = TEMPLATE_RENDERER
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.TemplateRenderer template_renderer = 18;</code>
   * @return Whether the templateRenderer field is set.
   */
  boolean hasTemplateRenderer();
  /**
   * <pre>
   * set when kind = TEMPLATE_RENDERER
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.TemplateRenderer template_renderer = 18;</code>
   * @return The templateRenderer.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.TemplateRenderer getTemplateRenderer();

  /**
   * <pre>
   * set when kind = STUDIO_CRASH
   * </pre>
   *
   * <code>optional .android_studio.StudioCrash studio_crash = 19 [lazy = true];</code>
   * @return Whether the studioCrash field is set.
   */
  boolean hasStudioCrash();
  /**
   * <pre>
   * set when kind = STUDIO_CRASH
   * </pre>
   *
   * <code>optional .android_studio.StudioCrash studio_crash = 19 [lazy = true];</code>
   * @return The studioCrash.
   */
  com.google.wireless.android.sdk.stats.StudioCrash getStudioCrash();
  /**
   * <pre>
   * set when kind = STUDIO_CRASH
   * </pre>
   *
   * <code>optional .android_studio.StudioCrash studio_crash = 19 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioCrashOrBuilder getStudioCrashOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_BUILD_DETAILS or INSTANT_RUN
   * In the case of INSTANT_RUN, only the plugin version information is included
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildDetails gradle_build_details = 20 [lazy = true];</code>
   * @return Whether the gradleBuildDetails field is set.
   */
  boolean hasGradleBuildDetails();
  /**
   * <pre>
   * set when kind = GRADLE_BUILD_DETAILS or INSTANT_RUN
   * In the case of INSTANT_RUN, only the plugin version information is included
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildDetails gradle_build_details = 20 [lazy = true];</code>
   * @return The gradleBuildDetails.
   */
  com.google.wireless.android.sdk.stats.GradleBuildDetails getGradleBuildDetails();
  /**
   * <pre>
   * set when kind = GRADLE_BUILD_DETAILS or INSTANT_RUN
   * In the case of INSTANT_RUN, only the plugin version information is included
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildDetails gradle_build_details = 20 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleBuildDetailsOrBuilder getGradleBuildDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = INSTANT_RUN
   * </pre>
   *
   * <code>optional .android_studio.InstantRun instant_run = 21 [lazy = true];</code>
   * @return Whether the instantRun field is set.
   */
  boolean hasInstantRun();
  /**
   * <pre>
   * set when kind = INSTANT_RUN
   * </pre>
   *
   * <code>optional .android_studio.InstantRun instant_run = 21 [lazy = true];</code>
   * @return The instantRun.
   */
  com.google.wireless.android.sdk.stats.InstantRun getInstantRun();
  /**
   * <pre>
   * set when kind = INSTANT_RUN
   * </pre>
   *
   * <code>optional .android_studio.InstantRun instant_run = 21 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.InstantRunOrBuilder getInstantRunOrBuilder();

  /**
   * <pre>
   * set when kind = META_METRICS
   * </pre>
   *
   * <code>optional .android_studio.MetaMetrics meta_metrics = 22 [lazy = true];</code>
   * @return Whether the metaMetrics field is set.
   */
  boolean hasMetaMetrics();
  /**
   * <pre>
   * set when kind = META_METRICS
   * </pre>
   *
   * <code>optional .android_studio.MetaMetrics meta_metrics = 22 [lazy = true];</code>
   * @return The metaMetrics.
   */
  com.google.wireless.android.sdk.stats.MetaMetrics getMetaMetrics();
  /**
   * <pre>
   * set when kind = META_METRICS
   * </pre>
   *
   * <code>optional .android_studio.MetaMetrics meta_metrics = 22 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MetaMetricsOrBuilder getMetaMetricsOrBuilder();

  /**
   * <pre>
   * set when kind = EMULATOR_PING
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails emulator_details = 23 [lazy = true];</code>
   * @return Whether the emulatorDetails field is set.
   */
  boolean hasEmulatorDetails();
  /**
   * <pre>
   * set when kind = EMULATOR_PING
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails emulator_details = 23 [lazy = true];</code>
   * @return The emulatorDetails.
   */
  com.google.wireless.android.sdk.stats.EmulatorDetails getEmulatorDetails();
  /**
   * <pre>
   * set when kind = EMULATOR_PING
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails emulator_details = 23 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorDetailsOrBuilder getEmulatorDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = TEST_RUN
   * </pre>
   *
   * <code>optional .android_studio.TestRun test_run = 24 [lazy = true];</code>
   * @return Whether the testRun field is set.
   */
  boolean hasTestRun();
  /**
   * <pre>
   * set when kind = TEST_RUN
   * </pre>
   *
   * <code>optional .android_studio.TestRun test_run = 24 [lazy = true];</code>
   * @return The testRun.
   */
  com.google.wireless.android.sdk.stats.TestRun getTestRun();
  /**
   * <pre>
   * set when kind = TEST_RUN
   * </pre>
   *
   * <code>optional .android_studio.TestRun test_run = 24 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TestRunOrBuilder getTestRunOrBuilder();

  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENT (deprecated), use the repeated
   * field emulator_ui_events instead.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorUiEvent emulator_ui_event = 25 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.emulator_ui_event is deprecated.
   *     See studio_stats.proto;l=118
   * @return Whether the emulatorUiEvent field is set.
   */
  @java.lang.Deprecated boolean hasEmulatorUiEvent();
  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENT (deprecated), use the repeated
   * field emulator_ui_events instead.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorUiEvent emulator_ui_event = 25 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.emulator_ui_event is deprecated.
   *     See studio_stats.proto;l=118
   * @return The emulatorUiEvent.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.EmulatorUiEvent getEmulatorUiEvent();
  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENT (deprecated), use the repeated
   * field emulator_ui_events instead.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorUiEvent emulator_ui_event = 25 [deprecated = true, lazy = true];</code>
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.EmulatorUiEventOrBuilder getEmulatorUiEventOrBuilder();

  /**
   * <pre>
   * set when kind = HYPERVISOR
   * </pre>
   *
   * <code>optional .android_studio.Hypervisor hypervisor = 26 [lazy = true];</code>
   * @return Whether the hypervisor field is set.
   */
  boolean hasHypervisor();
  /**
   * <pre>
   * set when kind = HYPERVISOR
   * </pre>
   *
   * <code>optional .android_studio.Hypervisor hypervisor = 26 [lazy = true];</code>
   * @return The hypervisor.
   */
  com.google.wireless.android.sdk.stats.Hypervisor getHypervisor();
  /**
   * <pre>
   * set when kind = HYPERVISOR
   * </pre>
   *
   * <code>optional .android_studio.Hypervisor hypervisor = 26 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.HypervisorOrBuilder getHypervisorOrBuilder();

  /**
   * <pre>
   * set when kind = EMULATOR_HOST
   * </pre>
   *
   * <code>optional .android_studio.EmulatorHost emulator_host = 27 [lazy = true];</code>
   * @return Whether the emulatorHost field is set.
   */
  boolean hasEmulatorHost();
  /**
   * <pre>
   * set when kind = EMULATOR_HOST
   * </pre>
   *
   * <code>optional .android_studio.EmulatorHost emulator_host = 27 [lazy = true];</code>
   * @return The emulatorHost.
   */
  com.google.wireless.android.sdk.stats.EmulatorHost getEmulatorHost();
  /**
   * <pre>
   * set when kind = EMULATOR_HOST
   * </pre>
   *
   * <code>optional .android_studio.EmulatorHost emulator_host = 27 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorHostOrBuilder getEmulatorHostOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_BUILD_PROFILE
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildProfile gradle_build_profile = 28 [lazy = true];</code>
   * @return Whether the gradleBuildProfile field is set.
   */
  boolean hasGradleBuildProfile();
  /**
   * <pre>
   * set when kind = GRADLE_BUILD_PROFILE
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildProfile gradle_build_profile = 28 [lazy = true];</code>
   * @return The gradleBuildProfile.
   */
  com.google.wireless.android.sdk.stats.GradleBuildProfile getGradleBuildProfile();
  /**
   * <pre>
   * set when kind = GRADLE_BUILD_PROFILE
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildProfile gradle_build_profile = 28 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleBuildProfileOrBuilder getGradleBuildProfileOrBuilder();

  /**
   * <pre>
   * set when kind = LLDB_FRONTEND_EXITED
   * </pre>
   *
   * <code>optional .android_studio.LLDBFrontendDetails lldb_frontend_details = 29 [lazy = true];</code>
   * @return Whether the lldbFrontendDetails field is set.
   */
  boolean hasLldbFrontendDetails();
  /**
   * <pre>
   * set when kind = LLDB_FRONTEND_EXITED
   * </pre>
   *
   * <code>optional .android_studio.LLDBFrontendDetails lldb_frontend_details = 29 [lazy = true];</code>
   * @return The lldbFrontendDetails.
   */
  com.google.wireless.android.sdk.stats.LLDBFrontendDetails getLldbFrontendDetails();
  /**
   * <pre>
   * set when kind = LLDB_FRONTEND_EXITED
   * </pre>
   *
   * <code>optional .android_studio.LLDBFrontendDetails lldb_frontend_details = 29 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LLDBFrontendDetailsOrBuilder getLldbFrontendDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = FIREBASE_ASSISTANT_ERROR_PRESENTED or
   * kind FIREBASE_ASSISTANT_SILENT_ERROR
   * </pre>
   *
   * <code>optional .android_studio.FirebaseErrorDetails firebase_error_details = 30 [lazy = true];</code>
   * @return Whether the firebaseErrorDetails field is set.
   */
  boolean hasFirebaseErrorDetails();
  /**
   * <pre>
   * set when kind = FIREBASE_ASSISTANT_ERROR_PRESENTED or
   * kind FIREBASE_ASSISTANT_SILENT_ERROR
   * </pre>
   *
   * <code>optional .android_studio.FirebaseErrorDetails firebase_error_details = 30 [lazy = true];</code>
   * @return The firebaseErrorDetails.
   */
  com.google.wireless.android.sdk.stats.FirebaseErrorDetails getFirebaseErrorDetails();
  /**
   * <pre>
   * set when kind = FIREBASE_ASSISTANT_ERROR_PRESENTED or
   * kind FIREBASE_ASSISTANT_SILENT_ERROR
   * </pre>
   *
   * <code>optional .android_studio.FirebaseErrorDetails firebase_error_details = 30 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.FirebaseErrorDetailsOrBuilder getFirebaseErrorDetailsOrBuilder();

  /**
   * <pre>
   * Client-side salted (rotating every 532 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_*
   *       or kind = APK_ANALYZER_STATS
   *       or kind = TSDKUA_EVENT
   * </pre>
   *
   * <code>optional string project_id = 31;</code>
   * @return Whether the projectId field is set.
   */
  boolean hasProjectId();
  /**
   * <pre>
   * Client-side salted (rotating every 532 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_*
   *       or kind = APK_ANALYZER_STATS
   *       or kind = TSDKUA_EVENT
   * </pre>
   *
   * <code>optional string project_id = 31;</code>
   * @return The projectId.
   */
  java.lang.String getProjectId();
  /**
   * <pre>
   * Client-side salted (rotating every 532 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_*
   *       or kind = APK_ANALYZER_STATS
   *       or kind = TSDKUA_EVENT
   * </pre>
   *
   * <code>optional string project_id = 31;</code>
   * @return The bytes for projectId.
   */
  com.google.protobuf.ByteString
      getProjectIdBytes();

  /**
   * <pre>
   * set when kind = GFX_TRACE_*
   * </pre>
   *
   * <code>optional .android_studio.GfxTracingDetails gfx_tracing_details = 32 [lazy = true];</code>
   * @return Whether the gfxTracingDetails field is set.
   */
  boolean hasGfxTracingDetails();
  /**
   * <pre>
   * set when kind = GFX_TRACE_*
   * </pre>
   *
   * <code>optional .android_studio.GfxTracingDetails gfx_tracing_details = 32 [lazy = true];</code>
   * @return The gfxTracingDetails.
   */
  com.google.wireless.android.sdk.stats.GfxTracingDetails getGfxTracingDetails();
  /**
   * <pre>
   * set when kind = GFX_TRACE_*
   * </pre>
   *
   * <code>optional .android_studio.GfxTracingDetails gfx_tracing_details = 32 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GfxTracingDetailsOrBuilder getGfxTracingDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = TEST_RECORDER_GENERATE_TEST_CLASS
   * </pre>
   *
   * <code>optional .android_studio.TestRecorderDetails test_recorder_details = 33 [lazy = true];</code>
   * @return Whether the testRecorderDetails field is set.
   */
  boolean hasTestRecorderDetails();
  /**
   * <pre>
   * set when kind = TEST_RECORDER_GENERATE_TEST_CLASS
   * </pre>
   *
   * <code>optional .android_studio.TestRecorderDetails test_recorder_details = 33 [lazy = true];</code>
   * @return The testRecorderDetails.
   */
  com.google.wireless.android.sdk.stats.TestRecorderDetails getTestRecorderDetails();
  /**
   * <pre>
   * set when kind = TEST_RECORDER_GENERATE_TEST_CLASS
   * </pre>
   *
   * <code>optional .android_studio.TestRecorderDetails test_recorder_details = 33 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TestRecorderDetailsOrBuilder getTestRecorderDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_UI_ACTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.UIActionStats ui_action_stats = 34 [lazy = true];</code>
   * @return Whether the uiActionStats field is set.
   */
  boolean hasUiActionStats();
  /**
   * <pre>
   * set when kind = STUDIO_UI_ACTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.UIActionStats ui_action_stats = 34 [lazy = true];</code>
   * @return The uiActionStats.
   */
  com.google.wireless.android.sdk.stats.UIActionStats getUiActionStats();
  /**
   * <pre>
   * set when kind = STUDIO_UI_ACTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.UIActionStats ui_action_stats = 34 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UIActionStatsOrBuilder getUiActionStatsOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_PING
   * </pre>
   *
   * <code>optional .android_studio.MachineDetails machine_details = 35 [lazy = true];</code>
   * @return Whether the machineDetails field is set.
   */
  boolean hasMachineDetails();
  /**
   * <pre>
   * set when kind = STUDIO_PING
   * </pre>
   *
   * <code>optional .android_studio.MachineDetails machine_details = 35 [lazy = true];</code>
   * @return The machineDetails.
   */
  com.google.wireless.android.sdk.stats.MachineDetails getMachineDetails();
  /**
   * <pre>
   * set when kind = STUDIO_PING
   * </pre>
   *
   * <code>optional .android_studio.MachineDetails machine_details = 35 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MachineDetailsOrBuilder getMachineDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_PING
   * </pre>
   *
   * <code>optional .android_studio.JvmDetails jvm_details = 36 [lazy = true];</code>
   * @return Whether the jvmDetails field is set.
   */
  boolean hasJvmDetails();
  /**
   * <pre>
   * set when kind = STUDIO_PING
   * </pre>
   *
   * <code>optional .android_studio.JvmDetails jvm_details = 36 [lazy = true];</code>
   * @return The jvmDetails.
   */
  com.google.wireless.android.sdk.stats.JvmDetails getJvmDetails();
  /**
   * <pre>
   * set when kind = STUDIO_PING
   * </pre>
   *
   * <code>optional .android_studio.JvmDetails jvm_details = 36 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.JvmDetailsOrBuilder getJvmDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_PROCESS_STATS
   * or kind = GRADLE_BUILD_PROFILE
   * or kind = STUDIO_UI_OOM_DIALOG_EVENT
   * or kind = STUDIO_LOW_MEMORY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JavaProcessStats java_process_stats = 37 [lazy = true];</code>
   * @return Whether the javaProcessStats field is set.
   */
  boolean hasJavaProcessStats();
  /**
   * <pre>
   * set when kind = STUDIO_PROCESS_STATS
   * or kind = GRADLE_BUILD_PROFILE
   * or kind = STUDIO_UI_OOM_DIALOG_EVENT
   * or kind = STUDIO_LOW_MEMORY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JavaProcessStats java_process_stats = 37 [lazy = true];</code>
   * @return The javaProcessStats.
   */
  com.google.wireless.android.sdk.stats.JavaProcessStats getJavaProcessStats();
  /**
   * <pre>
   * set when kind = STUDIO_PROCESS_STATS
   * or kind = GRADLE_BUILD_PROFILE
   * or kind = STUDIO_UI_OOM_DIALOG_EVENT
   * or kind = STUDIO_LOW_MEMORY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JavaProcessStats java_process_stats = 37 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.JavaProcessStatsOrBuilder getJavaProcessStatsOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.StudioPerformanceStats studio_performance_stats = 38 [lazy = true];</code>
   * @return Whether the studioPerformanceStats field is set.
   */
  boolean hasStudioPerformanceStats();
  /**
   * <pre>
   * set when kind = STUDIO_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.StudioPerformanceStats studio_performance_stats = 38 [lazy = true];</code>
   * @return The studioPerformanceStats.
   */
  com.google.wireless.android.sdk.stats.StudioPerformanceStats getStudioPerformanceStats();
  /**
   * <pre>
   * set when kind = STUDIO_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.StudioPerformanceStats studio_performance_stats = 38 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioPerformanceStatsOrBuilder getStudioPerformanceStatsOrBuilder();

  /**
   * <pre>
   * set when kind = LLDB_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.LldbPerformanceStats lldb_performance_stats = 39 [lazy = true];</code>
   * @return Whether the lldbPerformanceStats field is set.
   */
  boolean hasLldbPerformanceStats();
  /**
   * <pre>
   * set when kind = LLDB_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.LldbPerformanceStats lldb_performance_stats = 39 [lazy = true];</code>
   * @return The lldbPerformanceStats.
   */
  com.google.wireless.android.sdk.stats.LldbPerformanceStats getLldbPerformanceStats();
  /**
   * <pre>
   * set when kind = LLDB_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.LldbPerformanceStats lldb_performance_stats = 39 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LldbPerformanceStatsOrBuilder getLldbPerformanceStatsOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_PROJECT_OPENED or STUDIO_PROJECT_CLOSED
   * </pre>
   *
   * <code>optional .android_studio.StudioProjectChange studio_project_change = 40 [lazy = true];</code>
   * @return Whether the studioProjectChange field is set.
   */
  boolean hasStudioProjectChange();
  /**
   * <pre>
   * set when kind = STUDIO_PROJECT_OPENED or STUDIO_PROJECT_CLOSED
   * </pre>
   *
   * <code>optional .android_studio.StudioProjectChange studio_project_change = 40 [lazy = true];</code>
   * @return The studioProjectChange.
   */
  com.google.wireless.android.sdk.stats.StudioProjectChange getStudioProjectChange();
  /**
   * <pre>
   * set when kind = STUDIO_PROJECT_OPENED or STUDIO_PROJECT_CLOSED
   * </pre>
   *
   * <code>optional .android_studio.StudioProjectChange studio_project_change = 40 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioProjectChangeOrBuilder getStudioProjectChangeOrBuilder();

  /**
   * <pre>
   * optionally set when kind = FIREBASE_ASSISTANT_* (except for errors).
   * </pre>
   *
   * <code>optional .android_studio.FirebaseContextDetails firebase_context_details = 41 [lazy = true];</code>
   * @return Whether the firebaseContextDetails field is set.
   */
  boolean hasFirebaseContextDetails();
  /**
   * <pre>
   * optionally set when kind = FIREBASE_ASSISTANT_* (except for errors).
   * </pre>
   *
   * <code>optional .android_studio.FirebaseContextDetails firebase_context_details = 41 [lazy = true];</code>
   * @return The firebaseContextDetails.
   */
  com.google.wireless.android.sdk.stats.FirebaseContextDetails getFirebaseContextDetails();
  /**
   * <pre>
   * optionally set when kind = FIREBASE_ASSISTANT_* (except for errors).
   * </pre>
   *
   * <code>optional .android_studio.FirebaseContextDetails firebase_context_details = 41 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.FirebaseContextDetailsOrBuilder getFirebaseContextDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = LAYOUT_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorEvent layout_editor_event = 42 [lazy = true];</code>
   * @return Whether the layoutEditorEvent field is set.
   */
  boolean hasLayoutEditorEvent();
  /**
   * <pre>
   * set when kind = LAYOUT_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorEvent layout_editor_event = 42 [lazy = true];</code>
   * @return The layoutEditorEvent.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorEvent getLayoutEditorEvent();
  /**
   * <pre>
   * set when kind = LAYOUT_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorEvent layout_editor_event = 42 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutEditorEventOrBuilder getLayoutEditorEventOrBuilder();

  /**
   * <pre>
   * set when kind = APP_LINKS_ASSISTANT_STATS
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent app_links_assistant_event = 43 [lazy = true];</code>
   * @return Whether the appLinksAssistantEvent field is set.
   */
  boolean hasAppLinksAssistantEvent();
  /**
   * <pre>
   * set when kind = APP_LINKS_ASSISTANT_STATS
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent app_links_assistant_event = 43 [lazy = true];</code>
   * @return The appLinksAssistantEvent.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent getAppLinksAssistantEvent();
  /**
   * <pre>
   * set when kind = APP_LINKS_ASSISTANT_STATS
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent app_links_assistant_event = 43 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEventOrBuilder getAppLinksAssistantEventOrBuilder();

  /**
   * <pre>
   * set when kind = EMULATOR_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.EmulatorPerformanceStats emulator_performance_stats = 44 [lazy = true];</code>
   * @return Whether the emulatorPerformanceStats field is set.
   */
  boolean hasEmulatorPerformanceStats();
  /**
   * <pre>
   * set when kind = EMULATOR_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.EmulatorPerformanceStats emulator_performance_stats = 44 [lazy = true];</code>
   * @return The emulatorPerformanceStats.
   */
  com.google.wireless.android.sdk.stats.EmulatorPerformanceStats getEmulatorPerformanceStats();
  /**
   * <pre>
   * set when kind = EMULATOR_PERFORMANCE_STATS
   * </pre>
   *
   * <code>optional .android_studio.EmulatorPerformanceStats emulator_performance_stats = 44 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorPerformanceStatsOrBuilder getEmulatorPerformanceStatsOrBuilder();

  /**
   * <pre>
   * set when kind = ADB_ASSISTANT_STATS
   * </pre>
   *
   * <code>optional .android_studio.AdbAssistantStats adb_assistant_stats = 45 [lazy = true];</code>
   * @return Whether the adbAssistantStats field is set.
   */
  boolean hasAdbAssistantStats();
  /**
   * <pre>
   * set when kind = ADB_ASSISTANT_STATS
   * </pre>
   *
   * <code>optional .android_studio.AdbAssistantStats adb_assistant_stats = 45 [lazy = true];</code>
   * @return The adbAssistantStats.
   */
  com.google.wireless.android.sdk.stats.AdbAssistantStats getAdbAssistantStats();
  /**
   * <pre>
   * set when kind = ADB_ASSISTANT_STATS
   * </pre>
   *
   * <code>optional .android_studio.AdbAssistantStats adb_assistant_stats = 45 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AdbAssistantStatsOrBuilder getAdbAssistantStatsOrBuilder();

  /**
   * <pre>
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.LldbSessionStartDetails lldb_session_start_details = 46 [lazy = true];</code>
   * @return Whether the lldbSessionStartDetails field is set.
   */
  boolean hasLldbSessionStartDetails();
  /**
   * <pre>
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.LldbSessionStartDetails lldb_session_start_details = 46 [lazy = true];</code>
   * @return The lldbSessionStartDetails.
   */
  com.google.wireless.android.sdk.stats.LldbSessionStartDetails getLldbSessionStartDetails();
  /**
   * <pre>
   * set when kind = LLDB_SESSION_STARTED
   * </pre>
   *
   * <code>optional .android_studio.LldbSessionStartDetails lldb_session_start_details = 46 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LldbSessionStartDetailsOrBuilder getLldbSessionStartDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = LLDB_SESSION_ENDED
   * </pre>
   *
   * <code>optional .android_studio.LldbSessionEndDetails lldb_session_end_details = 47 [lazy = true];</code>
   * @return Whether the lldbSessionEndDetails field is set.
   */
  boolean hasLldbSessionEndDetails();
  /**
   * <pre>
   * set when kind = LLDB_SESSION_ENDED
   * </pre>
   *
   * <code>optional .android_studio.LldbSessionEndDetails lldb_session_end_details = 47 [lazy = true];</code>
   * @return The lldbSessionEndDetails.
   */
  com.google.wireless.android.sdk.stats.LldbSessionEndDetails getLldbSessionEndDetails();
  /**
   * <pre>
   * set when kind = LLDB_SESSION_ENDED
   * </pre>
   *
   * <code>optional .android_studio.LldbSessionEndDetails lldb_session_end_details = 47 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LldbSessionEndDetailsOrBuilder getLldbSessionEndDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = ANDROID_PROFILER
   * </pre>
   *
   * <code>optional .android_studio.AndroidProfilerEvent android_profiler_event = 48 [lazy = true];</code>
   * @return Whether the androidProfilerEvent field is set.
   */
  boolean hasAndroidProfilerEvent();
  /**
   * <pre>
   * set when kind = ANDROID_PROFILER
   * </pre>
   *
   * <code>optional .android_studio.AndroidProfilerEvent android_profiler_event = 48 [lazy = true];</code>
   * @return The androidProfilerEvent.
   */
  com.google.wireless.android.sdk.stats.AndroidProfilerEvent getAndroidProfilerEvent();
  /**
   * <pre>
   * set when kind = ANDROID_PROFILER
   * </pre>
   *
   * <code>optional .android_studio.AndroidProfilerEvent android_profiler_event = 48 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AndroidProfilerEventOrBuilder getAndroidProfilerEventOrBuilder();

  /**
   * <pre>
   * set when kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>optional .android_studio.ApkAnalyzerStats apk_analyzer_stats = 49 [lazy = true];</code>
   * @return Whether the apkAnalyzerStats field is set.
   */
  boolean hasApkAnalyzerStats();
  /**
   * <pre>
   * set when kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>optional .android_studio.ApkAnalyzerStats apk_analyzer_stats = 49 [lazy = true];</code>
   * @return The apkAnalyzerStats.
   */
  com.google.wireless.android.sdk.stats.ApkAnalyzerStats getApkAnalyzerStats();
  /**
   * <pre>
   * set when kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>optional .android_studio.ApkAnalyzerStats apk_analyzer_stats = 49 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ApkAnalyzerStatsOrBuilder getApkAnalyzerStatsOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_SYNC_STARTED, GRADLE_SYNC_SETUP_STARTED,
   * GRADLE_SYNC_ENDED, GRADLE_SYNC_FAILURE, GRADLE_SYNC_CANCELLED,
   * GRADLE_SYNC_SKIPPED, GRADLE_SYNC_FAILURE_DETAILS, GRADLE_SYNC_ISSUES
   * </pre>
   *
   * <code>optional .android_studio.GradleSyncStats gradle_sync_stats = 50 [lazy = true];</code>
   * @return Whether the gradleSyncStats field is set.
   */
  boolean hasGradleSyncStats();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_STARTED, GRADLE_SYNC_SETUP_STARTED,
   * GRADLE_SYNC_ENDED, GRADLE_SYNC_FAILURE, GRADLE_SYNC_CANCELLED,
   * GRADLE_SYNC_SKIPPED, GRADLE_SYNC_FAILURE_DETAILS, GRADLE_SYNC_ISSUES
   * </pre>
   *
   * <code>optional .android_studio.GradleSyncStats gradle_sync_stats = 50 [lazy = true];</code>
   * @return The gradleSyncStats.
   */
  com.google.wireless.android.sdk.stats.GradleSyncStats getGradleSyncStats();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_STARTED, GRADLE_SYNC_SETUP_STARTED,
   * GRADLE_SYNC_ENDED, GRADLE_SYNC_FAILURE, GRADLE_SYNC_CANCELLED,
   * GRADLE_SYNC_SKIPPED, GRADLE_SYNC_FAILURE_DETAILS, GRADLE_SYNC_ISSUES
   * </pre>
   *
   * <code>optional .android_studio.GradleSyncStats gradle_sync_stats = 50 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleSyncStatsOrBuilder getGradleSyncStatsOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_CPP_SYNC_COMPLETED
   * </pre>
   *
   * <code>optional .android_studio.GradleCppSyncStats gradle_cpp_sync_stats = 113 [lazy = true];</code>
   * @return Whether the gradleCppSyncStats field is set.
   */
  boolean hasGradleCppSyncStats();
  /**
   * <pre>
   * set when kind = GRADLE_CPP_SYNC_COMPLETED
   * </pre>
   *
   * <code>optional .android_studio.GradleCppSyncStats gradle_cpp_sync_stats = 113 [lazy = true];</code>
   * @return The gradleCppSyncStats.
   */
  com.google.wireless.android.sdk.stats.GradleCppSyncStats getGradleCppSyncStats();
  /**
   * <pre>
   * set when kind = GRADLE_CPP_SYNC_COMPLETED
   * </pre>
   *
   * <code>optional .android_studio.GradleCppSyncStats gradle_cpp_sync_stats = 113 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleCppSyncStatsOrBuilder getGradleCppSyncStatsOrBuilder();

  /**
   * <pre>
   * set when category = APK_DEBUG
   * </pre>
   *
   * <code>optional .android_studio.ApkDebugProject apk_debug_project = 51 [lazy = true];</code>
   * @return Whether the apkDebugProject field is set.
   */
  boolean hasApkDebugProject();
  /**
   * <pre>
   * set when category = APK_DEBUG
   * </pre>
   *
   * <code>optional .android_studio.ApkDebugProject apk_debug_project = 51 [lazy = true];</code>
   * @return The apkDebugProject.
   */
  com.google.wireless.android.sdk.stats.ApkDebugProject getApkDebugProject();
  /**
   * <pre>
   * set when category = APK_DEBUG
   * </pre>
   *
   * <code>optional .android_studio.ApkDebugProject apk_debug_project = 51 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ApkDebugProjectOrBuilder getApkDebugProjectOrBuilder();

  /**
   * <pre>
   * set when kind = LAYOUT_INSPECTOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LayoutInspectorEvent layout_inspector_event = 52 [lazy = true];</code>
   * @return Whether the layoutInspectorEvent field is set.
   */
  boolean hasLayoutInspectorEvent();
  /**
   * <pre>
   * set when kind = LAYOUT_INSPECTOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LayoutInspectorEvent layout_inspector_event = 52 [lazy = true];</code>
   * @return The layoutInspectorEvent.
   */
  com.google.wireless.android.sdk.stats.LayoutInspectorEvent getLayoutInspectorEvent();
  /**
   * <pre>
   * set when kind = LAYOUT_INSPECTOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LayoutInspectorEvent layout_inspector_event = 52 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutInspectorEventOrBuilder getLayoutInspectorEventOrBuilder();

  /**
   * <pre>
   * set when kind = ANDROID_PROFILER_DB_STATS
   * </pre>
   *
   * <code>optional .android_studio.AndroidProfilerDbStats android_profiler_db_stats = 53 [lazy = true];</code>
   * @return Whether the androidProfilerDbStats field is set.
   */
  boolean hasAndroidProfilerDbStats();
  /**
   * <pre>
   * set when kind = ANDROID_PROFILER_DB_STATS
   * </pre>
   *
   * <code>optional .android_studio.AndroidProfilerDbStats android_profiler_db_stats = 53 [lazy = true];</code>
   * @return The androidProfilerDbStats.
   */
  com.google.wireless.android.sdk.stats.AndroidProfilerDbStats getAndroidProfilerDbStats();
  /**
   * <pre>
   * set when kind = ANDROID_PROFILER_DB_STATS
   * </pre>
   *
   * <code>optional .android_studio.AndroidProfilerDbStats android_profiler_db_stats = 53 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AndroidProfilerDbStatsOrBuilder getAndroidProfilerDbStatsOrBuilder();

  /**
   * <pre>
   * set when kind = TEMPLATE_RENDERER
   * or kind = GRADLE_SYNC_ENDED
   * </pre>
   *
   * <code>optional .android_studio.KotlinSupport kotlin_support = 54 [lazy = true];</code>
   * @return Whether the kotlinSupport field is set.
   */
  boolean hasKotlinSupport();
  /**
   * <pre>
   * set when kind = TEMPLATE_RENDERER
   * or kind = GRADLE_SYNC_ENDED
   * </pre>
   *
   * <code>optional .android_studio.KotlinSupport kotlin_support = 54 [lazy = true];</code>
   * @return The kotlinSupport.
   */
  com.google.wireless.android.sdk.stats.KotlinSupport getKotlinSupport();
  /**
   * <pre>
   * set when kind = TEMPLATE_RENDERER
   * or kind = GRADLE_SYNC_ENDED
   * </pre>
   *
   * <code>optional .android_studio.KotlinSupport kotlin_support = 54 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.KotlinSupportOrBuilder getKotlinSupportOrBuilder();

  /**
   * <pre>
   * set when kind = CONNECTION_ASSISTANT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ConnectionAssistantEvent connection_assistant_event = 55 [lazy = true];</code>
   * @return Whether the connectionAssistantEvent field is set.
   */
  boolean hasConnectionAssistantEvent();
  /**
   * <pre>
   * set when kind = CONNECTION_ASSISTANT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ConnectionAssistantEvent connection_assistant_event = 55 [lazy = true];</code>
   * @return The connectionAssistantEvent.
   */
  com.google.wireless.android.sdk.stats.ConnectionAssistantEvent getConnectionAssistantEvent();
  /**
   * <pre>
   * set when kind = CONNECTION_ASSISTANT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ConnectionAssistantEvent connection_assistant_event = 55 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ConnectionAssistantEventOrBuilder getConnectionAssistantEventOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_UI_OOM_DIALOG_EVENT
   * </pre>
   *
   * <code>optional .android_studio.OomDialogEvent oom_dialog_event = 56 [lazy = true];</code>
   * @return Whether the oomDialogEvent field is set.
   */
  boolean hasOomDialogEvent();
  /**
   * <pre>
   * set when kind = STUDIO_UI_OOM_DIALOG_EVENT
   * </pre>
   *
   * <code>optional .android_studio.OomDialogEvent oom_dialog_event = 56 [lazy = true];</code>
   * @return The oomDialogEvent.
   */
  com.google.wireless.android.sdk.stats.OomDialogEvent getOomDialogEvent();
  /**
   * <pre>
   * set when kind = STUDIO_UI_OOM_DIALOG_EVENT
   * </pre>
   *
   * <code>optional .android_studio.OomDialogEvent oom_dialog_event = 56 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.OomDialogEventOrBuilder getOomDialogEventOrBuilder();

  /**
   * <pre>
   * set when kind = CMAKE_EDITING_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CMakeEditingEvent cmake_editing_event = 57 [lazy = true];</code>
   * @return Whether the cmakeEditingEvent field is set.
   */
  boolean hasCmakeEditingEvent();
  /**
   * <pre>
   * set when kind = CMAKE_EDITING_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CMakeEditingEvent cmake_editing_event = 57 [lazy = true];</code>
   * @return The cmakeEditingEvent.
   */
  com.google.wireless.android.sdk.stats.CMakeEditingEvent getCmakeEditingEvent();
  /**
   * <pre>
   * set when kind = CMAKE_EDITING_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CMakeEditingEvent cmake_editing_event = 57 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.CMakeEditingEventOrBuilder getCmakeEditingEventOrBuilder();

  /**
   * <pre>
   * set for all events generated by Android Studio
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.IdeBrand ide_brand = 58;</code>
   * @return Whether the ideBrand field is set.
   */
  boolean hasIdeBrand();
  /**
   * <pre>
   * set for all events generated by Android Studio
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.IdeBrand ide_brand = 58;</code>
   * @return The ideBrand.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.IdeBrand getIdeBrand();

  /**
   * <pre>
   * set when kind = CPP_HEADERS_VIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CppHeadersViewEvent cpp_headers_view_event = 59 [lazy = true];</code>
   * @return Whether the cppHeadersViewEvent field is set.
   */
  boolean hasCppHeadersViewEvent();
  /**
   * <pre>
   * set when kind = CPP_HEADERS_VIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CppHeadersViewEvent cpp_headers_view_event = 59 [lazy = true];</code>
   * @return The cppHeadersViewEvent.
   */
  com.google.wireless.android.sdk.stats.CppHeadersViewEvent getCppHeadersViewEvent();
  /**
   * <pre>
   * set when kind = CPP_HEADERS_VIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CppHeadersViewEvent cpp_headers_view_event = 59 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.CppHeadersViewEventOrBuilder getCppHeadersViewEventOrBuilder();

  /**
   * <pre>
   * set when kind = WHATS_NEW_ASSISTANT_EVENT
   * Deprecated since 3.6.0.8, replaced with WhatsNewAssistantUpdateEvent
   * </pre>
   *
   * <code>optional .android_studio.WhatsNewAssistantEvent whats_new_assistant_event = 60 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.whats_new_assistant_event is deprecated.
   *     See studio_stats.proto;l=241
   * @return Whether the whatsNewAssistantEvent field is set.
   */
  @java.lang.Deprecated boolean hasWhatsNewAssistantEvent();
  /**
   * <pre>
   * set when kind = WHATS_NEW_ASSISTANT_EVENT
   * Deprecated since 3.6.0.8, replaced with WhatsNewAssistantUpdateEvent
   * </pre>
   *
   * <code>optional .android_studio.WhatsNewAssistantEvent whats_new_assistant_event = 60 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.whats_new_assistant_event is deprecated.
   *     See studio_stats.proto;l=241
   * @return The whatsNewAssistantEvent.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.WhatsNewAssistantEvent getWhatsNewAssistantEvent();
  /**
   * <pre>
   * set when kind = WHATS_NEW_ASSISTANT_EVENT
   * Deprecated since 3.6.0.8, replaced with WhatsNewAssistantUpdateEvent
   * </pre>
   *
   * <code>optional .android_studio.WhatsNewAssistantEvent whats_new_assistant_event = 60 [deprecated = true, lazy = true];</code>
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.WhatsNewAssistantEventOrBuilder getWhatsNewAssistantEventOrBuilder();

  /**
   * <pre>
   * the project id as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>optional string raw_project_id = 61;</code>
   * @return Whether the rawProjectId field is set.
   */
  boolean hasRawProjectId();
  /**
   * <pre>
   * the project id as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>optional string raw_project_id = 61;</code>
   * @return The rawProjectId.
   */
  java.lang.String getRawProjectId();
  /**
   * <pre>
   * the project id as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>optional string raw_project_id = 61;</code>
   * @return The bytes for rawProjectId.
   */
  com.google.protobuf.ByteString
      getRawProjectIdBytes();

  /**
   * <pre>
   * set when kind = INTELLIJ_INDEXING_STATS
   * </pre>
   *
   * <code>optional .android_studio.IntellijIndexingStats intellij_indexing_stats = 62 [lazy = true];</code>
   * @return Whether the intellijIndexingStats field is set.
   */
  boolean hasIntellijIndexingStats();
  /**
   * <pre>
   * set when kind = INTELLIJ_INDEXING_STATS
   * </pre>
   *
   * <code>optional .android_studio.IntellijIndexingStats intellij_indexing_stats = 62 [lazy = true];</code>
   * @return The intellijIndexingStats.
   */
  com.google.wireless.android.sdk.stats.IntellijIndexingStats getIntellijIndexingStats();
  /**
   * <pre>
   * set when kind = INTELLIJ_INDEXING_STATS
   * </pre>
   *
   * <code>optional .android_studio.IntellijIndexingStats intellij_indexing_stats = 62 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.IntellijIndexingStatsOrBuilder getIntellijIndexingStatsOrBuilder();

  /**
   * <pre>
   * set when kind == LINT_SESSION
   * </pre>
   *
   * <code>optional .android_studio.LintSession lint_session = 63 [lazy = true];</code>
   * @return Whether the lintSession field is set.
   */
  boolean hasLintSession();
  /**
   * <pre>
   * set when kind == LINT_SESSION
   * </pre>
   *
   * <code>optional .android_studio.LintSession lint_session = 63 [lazy = true];</code>
   * @return The lintSession.
   */
  com.google.wireless.android.sdk.stats.LintSession getLintSession();
  /**
   * <pre>
   * set when kind == LINT_SESSION
   * </pre>
   *
   * <code>optional .android_studio.LintSession lint_session = 63 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LintSessionOrBuilder getLintSessionOrBuilder();

  /**
   * <pre>
   * set when kind == LINT_ACTION
   * </pre>
   *
   * <code>optional .android_studio.LintAction lint_action = 64 [lazy = true];</code>
   * @return Whether the lintAction field is set.
   */
  boolean hasLintAction();
  /**
   * <pre>
   * set when kind == LINT_ACTION
   * </pre>
   *
   * <code>optional .android_studio.LintAction lint_action = 64 [lazy = true];</code>
   * @return The lintAction.
   */
  com.google.wireless.android.sdk.stats.LintAction getLintAction();
  /**
   * <pre>
   * set when kind == LINT_ACTION
   * </pre>
   *
   * <code>optional .android_studio.LintAction lint_action = 64 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LintActionOrBuilder getLintActionOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent studio_run_event = 65 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.studio_run_event is deprecated.
   *     See studio_stats.proto;l=260
   * @return Whether the studioRunEvent field is set.
   */
  @java.lang.Deprecated boolean hasStudioRunEvent();
  /**
   * <pre>
   * set when kind = STUDIO_RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent studio_run_event = 65 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.studio_run_event is deprecated.
   *     See studio_stats.proto;l=260
   * @return The studioRunEvent.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.StudioRunEvent getStudioRunEvent();
  /**
   * <pre>
   * set when kind = STUDIO_RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent studio_run_event = 65 [deprecated = true, lazy = true];</code>
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.StudioRunEventOrBuilder getStudioRunEventOrBuilder();

  /**
   * <pre>
   * set when kind = INTELLIJ_PROJECT_SIZE_STATS
   * </pre>
   *
   * <code>repeated .android_studio.IntellijProjectSizeStats intellij_project_size_stats = 66;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.IntellijProjectSizeStats> 
      getIntellijProjectSizeStatsList();
  /**
   * <pre>
   * set when kind = INTELLIJ_PROJECT_SIZE_STATS
   * </pre>
   *
   * <code>repeated .android_studio.IntellijProjectSizeStats intellij_project_size_stats = 66;</code>
   */
  com.google.wireless.android.sdk.stats.IntellijProjectSizeStats getIntellijProjectSizeStats(int index);
  /**
   * <pre>
   * set when kind = INTELLIJ_PROJECT_SIZE_STATS
   * </pre>
   *
   * <code>repeated .android_studio.IntellijProjectSizeStats intellij_project_size_stats = 66;</code>
   */
  int getIntellijProjectSizeStatsCount();
  /**
   * <pre>
   * set when kind = INTELLIJ_PROJECT_SIZE_STATS
   * </pre>
   *
   * <code>repeated .android_studio.IntellijProjectSizeStats intellij_project_size_stats = 66;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.IntellijProjectSizeStatsOrBuilder> 
      getIntellijProjectSizeStatsOrBuilderList();
  /**
   * <pre>
   * set when kind = INTELLIJ_PROJECT_SIZE_STATS
   * </pre>
   *
   * <code>repeated .android_studio.IntellijProjectSizeStats intellij_project_size_stats = 66;</code>
   */
  com.google.wireless.android.sdk.stats.IntellijProjectSizeStatsOrBuilder getIntellijProjectSizeStatsOrBuilder(
      int index);

  /**
   * <pre>
   * set when kind = STUDIO_TOOL_WINDOW_ACTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.StudioToolWindowActionStats studio_tool_window_action_stats = 67 [lazy = true];</code>
   * @return Whether the studioToolWindowActionStats field is set.
   */
  boolean hasStudioToolWindowActionStats();
  /**
   * <pre>
   * set when kind = STUDIO_TOOL_WINDOW_ACTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.StudioToolWindowActionStats studio_tool_window_action_stats = 67 [lazy = true];</code>
   * @return The studioToolWindowActionStats.
   */
  com.google.wireless.android.sdk.stats.StudioToolWindowActionStats getStudioToolWindowActionStats();
  /**
   * <pre>
   * set when kind = STUDIO_TOOL_WINDOW_ACTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.StudioToolWindowActionStats studio_tool_window_action_stats = 67 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioToolWindowActionStatsOrBuilder getStudioToolWindowActionStatsOrBuilder();

  /**
   * <pre>
   * set when kind = PROJECT_STRUCTURE_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.PSDEvent psd_event = 68 [lazy = true];</code>
   * @return Whether the psdEvent field is set.
   */
  boolean hasPsdEvent();
  /**
   * <pre>
   * set when kind = PROJECT_STRUCTURE_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.PSDEvent psd_event = 68 [lazy = true];</code>
   * @return The psdEvent.
   */
  com.google.wireless.android.sdk.stats.PSDEvent getPsdEvent();
  /**
   * <pre>
   * set when kind = PROJECT_STRUCTURE_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.PSDEvent psd_event = 68 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.PSDEventOrBuilder getPsdEventOrBuilder();

  /**
   * <pre>
   * set when Android Studio is launched with the "idea.is.internal=true"
   * flag, indicating that this is somebody debugging Android Studio rather
   * than a normal user sending actual usage metrics.
   * </pre>
   *
   * <code>optional bool idea_is_internal = 69;</code>
   * @return Whether the ideaIsInternal field is set.
   */
  boolean hasIdeaIsInternal();
  /**
   * <pre>
   * set when Android Studio is launched with the "idea.is.internal=true"
   * flag, indicating that this is somebody debugging Android Studio rather
   * than a normal user sending actual usage metrics.
   * </pre>
   *
   * <code>optional bool idea_is_internal = 69;</code>
   * @return The ideaIsInternal.
   */
  boolean getIdeaIsInternal();

  /**
   * <pre>
   * set when kind == JNI_INSPECTION
   * </pre>
   *
   * <code>optional .android_studio.JniInspectionEvent jni_inspection_event = 70 [lazy = true];</code>
   * @return Whether the jniInspectionEvent field is set.
   */
  boolean hasJniInspectionEvent();
  /**
   * <pre>
   * set when kind == JNI_INSPECTION
   * </pre>
   *
   * <code>optional .android_studio.JniInspectionEvent jni_inspection_event = 70 [lazy = true];</code>
   * @return The jniInspectionEvent.
   */
  com.google.wireless.android.sdk.stats.JniInspectionEvent getJniInspectionEvent();
  /**
   * <pre>
   * set when kind == JNI_INSPECTION
   * </pre>
   *
   * <code>optional .android_studio.JniInspectionEvent jni_inspection_event = 70 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.JniInspectionEventOrBuilder getJniInspectionEventOrBuilder();

  /**
   * <pre>
   * set when kind == USER_SENTIMENT
   * </pre>
   *
   * <code>optional .android_studio.UserSentiment user_sentiment = 71 [lazy = true];</code>
   * @return Whether the userSentiment field is set.
   */
  boolean hasUserSentiment();
  /**
   * <pre>
   * set when kind == USER_SENTIMENT
   * </pre>
   *
   * <code>optional .android_studio.UserSentiment user_sentiment = 71 [lazy = true];</code>
   * @return The userSentiment.
   */
  com.google.wireless.android.sdk.stats.UserSentiment getUserSentiment();
  /**
   * <pre>
   * set when kind == USER_SENTIMENT
   * </pre>
   *
   * <code>optional .android_studio.UserSentiment user_sentiment = 71 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UserSentimentOrBuilder getUserSentimentOrBuilder();

  /**
   * <pre>
   * set when kind = RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.RunEvent run_event = 72 [lazy = true];</code>
   * @return Whether the runEvent field is set.
   */
  boolean hasRunEvent();
  /**
   * <pre>
   * set when kind = RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.RunEvent run_event = 72 [lazy = true];</code>
   * @return The runEvent.
   */
  com.google.wireless.android.sdk.stats.RunEvent getRunEvent();
  /**
   * <pre>
   * set when kind = RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.RunEvent run_event = 72 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.RunEventOrBuilder getRunEventOrBuilder();

  /**
   * <pre>
   * set when kind = NAV_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.NavEditorEvent nav_editor_event = 73 [lazy = true];</code>
   * @return Whether the navEditorEvent field is set.
   */
  boolean hasNavEditorEvent();
  /**
   * <pre>
   * set when kind = NAV_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.NavEditorEvent nav_editor_event = 73 [lazy = true];</code>
   * @return The navEditorEvent.
   */
  com.google.wireless.android.sdk.stats.NavEditorEvent getNavEditorEvent();
  /**
   * <pre>
   * set when kind = NAV_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.NavEditorEvent nav_editor_event = 73 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.NavEditorEventOrBuilder getNavEditorEventOrBuilder();

  /**
   * <pre>
   * set when kind = DIALOG_STATS
   * </pre>
   *
   * <code>optional .android_studio.DialogStats dialog_stats = 74 [lazy = true];</code>
   * @return Whether the dialogStats field is set.
   */
  boolean hasDialogStats();
  /**
   * <pre>
   * set when kind = DIALOG_STATS
   * </pre>
   *
   * <code>optional .android_studio.DialogStats dialog_stats = 74 [lazy = true];</code>
   * @return The dialogStats.
   */
  com.google.wireless.android.sdk.stats.DialogStats getDialogStats();
  /**
   * <pre>
   * set when kind = DIALOG_STATS
   * </pre>
   *
   * <code>optional .android_studio.DialogStats dialog_stats = 74 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DialogStatsOrBuilder getDialogStatsOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_PLUGIN_UPGRADE_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.GradlePluginUpgradeDialogStats gradle_plugin_upgrade_dialog = 75 [lazy = true];</code>
   * @return Whether the gradlePluginUpgradeDialog field is set.
   */
  boolean hasGradlePluginUpgradeDialog();
  /**
   * <pre>
   * set when kind = GRADLE_PLUGIN_UPGRADE_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.GradlePluginUpgradeDialogStats gradle_plugin_upgrade_dialog = 75 [lazy = true];</code>
   * @return The gradlePluginUpgradeDialog.
   */
  com.google.wireless.android.sdk.stats.GradlePluginUpgradeDialogStats getGradlePluginUpgradeDialog();
  /**
   * <pre>
   * set when kind = GRADLE_PLUGIN_UPGRADE_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.GradlePluginUpgradeDialogStats gradle_plugin_upgrade_dialog = 75 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradlePluginUpgradeDialogStatsOrBuilder getGradlePluginUpgradeDialogOrBuilder();

  /**
   * <pre>
   * set when kind = DATA_BINDING
   * </pre>
   *
   * <code>optional .android_studio.DataBindingEvent data_binding_event = 76 [lazy = true];</code>
   * @return Whether the dataBindingEvent field is set.
   */
  boolean hasDataBindingEvent();
  /**
   * <pre>
   * set when kind = DATA_BINDING
   * </pre>
   *
   * <code>optional .android_studio.DataBindingEvent data_binding_event = 76 [lazy = true];</code>
   * @return The dataBindingEvent.
   */
  com.google.wireless.android.sdk.stats.DataBindingEvent getDataBindingEvent();
  /**
   * <pre>
   * set when kind = DATA_BINDING
   * </pre>
   *
   * <code>optional .android_studio.DataBindingEvent data_binding_event = 76 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DataBindingEventOrBuilder getDataBindingEventOrBuilder();

  /**
   * <pre>
   * set when kind = TYPING_LATENCY_STATS
   * </pre>
   *
   * <code>optional .android_studio.TypingLatencyStats typing_latency_stats = 77 [lazy = true];</code>
   * @return Whether the typingLatencyStats field is set.
   */
  boolean hasTypingLatencyStats();
  /**
   * <pre>
   * set when kind = TYPING_LATENCY_STATS
   * </pre>
   *
   * <code>optional .android_studio.TypingLatencyStats typing_latency_stats = 77 [lazy = true];</code>
   * @return The typingLatencyStats.
   */
  com.google.wireless.android.sdk.stats.TypingLatencyStats getTypingLatencyStats();
  /**
   * <pre>
   * set when kind = TYPING_LATENCY_STATS
   * </pre>
   *
   * <code>optional .android_studio.TypingLatencyStats typing_latency_stats = 77 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TypingLatencyStatsOrBuilder getTypingLatencyStatsOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_SYNC_ISSUES.
   * </pre>
   *
   * <code>repeated .android_studio.GradleSyncIssue gradle_sync_issues = 78;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.GradleSyncIssue> 
      getGradleSyncIssuesList();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_ISSUES.
   * </pre>
   *
   * <code>repeated .android_studio.GradleSyncIssue gradle_sync_issues = 78;</code>
   */
  com.google.wireless.android.sdk.stats.GradleSyncIssue getGradleSyncIssues(int index);
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_ISSUES.
   * </pre>
   *
   * <code>repeated .android_studio.GradleSyncIssue gradle_sync_issues = 78;</code>
   */
  int getGradleSyncIssuesCount();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_ISSUES.
   * </pre>
   *
   * <code>repeated .android_studio.GradleSyncIssue gradle_sync_issues = 78;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.GradleSyncIssueOrBuilder> 
      getGradleSyncIssuesOrBuilderList();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_ISSUES.
   * </pre>
   *
   * <code>repeated .android_studio.GradleSyncIssue gradle_sync_issues = 78;</code>
   */
  com.google.wireless.android.sdk.stats.GradleSyncIssueOrBuilder getGradleSyncIssuesOrBuilder(
      int index);

  /**
   * <pre>
   * The list of quick-fixes offered to resolve a sync failure. (Quick fixes
   * offered to resolve specific sync issues are reported in
   * gradle_sync_issues). set when kind = GRADLE_SYNC_FAILURE_DETAILS.
   * </pre>
   *
   * <code>repeated .android_studio.AndroidStudioEvent.GradleSyncQuickFix offered_quick_fixes = 79;</code>
   * @return A list containing the offeredQuickFixes.
   */
  java.util.List<com.google.wireless.android.sdk.stats.AndroidStudioEvent.GradleSyncQuickFix> getOfferedQuickFixesList();
  /**
   * <pre>
   * The list of quick-fixes offered to resolve a sync failure. (Quick fixes
   * offered to resolve specific sync issues are reported in
   * gradle_sync_issues). set when kind = GRADLE_SYNC_FAILURE_DETAILS.
   * </pre>
   *
   * <code>repeated .android_studio.AndroidStudioEvent.GradleSyncQuickFix offered_quick_fixes = 79;</code>
   * @return The count of offeredQuickFixes.
   */
  int getOfferedQuickFixesCount();
  /**
   * <pre>
   * The list of quick-fixes offered to resolve a sync failure. (Quick fixes
   * offered to resolve specific sync issues are reported in
   * gradle_sync_issues). set when kind = GRADLE_SYNC_FAILURE_DETAILS.
   * </pre>
   *
   * <code>repeated .android_studio.AndroidStudioEvent.GradleSyncQuickFix offered_quick_fixes = 79;</code>
   * @param index The index of the element to return.
   * @return The offeredQuickFixes at the given index.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.GradleSyncQuickFix getOfferedQuickFixes(int index);

  /**
   * <pre>
   * set when kind = STUDIO_PATCH_UPDATER
   * </pre>
   *
   * <code>optional .android_studio.StudioPatchUpdaterEvent studio_patch_updater_event = 80 [lazy = true];</code>
   * @return Whether the studioPatchUpdaterEvent field is set.
   */
  boolean hasStudioPatchUpdaterEvent();
  /**
   * <pre>
   * set when kind = STUDIO_PATCH_UPDATER
   * </pre>
   *
   * <code>optional .android_studio.StudioPatchUpdaterEvent studio_patch_updater_event = 80 [lazy = true];</code>
   * @return The studioPatchUpdaterEvent.
   */
  com.google.wireless.android.sdk.stats.StudioPatchUpdaterEvent getStudioPatchUpdaterEvent();
  /**
   * <pre>
   * set when kind = STUDIO_PATCH_UPDATER
   * </pre>
   *
   * <code>optional .android_studio.StudioPatchUpdaterEvent studio_patch_updater_event = 80 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioPatchUpdaterEventOrBuilder getStudioPatchUpdaterEventOrBuilder();

  /**
   * <pre>
   * Set when kind = RESOURCE_MANAGER
   * </pre>
   *
   * <code>optional .android_studio.ResourceManagerEvent resource_manager_event = 81 [lazy = true];</code>
   * @return Whether the resourceManagerEvent field is set.
   */
  boolean hasResourceManagerEvent();
  /**
   * <pre>
   * Set when kind = RESOURCE_MANAGER
   * </pre>
   *
   * <code>optional .android_studio.ResourceManagerEvent resource_manager_event = 81 [lazy = true];</code>
   * @return The resourceManagerEvent.
   */
  com.google.wireless.android.sdk.stats.ResourceManagerEvent getResourceManagerEvent();
  /**
   * <pre>
   * Set when kind = RESOURCE_MANAGER
   * </pre>
   *
   * <code>optional .android_studio.ResourceManagerEvent resource_manager_event = 81 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ResourceManagerEventOrBuilder getResourceManagerEventOrBuilder();

  /**
   * <pre>
   * Set when kind = IDE_PLUGIN_INFO
   * </pre>
   *
   * <code>optional .android_studio.IdePluginInfo ide_plugin_info = 82 [lazy = true];</code>
   * @return Whether the idePluginInfo field is set.
   */
  boolean hasIdePluginInfo();
  /**
   * <pre>
   * Set when kind = IDE_PLUGIN_INFO
   * </pre>
   *
   * <code>optional .android_studio.IdePluginInfo ide_plugin_info = 82 [lazy = true];</code>
   * @return The idePluginInfo.
   */
  com.google.wireless.android.sdk.stats.IdePluginInfo getIdePluginInfo();
  /**
   * <pre>
   * Set when kind = IDE_PLUGIN_INFO
   * </pre>
   *
   * <code>optional .android_studio.IdePluginInfo ide_plugin_info = 82 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.IdePluginInfoOrBuilder getIdePluginInfoOrBuilder();

  /**
   * <pre>
   * Set when kind = EDITOR_HIGHLIGHTING_STATS
   * </pre>
   *
   * <code>optional .android_studio.EditorHighlightingStats editor_highlighting_stats = 83 [lazy = true];</code>
   * @return Whether the editorHighlightingStats field is set.
   */
  boolean hasEditorHighlightingStats();
  /**
   * <pre>
   * Set when kind = EDITOR_HIGHLIGHTING_STATS
   * </pre>
   *
   * <code>optional .android_studio.EditorHighlightingStats editor_highlighting_stats = 83 [lazy = true];</code>
   * @return The editorHighlightingStats.
   */
  com.google.wireless.android.sdk.stats.EditorHighlightingStats getEditorHighlightingStats();
  /**
   * <pre>
   * Set when kind = EDITOR_HIGHLIGHTING_STATS
   * </pre>
   *
   * <code>optional .android_studio.EditorHighlightingStats editor_highlighting_stats = 83 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EditorHighlightingStatsOrBuilder getEditorHighlightingStatsOrBuilder();

  /**
   * <pre>
   * Set when kind = WINDOWS_DEFENDER_STATUS
   * </pre>
   *
   * <code>optional .android_studio.WindowsDefenderStatus windows_defender_status = 84 [lazy = true];</code>
   * @return Whether the windowsDefenderStatus field is set.
   */
  boolean hasWindowsDefenderStatus();
  /**
   * <pre>
   * Set when kind = WINDOWS_DEFENDER_STATUS
   * </pre>
   *
   * <code>optional .android_studio.WindowsDefenderStatus windows_defender_status = 84 [lazy = true];</code>
   * @return The windowsDefenderStatus.
   */
  com.google.wireless.android.sdk.stats.WindowsDefenderStatus getWindowsDefenderStatus();
  /**
   * <pre>
   * Set when kind = WINDOWS_DEFENDER_STATUS
   * </pre>
   *
   * <code>optional .android_studio.WindowsDefenderStatus windows_defender_status = 84 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.WindowsDefenderStatusOrBuilder getWindowsDefenderStatusOrBuilder();

  /**
   * <pre>
   * Set when kind = MEMORY_SETTINGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MemorySettingsEvent memory_settings_event = 85 [lazy = true];</code>
   * @return Whether the memorySettingsEvent field is set.
   */
  boolean hasMemorySettingsEvent();
  /**
   * <pre>
   * Set when kind = MEMORY_SETTINGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MemorySettingsEvent memory_settings_event = 85 [lazy = true];</code>
   * @return The memorySettingsEvent.
   */
  com.google.wireless.android.sdk.stats.MemorySettingsEvent getMemorySettingsEvent();
  /**
   * <pre>
   * Set when kind = MEMORY_SETTINGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MemorySettingsEvent memory_settings_event = 85 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MemorySettingsEventOrBuilder getMemorySettingsEventOrBuilder();

  /**
   * <pre>
   * Set when kind = STUDIO_UPDATE_FLOW
   * </pre>
   *
   * <code>optional .android_studio.StudioUpdateFlowEvent studio_update_flow_event = 86 [lazy = true];</code>
   * @return Whether the studioUpdateFlowEvent field is set.
   */
  boolean hasStudioUpdateFlowEvent();
  /**
   * <pre>
   * Set when kind = STUDIO_UPDATE_FLOW
   * </pre>
   *
   * <code>optional .android_studio.StudioUpdateFlowEvent studio_update_flow_event = 86 [lazy = true];</code>
   * @return The studioUpdateFlowEvent.
   */
  com.google.wireless.android.sdk.stats.StudioUpdateFlowEvent getStudioUpdateFlowEvent();
  /**
   * <pre>
   * Set when kind = STUDIO_UPDATE_FLOW
   * </pre>
   *
   * <code>optional .android_studio.StudioUpdateFlowEvent studio_update_flow_event = 86 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioUpdateFlowEventOrBuilder getStudioUpdateFlowEventOrBuilder();

  /**
   * <pre>
   * set when kind = BUILD_OUTPUT_WINDOW_STATS
   * </pre>
   *
   * <code>optional .android_studio.BuildOutputWindowStats build_output_window_stats = 87 [lazy = true];</code>
   * @return Whether the buildOutputWindowStats field is set.
   */
  boolean hasBuildOutputWindowStats();
  /**
   * <pre>
   * set when kind = BUILD_OUTPUT_WINDOW_STATS
   * </pre>
   *
   * <code>optional .android_studio.BuildOutputWindowStats build_output_window_stats = 87 [lazy = true];</code>
   * @return The buildOutputWindowStats.
   */
  com.google.wireless.android.sdk.stats.BuildOutputWindowStats getBuildOutputWindowStats();
  /**
   * <pre>
   * set when kind = BUILD_OUTPUT_WINDOW_STATS
   * </pre>
   *
   * <code>optional .android_studio.BuildOutputWindowStats build_output_window_stats = 87 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BuildOutputWindowStatsOrBuilder getBuildOutputWindowStatsOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_PLUGIN_DSL_USAGE_STATS
   * </pre>
   *
   * <code>optional .android_studio.GradlePluginDslUsageStats gradle_plugin_dsl_usage_stats = 88 [lazy = true];</code>
   * @return Whether the gradlePluginDslUsageStats field is set.
   */
  boolean hasGradlePluginDslUsageStats();
  /**
   * <pre>
   * set when kind = GRADLE_PLUGIN_DSL_USAGE_STATS
   * </pre>
   *
   * <code>optional .android_studio.GradlePluginDslUsageStats gradle_plugin_dsl_usage_stats = 88 [lazy = true];</code>
   * @return The gradlePluginDslUsageStats.
   */
  com.google.wireless.android.sdk.stats.GradlePluginDslUsageStats getGradlePluginDslUsageStats();
  /**
   * <pre>
   * set when kind = GRADLE_PLUGIN_DSL_USAGE_STATS
   * </pre>
   *
   * <code>optional .android_studio.GradlePluginDslUsageStats gradle_plugin_dsl_usage_stats = 88 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradlePluginDslUsageStatsOrBuilder getGradlePluginDslUsageStatsOrBuilder();

  /**
   * <pre>
   * set when kind = WHATS_NEW_ASSISTANT_UPDATE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WhatsNewAssistantUpdateEvent whats_new_assistant_update_event = 89 [lazy = true];</code>
   * @return Whether the whatsNewAssistantUpdateEvent field is set.
   */
  boolean hasWhatsNewAssistantUpdateEvent();
  /**
   * <pre>
   * set when kind = WHATS_NEW_ASSISTANT_UPDATE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WhatsNewAssistantUpdateEvent whats_new_assistant_update_event = 89 [lazy = true];</code>
   * @return The whatsNewAssistantUpdateEvent.
   */
  com.google.wireless.android.sdk.stats.WhatsNewAssistantUpdateEvent getWhatsNewAssistantUpdateEvent();
  /**
   * <pre>
   * set when kind = WHATS_NEW_ASSISTANT_UPDATE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WhatsNewAssistantUpdateEvent whats_new_assistant_update_event = 89 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.WhatsNewAssistantUpdateEventOrBuilder getWhatsNewAssistantUpdateEventOrBuilder();

  /**
   * <pre>
   * set when kind = DEFAULT_ACTIVITY_LOCATOR_STATS
   * </pre>
   *
   * <code>optional .android_studio.DefaultActivityLocatorStats default_activity_locator_stats = 90 [lazy = true];</code>
   * @return Whether the defaultActivityLocatorStats field is set.
   */
  boolean hasDefaultActivityLocatorStats();
  /**
   * <pre>
   * set when kind = DEFAULT_ACTIVITY_LOCATOR_STATS
   * </pre>
   *
   * <code>optional .android_studio.DefaultActivityLocatorStats default_activity_locator_stats = 90 [lazy = true];</code>
   * @return The defaultActivityLocatorStats.
   */
  com.google.wireless.android.sdk.stats.DefaultActivityLocatorStats getDefaultActivityLocatorStats();
  /**
   * <pre>
   * set when kind = DEFAULT_ACTIVITY_LOCATOR_STATS
   * </pre>
   *
   * <code>optional .android_studio.DefaultActivityLocatorStats default_activity_locator_stats = 90 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DefaultActivityLocatorStatsOrBuilder getDefaultActivityLocatorStatsOrBuilder();

  /**
   * <pre>
   * set when kind = MOTION_LAYOUT_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MotionLayoutEditorEvent motion_layout_editor_event = 91 [lazy = true];</code>
   * @return Whether the motionLayoutEditorEvent field is set.
   */
  boolean hasMotionLayoutEditorEvent();
  /**
   * <pre>
   * set when kind = MOTION_LAYOUT_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MotionLayoutEditorEvent motion_layout_editor_event = 91 [lazy = true];</code>
   * @return The motionLayoutEditorEvent.
   */
  com.google.wireless.android.sdk.stats.MotionLayoutEditorEvent getMotionLayoutEditorEvent();
  /**
   * <pre>
   * set when kind = MOTION_LAYOUT_EDITOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MotionLayoutEditorEvent motion_layout_editor_event = 91 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MotionLayoutEditorEventOrBuilder getMotionLayoutEditorEventOrBuilder();

  /**
   * <pre>
   * set when kind = COMPOSE_SAMPLE_EVENT
   * This is a sample project for Compose published on GitHub that can be
   * imported through the sample browser UI or cloned and opened manually
   * </pre>
   *
   * <code>optional .android_studio.ComposeSampleEvent compose_sample_event = 92 [lazy = true];</code>
   * @return Whether the composeSampleEvent field is set.
   */
  boolean hasComposeSampleEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_SAMPLE_EVENT
   * This is a sample project for Compose published on GitHub that can be
   * imported through the sample browser UI or cloned and opened manually
   * </pre>
   *
   * <code>optional .android_studio.ComposeSampleEvent compose_sample_event = 92 [lazy = true];</code>
   * @return The composeSampleEvent.
   */
  com.google.wireless.android.sdk.stats.ComposeSampleEvent getComposeSampleEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_SAMPLE_EVENT
   * This is a sample project for Compose published on GitHub that can be
   * imported through the sample browser UI or cloned and opened manually
   * </pre>
   *
   * <code>optional .android_studio.ComposeSampleEvent compose_sample_event = 92 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ComposeSampleEventOrBuilder getComposeSampleEventOrBuilder();

  /**
   * <pre>
   * set when kind = IMPORT_SAMPLE_EVENT
   * Logs the ID of the sample project imported through the sample browser UI,
   * e.g. android/user-interface-samples/TextStyling
   * </pre>
   *
   * <code>optional .android_studio.ImportSampleEvent import_sample_event = 93 [lazy = true];</code>
   * @return Whether the importSampleEvent field is set.
   */
  boolean hasImportSampleEvent();
  /**
   * <pre>
   * set when kind = IMPORT_SAMPLE_EVENT
   * Logs the ID of the sample project imported through the sample browser UI,
   * e.g. android/user-interface-samples/TextStyling
   * </pre>
   *
   * <code>optional .android_studio.ImportSampleEvent import_sample_event = 93 [lazy = true];</code>
   * @return The importSampleEvent.
   */
  com.google.wireless.android.sdk.stats.ImportSampleEvent getImportSampleEvent();
  /**
   * <pre>
   * set when kind = IMPORT_SAMPLE_EVENT
   * Logs the ID of the sample project imported through the sample browser UI,
   * e.g. android/user-interface-samples/TextStyling
   * </pre>
   *
   * <code>optional .android_studio.ImportSampleEvent import_sample_event = 93 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ImportSampleEventOrBuilder getImportSampleEventOrBuilder();

  /**
   * <pre>
   * set when kind = DYNAMIC_LAYOUT_INSPECTOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorEvent dynamic_layout_inspector_event = 94 [lazy = true];</code>
   * @return Whether the dynamicLayoutInspectorEvent field is set.
   */
  boolean hasDynamicLayoutInspectorEvent();
  /**
   * <pre>
   * set when kind = DYNAMIC_LAYOUT_INSPECTOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorEvent dynamic_layout_inspector_event = 94 [lazy = true];</code>
   * @return The dynamicLayoutInspectorEvent.
   */
  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorEvent getDynamicLayoutInspectorEvent();
  /**
   * <pre>
   * set when kind = DYNAMIC_LAYOUT_INSPECTOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorEvent dynamic_layout_inspector_event = 94 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorEventOrBuilder getDynamicLayoutInspectorEventOrBuilder();

  /**
   * <pre>
   * set when kind = BUILD_ATTRIBUTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.BuildAttributionStats build_attribution_stats = 95 [lazy = true];</code>
   * @return Whether the buildAttributionStats field is set.
   */
  boolean hasBuildAttributionStats();
  /**
   * <pre>
   * set when kind = BUILD_ATTRIBUTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.BuildAttributionStats build_attribution_stats = 95 [lazy = true];</code>
   * @return The buildAttributionStats.
   */
  com.google.wireless.android.sdk.stats.BuildAttributionStats getBuildAttributionStats();
  /**
   * <pre>
   * set when kind = BUILD_ATTRIBUTION_STATS
   * </pre>
   *
   * <code>optional .android_studio.BuildAttributionStats build_attribution_stats = 95 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BuildAttributionStatsOrBuilder getBuildAttributionStatsOrBuilder();

  /**
   * <pre>
   * set when kind = EDITOR_COMPLETION_STATS
   * </pre>
   *
   * <code>optional .android_studio.EditorCompletionStats editor_completion_stats = 96 [lazy = true];</code>
   * @return Whether the editorCompletionStats field is set.
   */
  boolean hasEditorCompletionStats();
  /**
   * <pre>
   * set when kind = EDITOR_COMPLETION_STATS
   * </pre>
   *
   * <code>optional .android_studio.EditorCompletionStats editor_completion_stats = 96 [lazy = true];</code>
   * @return The editorCompletionStats.
   */
  com.google.wireless.android.sdk.stats.EditorCompletionStats getEditorCompletionStats();
  /**
   * <pre>
   * set when kind = EDITOR_COMPLETION_STATS
   * </pre>
   *
   * <code>optional .android_studio.EditorCompletionStats editor_completion_stats = 96 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EditorCompletionStatsOrBuilder getEditorCompletionStatsOrBuilder();

  /**
   * <pre>
   * set when kind = MULTI_VIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MultiViewEvent multi_view_event = 97 [lazy = true];</code>
   * @return Whether the multiViewEvent field is set.
   */
  boolean hasMultiViewEvent();
  /**
   * <pre>
   * set when kind = MULTI_VIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MultiViewEvent multi_view_event = 97 [lazy = true];</code>
   * @return The multiViewEvent.
   */
  com.google.wireless.android.sdk.stats.MultiViewEvent getMultiViewEvent();
  /**
   * <pre>
   * set when kind = MULTI_VIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MultiViewEvent multi_view_event = 97 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MultiViewEventOrBuilder getMultiViewEventOrBuilder();

  /**
   * <pre>
   * set when kind = BUILD_ATTRIBUTION_UI_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BuildAttributionUiEvent build_attribution_ui_event = 98 [lazy = true];</code>
   * @return Whether the buildAttributionUiEvent field is set.
   */
  boolean hasBuildAttributionUiEvent();
  /**
   * <pre>
   * set when kind = BUILD_ATTRIBUTION_UI_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BuildAttributionUiEvent build_attribution_ui_event = 98 [lazy = true];</code>
   * @return The buildAttributionUiEvent.
   */
  com.google.wireless.android.sdk.stats.BuildAttributionUiEvent getBuildAttributionUiEvent();
  /**
   * <pre>
   * set when kind = BUILD_ATTRIBUTION_UI_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BuildAttributionUiEvent build_attribution_ui_event = 98 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BuildAttributionUiEventOrBuilder getBuildAttributionUiEventOrBuilder();

  /**
   * <pre>
   * set when kind = VS_PLUGIN
   * </pre>
   *
   * <code>optional .android_studio.VsPluginEvent vs_plugin_event = 99 [lazy = true];</code>
   * @return Whether the vsPluginEvent field is set.
   */
  boolean hasVsPluginEvent();
  /**
   * <pre>
   * set when kind = VS_PLUGIN
   * </pre>
   *
   * <code>optional .android_studio.VsPluginEvent vs_plugin_event = 99 [lazy = true];</code>
   * @return The vsPluginEvent.
   */
  com.google.wireless.android.sdk.stats.VsPluginEvent getVsPluginEvent();
  /**
   * <pre>
   * set when kind = VS_PLUGIN
   * </pre>
   *
   * <code>optional .android_studio.VsPluginEvent vs_plugin_event = 99 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.VsPluginEventOrBuilder getVsPluginEventOrBuilder();

  /**
   * <pre>
   * set when kind = DESIGN_EDITOR_HELP_PANEL_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DesignEditorHelpPanelEvent design_editor_help_panel_event = 100 [lazy = true];</code>
   * @return Whether the designEditorHelpPanelEvent field is set.
   */
  boolean hasDesignEditorHelpPanelEvent();
  /**
   * <pre>
   * set when kind = DESIGN_EDITOR_HELP_PANEL_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DesignEditorHelpPanelEvent design_editor_help_panel_event = 100 [lazy = true];</code>
   * @return The designEditorHelpPanelEvent.
   */
  com.google.wireless.android.sdk.stats.DesignEditorHelpPanelEvent getDesignEditorHelpPanelEvent();
  /**
   * <pre>
   * set when kind = DESIGN_EDITOR_HELP_PANEL_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DesignEditorHelpPanelEvent design_editor_help_panel_event = 100 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DesignEditorHelpPanelEventOrBuilder getDesignEditorHelpPanelEventOrBuilder();

  /**
   * <pre>
   * set when kind = APP_INSPECTION
   * </pre>
   *
   * <code>optional .android_studio.AppInspectionEvent app_inspection_event = 101 [lazy = true];</code>
   * @return Whether the appInspectionEvent field is set.
   */
  boolean hasAppInspectionEvent();
  /**
   * <pre>
   * set when kind = APP_INSPECTION
   * </pre>
   *
   * <code>optional .android_studio.AppInspectionEvent app_inspection_event = 101 [lazy = true];</code>
   * @return The appInspectionEvent.
   */
  com.google.wireless.android.sdk.stats.AppInspectionEvent getAppInspectionEvent();
  /**
   * <pre>
   * set when kind = APP_INSPECTION
   * </pre>
   *
   * <code>optional .android_studio.AppInspectionEvent app_inspection_event = 101 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AppInspectionEventOrBuilder getAppInspectionEventOrBuilder();

  /**
   * <pre>
   * set when kind = ML_MODEL_BINDING
   * </pre>
   *
   * <code>optional .android_studio.MlModelBindingEvent ml_model_binding_event = 102 [lazy = true];</code>
   * @return Whether the mlModelBindingEvent field is set.
   */
  boolean hasMlModelBindingEvent();
  /**
   * <pre>
   * set when kind = ML_MODEL_BINDING
   * </pre>
   *
   * <code>optional .android_studio.MlModelBindingEvent ml_model_binding_event = 102 [lazy = true];</code>
   * @return The mlModelBindingEvent.
   */
  com.google.wireless.android.sdk.stats.MlModelBindingEvent getMlModelBindingEvent();
  /**
   * <pre>
   * set when kind = ML_MODEL_BINDING
   * </pre>
   *
   * <code>optional .android_studio.MlModelBindingEvent ml_model_binding_event = 102 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MlModelBindingEventOrBuilder getMlModelBindingEventOrBuilder();

  /**
   * <pre>
   * set when kind = DEPLOYMENT_TO_EMULATOR
   * </pre>
   *
   * <code>optional .android_studio.AvdLaunchEvent avd_launch_event = 103 [lazy = true];</code>
   * @return Whether the avdLaunchEvent field is set.
   */
  boolean hasAvdLaunchEvent();
  /**
   * <pre>
   * set when kind = DEPLOYMENT_TO_EMULATOR
   * </pre>
   *
   * <code>optional .android_studio.AvdLaunchEvent avd_launch_event = 103 [lazy = true];</code>
   * @return The avdLaunchEvent.
   */
  com.google.wireless.android.sdk.stats.AvdLaunchEvent getAvdLaunchEvent();
  /**
   * <pre>
   * set when kind = DEPLOYMENT_TO_EMULATOR
   * </pre>
   *
   * <code>optional .android_studio.AvdLaunchEvent avd_launch_event = 103 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AvdLaunchEventOrBuilder getAvdLaunchEventOrBuilder();

  /**
   * <pre>
   * set when kind = NAV_SAFE_ARGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.NavSafeArgsEvent nav_safe_args_event = 104 [lazy = true];</code>
   * @return Whether the navSafeArgsEvent field is set.
   */
  boolean hasNavSafeArgsEvent();
  /**
   * <pre>
   * set when kind = NAV_SAFE_ARGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.NavSafeArgsEvent nav_safe_args_event = 104 [lazy = true];</code>
   * @return The navSafeArgsEvent.
   */
  com.google.wireless.android.sdk.stats.NavSafeArgsEvent getNavSafeArgsEvent();
  /**
   * <pre>
   * set when kind = NAV_SAFE_ARGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.NavSafeArgsEvent nav_safe_args_event = 104 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.NavSafeArgsEventOrBuilder getNavSafeArgsEventOrBuilder();

  /**
   * <pre>
   * set when kind = DAGGER_EDITOR
   * </pre>
   *
   * <code>optional .android_studio.DaggerEditorEvent dagger_editor_event = 105 [lazy = true];</code>
   * @return Whether the daggerEditorEvent field is set.
   */
  boolean hasDaggerEditorEvent();
  /**
   * <pre>
   * set when kind = DAGGER_EDITOR
   * </pre>
   *
   * <code>optional .android_studio.DaggerEditorEvent dagger_editor_event = 105 [lazy = true];</code>
   * @return The daggerEditorEvent.
   */
  com.google.wireless.android.sdk.stats.DaggerEditorEvent getDaggerEditorEvent();
  /**
   * <pre>
   * set when kind = DAGGER_EDITOR
   * </pre>
   *
   * <code>optional .android_studio.DaggerEditorEvent dagger_editor_event = 105 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DaggerEditorEventOrBuilder getDaggerEditorEventOrBuilder();

  /**
   * <pre>
   * set when kind = PARALLEL_ANDROID_TEST_REPORT_UI
   * </pre>
   *
   * <code>optional .android_studio.ParallelAndroidTestReportUiEvent parallel_android_test_report_ui_event = 106 [lazy = true];</code>
   * @return Whether the parallelAndroidTestReportUiEvent field is set.
   */
  boolean hasParallelAndroidTestReportUiEvent();
  /**
   * <pre>
   * set when kind = PARALLEL_ANDROID_TEST_REPORT_UI
   * </pre>
   *
   * <code>optional .android_studio.ParallelAndroidTestReportUiEvent parallel_android_test_report_ui_event = 106 [lazy = true];</code>
   * @return The parallelAndroidTestReportUiEvent.
   */
  com.google.wireless.android.sdk.stats.ParallelAndroidTestReportUiEvent getParallelAndroidTestReportUiEvent();
  /**
   * <pre>
   * set when kind = PARALLEL_ANDROID_TEST_REPORT_UI
   * </pre>
   *
   * <code>optional .android_studio.ParallelAndroidTestReportUiEvent parallel_android_test_report_ui_event = 106 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ParallelAndroidTestReportUiEventOrBuilder getParallelAndroidTestReportUiEventOrBuilder();

  /**
   * <pre>
   * set when kind = APPLY_CHANGES_AGENT_ERROR
   * </pre>
   *
   * <code>optional .android_studio.ApplyChangesAgentError apply_changes_agent_error = 107 [lazy = true];</code>
   * @return Whether the applyChangesAgentError field is set.
   */
  boolean hasApplyChangesAgentError();
  /**
   * <pre>
   * set when kind = APPLY_CHANGES_AGENT_ERROR
   * </pre>
   *
   * <code>optional .android_studio.ApplyChangesAgentError apply_changes_agent_error = 107 [lazy = true];</code>
   * @return The applyChangesAgentError.
   */
  com.google.wireless.android.sdk.stats.ApplyChangesAgentError getApplyChangesAgentError();
  /**
   * <pre>
   * set when kind = APPLY_CHANGES_AGENT_ERROR
   * </pre>
   *
   * <code>optional .android_studio.ApplyChangesAgentError apply_changes_agent_error = 107 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ApplyChangesAgentErrorOrBuilder getApplyChangesAgentErrorOrBuilder();

  /**
   * <pre>
   * set when kind = WIZARD_TEMPLATES_USAGE
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.TemplatesUsage template_usage = 108 [lazy = true];</code>
   * @return Whether the templateUsage field is set.
   */
  boolean hasTemplateUsage();
  /**
   * <pre>
   * set when kind = WIZARD_TEMPLATES_USAGE
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.TemplatesUsage template_usage = 108 [lazy = true];</code>
   * @return The templateUsage.
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.TemplatesUsage getTemplateUsage();
  /**
   * <pre>
   * set when kind = WIZARD_TEMPLATES_USAGE
   * </pre>
   *
   * <code>optional .android_studio.AndroidStudioEvent.TemplatesUsage template_usage = 108 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AndroidStudioEvent.TemplatesUsageOrBuilder getTemplateUsageOrBuilder();

  /**
   * <pre>
   * set when kind = UPGRADE_ASSISTANT_COMPONENT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAssistantComponentEvent upgrade_assistant_component_event = 109 [lazy = true];</code>
   * @return Whether the upgradeAssistantComponentEvent field is set.
   */
  boolean hasUpgradeAssistantComponentEvent();
  /**
   * <pre>
   * set when kind = UPGRADE_ASSISTANT_COMPONENT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAssistantComponentEvent upgrade_assistant_component_event = 109 [lazy = true];</code>
   * @return The upgradeAssistantComponentEvent.
   */
  com.google.wireless.android.sdk.stats.UpgradeAssistantComponentEvent getUpgradeAssistantComponentEvent();
  /**
   * <pre>
   * set when kind = UPGRADE_ASSISTANT_COMPONENT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAssistantComponentEvent upgrade_assistant_component_event = 109 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UpgradeAssistantComponentEventOrBuilder getUpgradeAssistantComponentEventOrBuilder();

  /**
   * <pre>
   * set when kind = UPGRADE_ASSISTANT_PROCESSOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAssistantProcessorEvent upgrade_assistant_processor_event = 110 [lazy = true];</code>
   * @return Whether the upgradeAssistantProcessorEvent field is set.
   */
  boolean hasUpgradeAssistantProcessorEvent();
  /**
   * <pre>
   * set when kind = UPGRADE_ASSISTANT_PROCESSOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAssistantProcessorEvent upgrade_assistant_processor_event = 110 [lazy = true];</code>
   * @return The upgradeAssistantProcessorEvent.
   */
  com.google.wireless.android.sdk.stats.UpgradeAssistantProcessorEvent getUpgradeAssistantProcessorEvent();
  /**
   * <pre>
   * set when kind = UPGRADE_ASSISTANT_PROCESSOR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAssistantProcessorEvent upgrade_assistant_processor_event = 110 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UpgradeAssistantProcessorEventOrBuilder getUpgradeAssistantProcessorEventOrBuilder();

  /**
   * <pre>
   * set when kind = INTERACTIVE_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.InteractivePreviewEvent interactive_preview_event = 111 [lazy = true];</code>
   * @return Whether the interactivePreviewEvent field is set.
   */
  boolean hasInteractivePreviewEvent();
  /**
   * <pre>
   * set when kind = INTERACTIVE_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.InteractivePreviewEvent interactive_preview_event = 111 [lazy = true];</code>
   * @return The interactivePreviewEvent.
   */
  com.google.wireless.android.sdk.stats.InteractivePreviewEvent getInteractivePreviewEvent();
  /**
   * <pre>
   * set when kind = INTERACTIVE_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.InteractivePreviewEvent interactive_preview_event = 111 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.InteractivePreviewEventOrBuilder getInteractivePreviewEventOrBuilder();

  /**
   * <pre>
   * set when kind = COMPOSE_ANIMATION_TOOLING
   * </pre>
   *
   * <code>optional .android_studio.ComposeAnimationToolingEvent compose_animation_tooling_event = 112 [lazy = true];</code>
   * @return Whether the composeAnimationToolingEvent field is set.
   */
  boolean hasComposeAnimationToolingEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_ANIMATION_TOOLING
   * </pre>
   *
   * <code>optional .android_studio.ComposeAnimationToolingEvent compose_animation_tooling_event = 112 [lazy = true];</code>
   * @return The composeAnimationToolingEvent.
   */
  com.google.wireless.android.sdk.stats.ComposeAnimationToolingEvent getComposeAnimationToolingEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_ANIMATION_TOOLING
   * </pre>
   *
   * <code>optional .android_studio.ComposeAnimationToolingEvent compose_animation_tooling_event = 112 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ComposeAnimationToolingEventOrBuilder getComposeAnimationToolingEventOrBuilder();

  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENTS
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorUiEvent emulator_ui_events = 114;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.EmulatorUiEvent> 
      getEmulatorUiEventsList();
  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENTS
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorUiEvent emulator_ui_events = 114;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorUiEvent getEmulatorUiEvents(int index);
  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENTS
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorUiEvent emulator_ui_events = 114;</code>
   */
  int getEmulatorUiEventsCount();
  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENTS
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorUiEvent emulator_ui_events = 114;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.EmulatorUiEventOrBuilder> 
      getEmulatorUiEventsOrBuilderList();
  /**
   * <pre>
   * set when kind = EMULATOR_UI_EVENTS
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorUiEvent emulator_ui_events = 114;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorUiEventOrBuilder getEmulatorUiEventsOrBuilder(
      int index);

  /**
   * <pre>
   * set when kind = SURVEY_RESPONSE
   * </pre>
   *
   * <code>optional .android_studio.SurveyResponse survey_response = 115 [lazy = true];</code>
   * @return Whether the surveyResponse field is set.
   */
  boolean hasSurveyResponse();
  /**
   * <pre>
   * set when kind = SURVEY_RESPONSE
   * </pre>
   *
   * <code>optional .android_studio.SurveyResponse survey_response = 115 [lazy = true];</code>
   * @return The surveyResponse.
   */
  com.google.wireless.android.sdk.stats.SurveyResponse getSurveyResponse();
  /**
   * <pre>
   * set when kind = SURVEY_RESPONSE
   * </pre>
   *
   * <code>optional .android_studio.SurveyResponse survey_response = 115 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SurveyResponseOrBuilder getSurveyResponseOrBuilder();

  /**
   * <pre>
   * set when kind = COMPOSE_DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.ComposeDeployEvent compose_deploy_event = 116 [lazy = true];</code>
   * @return Whether the composeDeployEvent field is set.
   */
  boolean hasComposeDeployEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.ComposeDeployEvent compose_deploy_event = 116 [lazy = true];</code>
   * @return The composeDeployEvent.
   */
  com.google.wireless.android.sdk.stats.ComposeDeployEvent getComposeDeployEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.ComposeDeployEvent compose_deploy_event = 116 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ComposeDeployEventOrBuilder getComposeDeployEventOrBuilder();

  /**
   * <pre>
   * Deprecated, use suggested_import_event instead.
   * set when kind = AUTO_IMPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AutoImportEvent auto_import_event = 117 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.auto_import_event is deprecated.
   *     See studio_stats.proto;l=441
   * @return Whether the autoImportEvent field is set.
   */
  @java.lang.Deprecated boolean hasAutoImportEvent();
  /**
   * <pre>
   * Deprecated, use suggested_import_event instead.
   * set when kind = AUTO_IMPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AutoImportEvent auto_import_event = 117 [deprecated = true, lazy = true];</code>
   * @deprecated android_studio.AndroidStudioEvent.auto_import_event is deprecated.
   *     See studio_stats.proto;l=441
   * @return The autoImportEvent.
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.AutoImportEvent getAutoImportEvent();
  /**
   * <pre>
   * Deprecated, use suggested_import_event instead.
   * set when kind = AUTO_IMPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AutoImportEvent auto_import_event = 117 [deprecated = true, lazy = true];</code>
   */
  @java.lang.Deprecated com.google.wireless.android.sdk.stats.AutoImportEventOrBuilder getAutoImportEventOrBuilder();

  /**
   * <pre>
   * set when kind = FILE_USAGE
   * </pre>
   *
   * <code>optional .android_studio.FileUsage file_usage = 118 [lazy = true];</code>
   * @return Whether the fileUsage field is set.
   */
  boolean hasFileUsage();
  /**
   * <pre>
   * set when kind = FILE_USAGE
   * </pre>
   *
   * <code>optional .android_studio.FileUsage file_usage = 118 [lazy = true];</code>
   * @return The fileUsage.
   */
  com.google.wireless.android.sdk.stats.FileUsage getFileUsage();
  /**
   * <pre>
   * set when kind = FILE_USAGE
   * </pre>
   *
   * <code>optional .android_studio.FileUsage file_usage = 118 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.FileUsageOrBuilder getFileUsageOrBuilder();

  /**
   * <pre>
   * set when kind = LIVE_LITERALS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LiveLiteralsEvent live_literals_event = 119 [lazy = true];</code>
   * @return Whether the liveLiteralsEvent field is set.
   */
  boolean hasLiveLiteralsEvent();
  /**
   * <pre>
   * set when kind = LIVE_LITERALS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LiveLiteralsEvent live_literals_event = 119 [lazy = true];</code>
   * @return The liveLiteralsEvent.
   */
  com.google.wireless.android.sdk.stats.LiveLiteralsEvent getLiveLiteralsEvent();
  /**
   * <pre>
   * set when kind = LIVE_LITERALS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LiveLiteralsEvent live_literals_event = 119 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LiveLiteralsEventOrBuilder getLiveLiteralsEventOrBuilder();

  /**
   * <pre>
   * set when kind = MIGRATE_TO_NON_TRANSITIVE_R_CLASS
   * </pre>
   *
   * <code>optional .android_studio.NonTransitiveRClassMigrationEvent non_transitive_r_class_migration_event = 120 [lazy = true];</code>
   * @return Whether the nonTransitiveRClassMigrationEvent field is set.
   */
  boolean hasNonTransitiveRClassMigrationEvent();
  /**
   * <pre>
   * set when kind = MIGRATE_TO_NON_TRANSITIVE_R_CLASS
   * </pre>
   *
   * <code>optional .android_studio.NonTransitiveRClassMigrationEvent non_transitive_r_class_migration_event = 120 [lazy = true];</code>
   * @return The nonTransitiveRClassMigrationEvent.
   */
  com.google.wireless.android.sdk.stats.NonTransitiveRClassMigrationEvent getNonTransitiveRClassMigrationEvent();
  /**
   * <pre>
   * set when kind = MIGRATE_TO_NON_TRANSITIVE_R_CLASS
   * </pre>
   *
   * <code>optional .android_studio.NonTransitiveRClassMigrationEvent non_transitive_r_class_migration_event = 120 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.NonTransitiveRClassMigrationEventOrBuilder getNonTransitiveRClassMigrationEventOrBuilder();

  /**
   * <pre>
   * set when kind = ANDROID_TEST_RETENTION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AndroidTestRetentionEvent android_test_retention_event = 121 [lazy = true];</code>
   * @return Whether the androidTestRetentionEvent field is set.
   */
  boolean hasAndroidTestRetentionEvent();
  /**
   * <pre>
   * set when kind = ANDROID_TEST_RETENTION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AndroidTestRetentionEvent android_test_retention_event = 121 [lazy = true];</code>
   * @return The androidTestRetentionEvent.
   */
  com.google.wireless.android.sdk.stats.AndroidTestRetentionEvent getAndroidTestRetentionEvent();
  /**
   * <pre>
   * set when kind = ANDROID_TEST_RETENTION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AndroidTestRetentionEvent android_test_retention_event = 121 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AndroidTestRetentionEventOrBuilder getAndroidTestRetentionEventOrBuilder();

  /**
   * <pre>
   * set when kind = SUGGESTED_IMPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SuggestedImportEvent suggested_import_event = 122 [lazy = true];</code>
   * @return Whether the suggestedImportEvent field is set.
   */
  boolean hasSuggestedImportEvent();
  /**
   * <pre>
   * set when kind = SUGGESTED_IMPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SuggestedImportEvent suggested_import_event = 122 [lazy = true];</code>
   * @return The suggestedImportEvent.
   */
  com.google.wireless.android.sdk.stats.SuggestedImportEvent getSuggestedImportEvent();
  /**
   * <pre>
   * set when kind = SUGGESTED_IMPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SuggestedImportEvent suggested_import_event = 122 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SuggestedImportEventOrBuilder getSuggestedImportEventOrBuilder();

  /**
   * <pre>
   * set when kind = VFS_REFRESH
   * </pre>
   *
   * <code>optional .android_studio.VfsRefresh vfs_refresh = 123 [lazy = true];</code>
   * @return Whether the vfsRefresh field is set.
   */
  boolean hasVfsRefresh();
  /**
   * <pre>
   * set when kind = VFS_REFRESH
   * </pre>
   *
   * <code>optional .android_studio.VfsRefresh vfs_refresh = 123 [lazy = true];</code>
   * @return The vfsRefresh.
   */
  com.google.wireless.android.sdk.stats.VfsRefresh getVfsRefresh();
  /**
   * <pre>
   * set when kind = VFS_REFRESH
   * </pre>
   *
   * <code>optional .android_studio.VfsRefresh vfs_refresh = 123 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.VfsRefreshOrBuilder getVfsRefreshOrBuilder();

  /**
   * <pre>
   * Set when kind is SIGNING_WIZARD_*_FAILED or SIGNING_WIZARD_*_SUCCEEDED
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent signing_wizard_event = 124 [lazy = true];</code>
   * @return Whether the signingWizardEvent field is set.
   */
  boolean hasSigningWizardEvent();
  /**
   * <pre>
   * Set when kind is SIGNING_WIZARD_*_FAILED or SIGNING_WIZARD_*_SUCCEEDED
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent signing_wizard_event = 124 [lazy = true];</code>
   * @return The signingWizardEvent.
   */
  com.google.wireless.android.sdk.stats.SigningWizardEvent getSigningWizardEvent();
  /**
   * <pre>
   * Set when kind is SIGNING_WIZARD_*_FAILED or SIGNING_WIZARD_*_SUCCEEDED
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent signing_wizard_event = 124 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SigningWizardEventOrBuilder getSigningWizardEventOrBuilder();

  /**
   * <pre>
   * set when kind = FILE_TYPE
   * </pre>
   *
   * <code>optional .android_studio.FileType file_type = 125 [lazy = true];</code>
   * @return Whether the fileType field is set.
   */
  boolean hasFileType();
  /**
   * <pre>
   * set when kind = FILE_TYPE
   * </pre>
   *
   * <code>optional .android_studio.FileType file_type = 125 [lazy = true];</code>
   * @return The fileType.
   */
  com.google.wireless.android.sdk.stats.FileType getFileType();
  /**
   * <pre>
   * set when kind = FILE_TYPE
   * </pre>
   *
   * <code>optional .android_studio.FileType file_type = 125 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.FileTypeOrBuilder getFileTypeOrBuilder();

  /**
   * <pre>
   * set when kind is KOTLIN_PROJECT_CONFIGURATION
   * </pre>
   *
   * <code>optional .android_studio.KotlinProjectConfiguration kotlin_project_configuration = 126 [lazy = true];</code>
   * @return Whether the kotlinProjectConfiguration field is set.
   */
  boolean hasKotlinProjectConfiguration();
  /**
   * <pre>
   * set when kind is KOTLIN_PROJECT_CONFIGURATION
   * </pre>
   *
   * <code>optional .android_studio.KotlinProjectConfiguration kotlin_project_configuration = 126 [lazy = true];</code>
   * @return The kotlinProjectConfiguration.
   */
  com.google.wireless.android.sdk.stats.KotlinProjectConfiguration getKotlinProjectConfiguration();
  /**
   * <pre>
   * set when kind is KOTLIN_PROJECT_CONFIGURATION
   * </pre>
   *
   * <code>optional .android_studio.KotlinProjectConfiguration kotlin_project_configuration = 126 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.KotlinProjectConfigurationOrBuilder getKotlinProjectConfigurationOrBuilder();

  /**
   * <pre>
   * set when kind = RUN_START_DATA
   * </pre>
   *
   * <code>optional .android_studio.RunStartData run_start_data = 127 [lazy = true];</code>
   * @return Whether the runStartData field is set.
   */
  boolean hasRunStartData();
  /**
   * <pre>
   * set when kind = RUN_START_DATA
   * </pre>
   *
   * <code>optional .android_studio.RunStartData run_start_data = 127 [lazy = true];</code>
   * @return The runStartData.
   */
  com.google.wireless.android.sdk.stats.RunStartData getRunStartData();
  /**
   * <pre>
   * set when kind = RUN_START_DATA
   * </pre>
   *
   * <code>optional .android_studio.RunStartData run_start_data = 127 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.RunStartDataOrBuilder getRunStartDataOrBuilder();

  /**
   * <pre>
   * set when kind = RUN_FINISH_DATA
   * </pre>
   *
   * <code>optional .android_studio.RunFinishData run_finish_data = 128 [lazy = true];</code>
   * @return Whether the runFinishData field is set.
   */
  boolean hasRunFinishData();
  /**
   * <pre>
   * set when kind = RUN_FINISH_DATA
   * </pre>
   *
   * <code>optional .android_studio.RunFinishData run_finish_data = 128 [lazy = true];</code>
   * @return The runFinishData.
   */
  com.google.wireless.android.sdk.stats.RunFinishData getRunFinishData();
  /**
   * <pre>
   * set when kind = RUN_FINISH_DATA
   * </pre>
   *
   * <code>optional .android_studio.RunFinishData run_finish_data = 128 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.RunFinishDataOrBuilder getRunFinishDataOrBuilder();

  /**
   * <pre>
   * set when kind = DEVICE_MANAGER
   * </pre>
   *
   * <code>optional .android_studio.DeviceManagerEvent device_manager_event = 129 [lazy = true];</code>
   * @return Whether the deviceManagerEvent field is set.
   */
  boolean hasDeviceManagerEvent();
  /**
   * <pre>
   * set when kind = DEVICE_MANAGER
   * </pre>
   *
   * <code>optional .android_studio.DeviceManagerEvent device_manager_event = 129 [lazy = true];</code>
   * @return The deviceManagerEvent.
   */
  com.google.wireless.android.sdk.stats.DeviceManagerEvent getDeviceManagerEvent();
  /**
   * <pre>
   * set when kind = DEVICE_MANAGER
   * </pre>
   *
   * <code>optional .android_studio.DeviceManagerEvent device_manager_event = 129 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceManagerEventOrBuilder getDeviceManagerEventOrBuilder();

  /**
   * <pre>
   * set when kind = WEAR_PAIRING
   * </pre>
   *
   * <code>optional .android_studio.WearPairingEvent wear_pairing_event = 130 [lazy = true];</code>
   * @return Whether the wearPairingEvent field is set.
   */
  boolean hasWearPairingEvent();
  /**
   * <pre>
   * set when kind = WEAR_PAIRING
   * </pre>
   *
   * <code>optional .android_studio.WearPairingEvent wear_pairing_event = 130 [lazy = true];</code>
   * @return The wearPairingEvent.
   */
  com.google.wireless.android.sdk.stats.WearPairingEvent getWearPairingEvent();
  /**
   * <pre>
   * set when kind = WEAR_PAIRING
   * </pre>
   *
   * <code>optional .android_studio.WearPairingEvent wear_pairing_event = 130 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.WearPairingEventOrBuilder getWearPairingEventOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_JDK_INVALID
   * </pre>
   *
   * <code>optional .android_studio.GradleJdkInvalidEvent gradle_jdk_invalid_event = 131 [lazy = true];</code>
   * @return Whether the gradleJdkInvalidEvent field is set.
   */
  boolean hasGradleJdkInvalidEvent();
  /**
   * <pre>
   * set when kind = GRADLE_JDK_INVALID
   * </pre>
   *
   * <code>optional .android_studio.GradleJdkInvalidEvent gradle_jdk_invalid_event = 131 [lazy = true];</code>
   * @return The gradleJdkInvalidEvent.
   */
  com.google.wireless.android.sdk.stats.GradleJdkInvalidEvent getGradleJdkInvalidEvent();
  /**
   * <pre>
   * set when kind = GRADLE_JDK_INVALID
   * </pre>
   *
   * <code>optional .android_studio.GradleJdkInvalidEvent gradle_jdk_invalid_event = 131 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleJdkInvalidEventOrBuilder getGradleJdkInvalidEventOrBuilder();

  /**
   * <pre>
   * set when kind = DEVICE_EXPLORER
   * </pre>
   *
   * <code>optional .android_studio.DeviceExplorerEvent device_explorer_event = 132 [lazy = true];</code>
   * @return Whether the deviceExplorerEvent field is set.
   */
  boolean hasDeviceExplorerEvent();
  /**
   * <pre>
   * set when kind = DEVICE_EXPLORER
   * </pre>
   *
   * <code>optional .android_studio.DeviceExplorerEvent device_explorer_event = 132 [lazy = true];</code>
   * @return The deviceExplorerEvent.
   */
  com.google.wireless.android.sdk.stats.DeviceExplorerEvent getDeviceExplorerEvent();
  /**
   * <pre>
   * set when kind = DEVICE_EXPLORER
   * </pre>
   *
   * <code>optional .android_studio.DeviceExplorerEvent device_explorer_event = 132 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceExplorerEventOrBuilder getDeviceExplorerEventOrBuilder();

  /**
   * <pre>
   * set when kind = OPTIN_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OptInToMetrics opt_in_to_metrics = 133 [lazy = true];</code>
   * @return Whether the optInToMetrics field is set.
   */
  boolean hasOptInToMetrics();
  /**
   * <pre>
   * set when kind = OPTIN_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OptInToMetrics opt_in_to_metrics = 133 [lazy = true];</code>
   * @return The optInToMetrics.
   */
  com.google.wireless.android.sdk.stats.OptInToMetrics getOptInToMetrics();
  /**
   * <pre>
   * set when kind = OPTIN_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OptInToMetrics opt_in_to_metrics = 133 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.OptInToMetricsOrBuilder getOptInToMetricsOrBuilder();

  /**
   * <pre>
   * set when kind = OPTOUT_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OptOutOfMetrics opt_out_of_metrics = 134 [lazy = true];</code>
   * @return Whether the optOutOfMetrics field is set.
   */
  boolean hasOptOutOfMetrics();
  /**
   * <pre>
   * set when kind = OPTOUT_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OptOutOfMetrics opt_out_of_metrics = 134 [lazy = true];</code>
   * @return The optOutOfMetrics.
   */
  com.google.wireless.android.sdk.stats.OptOutOfMetrics getOptOutOfMetrics();
  /**
   * <pre>
   * set when kind = OPTOUT_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OptOutOfMetrics opt_out_of_metrics = 134 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.OptOutOfMetricsOrBuilder getOptOutOfMetricsOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_VERSION_CATALOG_DETECTOR
   * </pre>
   *
   * <code>optional .android_studio.GradleVersionCatalogDetectorEvent gradle_version_catalog_detector_event = 135 [lazy = true];</code>
   * @return Whether the gradleVersionCatalogDetectorEvent field is set.
   */
  boolean hasGradleVersionCatalogDetectorEvent();
  /**
   * <pre>
   * set when kind = GRADLE_VERSION_CATALOG_DETECTOR
   * </pre>
   *
   * <code>optional .android_studio.GradleVersionCatalogDetectorEvent gradle_version_catalog_detector_event = 135 [lazy = true];</code>
   * @return The gradleVersionCatalogDetectorEvent.
   */
  com.google.wireless.android.sdk.stats.GradleVersionCatalogDetectorEvent getGradleVersionCatalogDetectorEvent();
  /**
   * <pre>
   * set when kind = GRADLE_VERSION_CATALOG_DETECTOR
   * </pre>
   *
   * <code>optional .android_studio.GradleVersionCatalogDetectorEvent gradle_version_catalog_detector_event = 135 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleVersionCatalogDetectorEventOrBuilder getGradleVersionCatalogDetectorEventOrBuilder();

  /**
   * <pre>
   * set when kind = COROUTINE_DEBUGGER
   * </pre>
   *
   * <code>optional .android_studio.CoroutineDebuggerEvent coroutine_debugger_event = 136 [lazy = true];</code>
   * @return Whether the coroutineDebuggerEvent field is set.
   */
  boolean hasCoroutineDebuggerEvent();
  /**
   * <pre>
   * set when kind = COROUTINE_DEBUGGER
   * </pre>
   *
   * <code>optional .android_studio.CoroutineDebuggerEvent coroutine_debugger_event = 136 [lazy = true];</code>
   * @return The coroutineDebuggerEvent.
   */
  com.google.wireless.android.sdk.stats.CoroutineDebuggerEvent getCoroutineDebuggerEvent();
  /**
   * <pre>
   * set when kind = COROUTINE_DEBUGGER
   * </pre>
   *
   * <code>optional .android_studio.CoroutineDebuggerEvent coroutine_debugger_event = 136 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.CoroutineDebuggerEventOrBuilder getCoroutineDebuggerEventOrBuilder();

  /**
   * <pre>
   * set when kind = SPLITTING_TABS_USAGE
   * </pre>
   *
   * <code>optional .android_studio.SplittingTabsUsageEvent splitting_tabs_usage_event = 137 [lazy = true];</code>
   * @return Whether the splittingTabsUsageEvent field is set.
   */
  boolean hasSplittingTabsUsageEvent();
  /**
   * <pre>
   * set when kind = SPLITTING_TABS_USAGE
   * </pre>
   *
   * <code>optional .android_studio.SplittingTabsUsageEvent splitting_tabs_usage_event = 137 [lazy = true];</code>
   * @return The splittingTabsUsageEvent.
   */
  com.google.wireless.android.sdk.stats.SplittingTabsUsageEvent getSplittingTabsUsageEvent();
  /**
   * <pre>
   * set when kind = SPLITTING_TABS_USAGE
   * </pre>
   *
   * <code>optional .android_studio.SplittingTabsUsageEvent splitting_tabs_usage_event = 137 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SplittingTabsUsageEventOrBuilder getSplittingTabsUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = LOGCAT_USAGE
   * </pre>
   *
   * <code>optional .android_studio.LogcatUsageEvent logcat_usage_event = 138 [lazy = true];</code>
   * @return Whether the logcatUsageEvent field is set.
   */
  boolean hasLogcatUsageEvent();
  /**
   * <pre>
   * set when kind = LOGCAT_USAGE
   * </pre>
   *
   * <code>optional .android_studio.LogcatUsageEvent logcat_usage_event = 138 [lazy = true];</code>
   * @return The logcatUsageEvent.
   */
  com.google.wireless.android.sdk.stats.LogcatUsageEvent getLogcatUsageEvent();
  /**
   * <pre>
   * set when kind = LOGCAT_USAGE
   * </pre>
   *
   * <code>optional .android_studio.LogcatUsageEvent logcat_usage_event = 138 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LogcatUsageEventOrBuilder getLogcatUsageEventOrBuilder();

  /**
   * <pre>
   * the project ids as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>repeated string raw_project_ids = 139;</code>
   * @return A list containing the rawProjectIds.
   */
  java.util.List<java.lang.String>
      getRawProjectIdsList();
  /**
   * <pre>
   * the project ids as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>repeated string raw_project_ids = 139;</code>
   * @return The count of rawProjectIds.
   */
  int getRawProjectIdsCount();
  /**
   * <pre>
   * the project ids as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>repeated string raw_project_ids = 139;</code>
   * @param index The index of the element to return.
   * @return The rawProjectIds at the given index.
   */
  java.lang.String getRawProjectIds(int index);
  /**
   * <pre>
   * the project ids as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>repeated string raw_project_ids = 139;</code>
   * @param index The index of the value to return.
   * @return The bytes of the rawProjectIds at the given index.
   */
  com.google.protobuf.ByteString
      getRawProjectIdsBytes(int index);

  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_* or kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>repeated string project_ids = 140;</code>
   * @return A list containing the projectIds.
   */
  java.util.List<java.lang.String>
      getProjectIdsList();
  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_* or kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>repeated string project_ids = 140;</code>
   * @return The count of projectIds.
   */
  int getProjectIdsCount();
  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_* or kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>repeated string project_ids = 140;</code>
   * @param index The index of the element to return.
   * @return The projectIds at the given index.
   */
  java.lang.String getProjectIds(int index);
  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id.
   * set when kind = PROJECT_STRUCTURE_* or kind = APK_ANALYZER_STATS
   * </pre>
   *
   * <code>repeated string project_ids = 140;</code>
   * @param index The index of the value to return.
   * @return The bytes of the projectIds at the given index.
   */
  com.google.protobuf.ByteString
      getProjectIdsBytes(int index);

  /**
   * <pre>
   * set when kind = OS_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OSMetrics os_metrics = 141 [lazy = true];</code>
   * @return Whether the osMetrics field is set.
   */
  boolean hasOsMetrics();
  /**
   * <pre>
   * set when kind = OS_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OSMetrics os_metrics = 141 [lazy = true];</code>
   * @return The osMetrics.
   */
  com.google.wireless.android.sdk.stats.OSMetrics getOsMetrics();
  /**
   * <pre>
   * set when kind = OS_METRICS
   * </pre>
   *
   * <code>optional .android_studio.OSMetrics os_metrics = 141 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.OSMetricsOrBuilder getOsMetricsOrBuilder();

  /**
   * <pre>
   * set when kind is SDK_INDEX_LIBRARY_HAS_CRITICAL_ISSUES,
   * SDK_INDEX_LIBRARY_IS_OUTDATED, SDK_INDEX_LIBRARY_IS_NON_COMPLIANT,
   * SDK_INDEX_LIBRARY_HAS_VULNERABILITIES, SDK_INDEX_LIBRARY_UPDATED,
   * SDK_INDEX_LIBRARY_IS_DEPRECATED
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexLibraryDetails sdk_index_library_details = 142 [lazy = true];</code>
   * @return Whether the sdkIndexLibraryDetails field is set.
   */
  boolean hasSdkIndexLibraryDetails();
  /**
   * <pre>
   * set when kind is SDK_INDEX_LIBRARY_HAS_CRITICAL_ISSUES,
   * SDK_INDEX_LIBRARY_IS_OUTDATED, SDK_INDEX_LIBRARY_IS_NON_COMPLIANT,
   * SDK_INDEX_LIBRARY_HAS_VULNERABILITIES, SDK_INDEX_LIBRARY_UPDATED,
   * SDK_INDEX_LIBRARY_IS_DEPRECATED
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexLibraryDetails sdk_index_library_details = 142 [lazy = true];</code>
   * @return The sdkIndexLibraryDetails.
   */
  com.google.wireless.android.sdk.stats.SdkIndexLibraryDetails getSdkIndexLibraryDetails();
  /**
   * <pre>
   * set when kind is SDK_INDEX_LIBRARY_HAS_CRITICAL_ISSUES,
   * SDK_INDEX_LIBRARY_IS_OUTDATED, SDK_INDEX_LIBRARY_IS_NON_COMPLIANT,
   * SDK_INDEX_LIBRARY_HAS_VULNERABILITIES, SDK_INDEX_LIBRARY_UPDATED,
   * SDK_INDEX_LIBRARY_IS_DEPRECATED
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexLibraryDetails sdk_index_library_details = 142 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SdkIndexLibraryDetailsOrBuilder getSdkIndexLibraryDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = EDITOR_PICKER
   * </pre>
   *
   * <code>optional .android_studio.EditorPickerEvent editor_picker_event = 143 [lazy = true];</code>
   * @return Whether the editorPickerEvent field is set.
   */
  boolean hasEditorPickerEvent();
  /**
   * <pre>
   * set when kind = EDITOR_PICKER
   * </pre>
   *
   * <code>optional .android_studio.EditorPickerEvent editor_picker_event = 143 [lazy = true];</code>
   * @return The editorPickerEvent.
   */
  com.google.wireless.android.sdk.stats.EditorPickerEvent getEditorPickerEvent();
  /**
   * <pre>
   * set when kind = EDITOR_PICKER
   * </pre>
   *
   * <code>optional .android_studio.EditorPickerEvent editor_picker_event = 143 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EditorPickerEventOrBuilder getEditorPickerEventOrBuilder();

  /**
   * <pre>
   * set when kind = COMPOSE_MULTI_PREVIEW
   * </pre>
   *
   * <code>optional .android_studio.ComposeMultiPreviewEvent compose_multi_preview_event = 144 [lazy = true];</code>
   * @return Whether the composeMultiPreviewEvent field is set.
   */
  boolean hasComposeMultiPreviewEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_MULTI_PREVIEW
   * </pre>
   *
   * <code>optional .android_studio.ComposeMultiPreviewEvent compose_multi_preview_event = 144 [lazy = true];</code>
   * @return The composeMultiPreviewEvent.
   */
  com.google.wireless.android.sdk.stats.ComposeMultiPreviewEvent getComposeMultiPreviewEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_MULTI_PREVIEW
   * </pre>
   *
   * <code>optional .android_studio.ComposeMultiPreviewEvent compose_multi_preview_event = 144 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ComposeMultiPreviewEventOrBuilder getComposeMultiPreviewEventOrBuilder();

  /**
   * <pre>
   * set when kind = LIVE_EDIT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LiveEditEvent live_edit_event = 145 [lazy = true];</code>
   * @return Whether the liveEditEvent field is set.
   */
  boolean hasLiveEditEvent();
  /**
   * <pre>
   * set when kind = LIVE_EDIT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LiveEditEvent live_edit_event = 145 [lazy = true];</code>
   * @return The liveEditEvent.
   */
  com.google.wireless.android.sdk.stats.LiveEditEvent getLiveEditEvent();
  /**
   * <pre>
   * set when kind = LIVE_EDIT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LiveEditEvent live_edit_event = 145 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LiveEditEventOrBuilder getLiveEditEventOrBuilder();

  /**
   * <pre>
   * set when kind = STOP_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StopEvent stop_event = 146 [lazy = true];</code>
   * @return Whether the stopEvent field is set.
   */
  boolean hasStopEvent();
  /**
   * <pre>
   * set when kind = STOP_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StopEvent stop_event = 146 [lazy = true];</code>
   * @return The stopEvent.
   */
  com.google.wireless.android.sdk.stats.StopEvent getStopEvent();
  /**
   * <pre>
   * set when kind = STOP_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StopEvent stop_event = 146 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StopEventOrBuilder getStopEventOrBuilder();

  /**
   * <pre>
   * set when kind = APP_QUALITY_INSIGHTS_USAGE
   * </pre>
   *
   * <code>optional .android_studio.AppQualityInsightsUsageEvent app_quality_insights_usage_event = 147 [lazy = true];</code>
   * @return Whether the appQualityInsightsUsageEvent field is set.
   */
  boolean hasAppQualityInsightsUsageEvent();
  /**
   * <pre>
   * set when kind = APP_QUALITY_INSIGHTS_USAGE
   * </pre>
   *
   * <code>optional .android_studio.AppQualityInsightsUsageEvent app_quality_insights_usage_event = 147 [lazy = true];</code>
   * @return The appQualityInsightsUsageEvent.
   */
  com.google.wireless.android.sdk.stats.AppQualityInsightsUsageEvent getAppQualityInsightsUsageEvent();
  /**
   * <pre>
   * set when kind = APP_QUALITY_INSIGHTS_USAGE
   * </pre>
   *
   * <code>optional .android_studio.AppQualityInsightsUsageEvent app_quality_insights_usage_event = 147 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AppQualityInsightsUsageEventOrBuilder getAppQualityInsightsUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = GOOGLE_LOGIN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GoogleLoginPluginEvent google_login_event = 148 [lazy = true];</code>
   * @return Whether the googleLoginEvent field is set.
   */
  boolean hasGoogleLoginEvent();
  /**
   * <pre>
   * set when kind = GOOGLE_LOGIN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GoogleLoginPluginEvent google_login_event = 148 [lazy = true];</code>
   * @return The googleLoginEvent.
   */
  com.google.wireless.android.sdk.stats.GoogleLoginPluginEvent getGoogleLoginEvent();
  /**
   * <pre>
   * set when kind = GOOGLE_LOGIN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GoogleLoginPluginEvent google_login_event = 148 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GoogleLoginPluginEventOrBuilder getGoogleLoginEventOrBuilder();

  /**
   * <pre>
   * set when kind = DEVICE_MIRRORING_SESSION
   * </pre>
   *
   * <code>optional .android_studio.DeviceMirroringSession device_mirroring_session = 149 [lazy = true];</code>
   * @return Whether the deviceMirroringSession field is set.
   */
  boolean hasDeviceMirroringSession();
  /**
   * <pre>
   * set when kind = DEVICE_MIRRORING_SESSION
   * </pre>
   *
   * <code>optional .android_studio.DeviceMirroringSession device_mirroring_session = 149 [lazy = true];</code>
   * @return The deviceMirroringSession.
   */
  com.google.wireless.android.sdk.stats.DeviceMirroringSession getDeviceMirroringSession();
  /**
   * <pre>
   * set when kind = DEVICE_MIRRORING_SESSION
   * </pre>
   *
   * <code>optional .android_studio.DeviceMirroringSession device_mirroring_session = 149 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceMirroringSessionOrBuilder getDeviceMirroringSessionOrBuilder();

  /**
   * <pre>
   * set when kind = FAST_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.FastPreviewEvent fast_preview_event = 150 [lazy = true];</code>
   * @return Whether the fastPreviewEvent field is set.
   */
  boolean hasFastPreviewEvent();
  /**
   * <pre>
   * set when kind = FAST_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.FastPreviewEvent fast_preview_event = 150 [lazy = true];</code>
   * @return The fastPreviewEvent.
   */
  com.google.wireless.android.sdk.stats.FastPreviewEvent getFastPreviewEvent();
  /**
   * <pre>
   * set when kind = FAST_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.FastPreviewEvent fast_preview_event = 150 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.FastPreviewEventOrBuilder getFastPreviewEventOrBuilder();

  /**
   * <pre>
   * set when kind = MEMORY_USAGE_REPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MemoryUsageReportEvent memory_usage_report_event = 151 [lazy = true];</code>
   * @return Whether the memoryUsageReportEvent field is set.
   */
  boolean hasMemoryUsageReportEvent();
  /**
   * <pre>
   * set when kind = MEMORY_USAGE_REPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MemoryUsageReportEvent memory_usage_report_event = 151 [lazy = true];</code>
   * @return The memoryUsageReportEvent.
   */
  com.google.wireless.android.sdk.stats.MemoryUsageReportEvent getMemoryUsageReportEvent();
  /**
   * <pre>
   * set when kind = MEMORY_USAGE_REPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.MemoryUsageReportEvent memory_usage_report_event = 151 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.MemoryUsageReportEventOrBuilder getMemoryUsageReportEventOrBuilder();

  /**
   * <pre>
   * set when kind = SDK_INDEX_LOADED_CORRECTLY
   * or kind = SDK_INDEX_CACHING_ERROR
   * or kind = SDK_INDEX_DEFAULT_DATA_ERROR
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexLoadingDetails sdk_index_loading_details = 152 [lazy = true];</code>
   * @return Whether the sdkIndexLoadingDetails field is set.
   */
  boolean hasSdkIndexLoadingDetails();
  /**
   * <pre>
   * set when kind = SDK_INDEX_LOADED_CORRECTLY
   * or kind = SDK_INDEX_CACHING_ERROR
   * or kind = SDK_INDEX_DEFAULT_DATA_ERROR
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexLoadingDetails sdk_index_loading_details = 152 [lazy = true];</code>
   * @return The sdkIndexLoadingDetails.
   */
  com.google.wireless.android.sdk.stats.SdkIndexLoadingDetails getSdkIndexLoadingDetails();
  /**
   * <pre>
   * set when kind = SDK_INDEX_LOADED_CORRECTLY
   * or kind = SDK_INDEX_CACHING_ERROR
   * or kind = SDK_INDEX_DEFAULT_DATA_ERROR
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexLoadingDetails sdk_index_loading_details = 152 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SdkIndexLoadingDetailsOrBuilder getSdkIndexLoadingDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = MANIFEST_MERGER_STATS
   * </pre>
   *
   * <code>optional .android_studio.ManifestMergerStats manifest_merger_stats = 153 [lazy = true];</code>
   * @return Whether the manifestMergerStats field is set.
   */
  boolean hasManifestMergerStats();
  /**
   * <pre>
   * set when kind = MANIFEST_MERGER_STATS
   * </pre>
   *
   * <code>optional .android_studio.ManifestMergerStats manifest_merger_stats = 153 [lazy = true];</code>
   * @return The manifestMergerStats.
   */
  com.google.wireless.android.sdk.stats.ManifestMergerStats getManifestMergerStats();
  /**
   * <pre>
   * set when kind = MANIFEST_MERGER_STATS
   * </pre>
   *
   * <code>optional .android_studio.ManifestMergerStats manifest_merger_stats = 153 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ManifestMergerStatsOrBuilder getManifestMergerStatsOrBuilder();

  /**
   * <pre>
   * set when kind = THREADING_AGENT_STATS
   * </pre>
   *
   * <code>optional .android_studio.ThreadingAgentUsageEvent threading_agent_usage_event = 154 [lazy = true];</code>
   * @return Whether the threadingAgentUsageEvent field is set.
   */
  boolean hasThreadingAgentUsageEvent();
  /**
   * <pre>
   * set when kind = THREADING_AGENT_STATS
   * </pre>
   *
   * <code>optional .android_studio.ThreadingAgentUsageEvent threading_agent_usage_event = 154 [lazy = true];</code>
   * @return The threadingAgentUsageEvent.
   */
  com.google.wireless.android.sdk.stats.ThreadingAgentUsageEvent getThreadingAgentUsageEvent();
  /**
   * <pre>
   * set when kind = THREADING_AGENT_STATS
   * </pre>
   *
   * <code>optional .android_studio.ThreadingAgentUsageEvent threading_agent_usage_event = 154 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ThreadingAgentUsageEventOrBuilder getThreadingAgentUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = PROJECT_VIEW_SELECTION_CHANGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ProjectViewSelectionChangeEvent project_view_selection_change_event = 155 [lazy = true];</code>
   * @return Whether the projectViewSelectionChangeEvent field is set.
   */
  boolean hasProjectViewSelectionChangeEvent();
  /**
   * <pre>
   * set when kind = PROJECT_VIEW_SELECTION_CHANGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ProjectViewSelectionChangeEvent project_view_selection_change_event = 155 [lazy = true];</code>
   * @return The projectViewSelectionChangeEvent.
   */
  com.google.wireless.android.sdk.stats.ProjectViewSelectionChangeEvent getProjectViewSelectionChangeEvent();
  /**
   * <pre>
   * set when kind = PROJECT_VIEW_SELECTION_CHANGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ProjectViewSelectionChangeEvent project_view_selection_change_event = 155 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ProjectViewSelectionChangeEventOrBuilder getProjectViewSelectionChangeEventOrBuilder();

  /**
   * <pre>
   * set when kind = HEAP_REPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.HeapReportEvent heap_report_event = 156 [lazy = true];</code>
   * @return Whether the heapReportEvent field is set.
   */
  boolean hasHeapReportEvent();
  /**
   * <pre>
   * set when kind = HEAP_REPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.HeapReportEvent heap_report_event = 156 [lazy = true];</code>
   * @return The heapReportEvent.
   */
  com.google.wireless.android.sdk.stats.HeapReportEvent getHeapReportEvent();
  /**
   * <pre>
   * set when kind = HEAP_REPORT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.HeapReportEvent heap_report_event = 156 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.HeapReportEventOrBuilder getHeapReportEventOrBuilder();

  /**
   * <pre>
   * set when kind = CREATE_DIAGNOSTIC_REPORT_ACTION
   * </pre>
   *
   * <code>optional .android_studio.CreateDiagnosticReportAction create_diagnostic_report_action_event = 157 [lazy = true];</code>
   * @return Whether the createDiagnosticReportActionEvent field is set.
   */
  boolean hasCreateDiagnosticReportActionEvent();
  /**
   * <pre>
   * set when kind = CREATE_DIAGNOSTIC_REPORT_ACTION
   * </pre>
   *
   * <code>optional .android_studio.CreateDiagnosticReportAction create_diagnostic_report_action_event = 157 [lazy = true];</code>
   * @return The createDiagnosticReportActionEvent.
   */
  com.google.wireless.android.sdk.stats.CreateDiagnosticReportAction getCreateDiagnosticReportActionEvent();
  /**
   * <pre>
   * set when kind = CREATE_DIAGNOSTIC_REPORT_ACTION
   * </pre>
   *
   * <code>optional .android_studio.CreateDiagnosticReportAction create_diagnostic_report_action_event = 157 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.CreateDiagnosticReportActionOrBuilder getCreateDiagnosticReportActionEventOrBuilder();

  /**
   * <pre>
   * set when kind = DIRECT_ACCESS_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DirectAccessUsageEvent direct_access_usage_event = 158 [lazy = true];</code>
   * @return Whether the directAccessUsageEvent field is set.
   */
  boolean hasDirectAccessUsageEvent();
  /**
   * <pre>
   * set when kind = DIRECT_ACCESS_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DirectAccessUsageEvent direct_access_usage_event = 158 [lazy = true];</code>
   * @return The directAccessUsageEvent.
   */
  com.google.wireless.android.sdk.stats.DirectAccessUsageEvent getDirectAccessUsageEvent();
  /**
   * <pre>
   * set when kind = DIRECT_ACCESS_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DirectAccessUsageEvent direct_access_usage_event = 158 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DirectAccessUsageEventOrBuilder getDirectAccessUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = SAFE_MODE_STATS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SafeModeStatsEvent safe_mode_stats_event = 159 [lazy = true];</code>
   * @return Whether the safeModeStatsEvent field is set.
   */
  boolean hasSafeModeStatsEvent();
  /**
   * <pre>
   * set when kind = SAFE_MODE_STATS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SafeModeStatsEvent safe_mode_stats_event = 159 [lazy = true];</code>
   * @return The safeModeStatsEvent.
   */
  com.google.wireless.android.sdk.stats.SafeModeStatsEvent getSafeModeStatsEvent();
  /**
   * <pre>
   * set when kind = SAFE_MODE_STATS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SafeModeStatsEvent safe_mode_stats_event = 159 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SafeModeStatsEventOrBuilder getSafeModeStatsEventOrBuilder();

  /**
   * <pre>
   * set when kind = TSDKUA_EVENT
   * </pre>
   *
   * <code>optional .android_studio.TSdkUAEvent tsdk_ua_event = 160 [lazy = true];</code>
   * @return Whether the tsdkUaEvent field is set.
   */
  boolean hasTsdkUaEvent();
  /**
   * <pre>
   * set when kind = TSDKUA_EVENT
   * </pre>
   *
   * <code>optional .android_studio.TSdkUAEvent tsdk_ua_event = 160 [lazy = true];</code>
   * @return The tsdkUaEvent.
   */
  com.google.wireless.android.sdk.stats.TSdkUAEvent getTsdkUaEvent();
  /**
   * <pre>
   * set when kind = TSDKUA_EVENT
   * </pre>
   *
   * <code>optional .android_studio.TSdkUAEvent tsdk_ua_event = 160 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TSdkUAEventOrBuilder getTsdkUaEventOrBuilder();

  /**
   * <pre>
   * set when kind = INTELLIJ_NEW_UI_STATE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.IntelliJNewUIState intellij_new_ui_state_event = 161 [lazy = true];</code>
   * @return Whether the intellijNewUiStateEvent field is set.
   */
  boolean hasIntellijNewUiStateEvent();
  /**
   * <pre>
   * set when kind = INTELLIJ_NEW_UI_STATE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.IntelliJNewUIState intellij_new_ui_state_event = 161 [lazy = true];</code>
   * @return The intellijNewUiStateEvent.
   */
  com.google.wireless.android.sdk.stats.IntelliJNewUIState getIntellijNewUiStateEvent();
  /**
   * <pre>
   * set when kind = INTELLIJ_NEW_UI_STATE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.IntelliJNewUIState intellij_new_ui_state_event = 161 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.IntelliJNewUIStateOrBuilder getIntellijNewUiStateEventOrBuilder();

  /**
   * <pre>
   * set when kind = KOTLIN_GRADLE_PERFORMANCE
   * </pre>
   *
   * <code>optional .android_studio.KotlinGradlePerformance kotlin_gradle_performance_event = 162 [lazy = true];</code>
   * @return Whether the kotlinGradlePerformanceEvent field is set.
   */
  boolean hasKotlinGradlePerformanceEvent();
  /**
   * <pre>
   * set when kind = KOTLIN_GRADLE_PERFORMANCE
   * </pre>
   *
   * <code>optional .android_studio.KotlinGradlePerformance kotlin_gradle_performance_event = 162 [lazy = true];</code>
   * @return The kotlinGradlePerformanceEvent.
   */
  com.google.wireless.android.sdk.stats.KotlinGradlePerformance getKotlinGradlePerformanceEvent();
  /**
   * <pre>
   * set when kind = KOTLIN_GRADLE_PERFORMANCE
   * </pre>
   *
   * <code>optional .android_studio.KotlinGradlePerformance kotlin_gradle_performance_event = 162 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.KotlinGradlePerformanceOrBuilder getKotlinGradlePerformanceEventOrBuilder();

  /**
   * <pre>
   * set when kind = BUILD_OUTPUT_DOWNLOADS_INFO_USER_INTERACTION
   * </pre>
   *
   * <code>optional .android_studio.BuildOutputDownloadsInfoEvent build_output_downloads_info_event = 163 [lazy = true];</code>
   * @return Whether the buildOutputDownloadsInfoEvent field is set.
   */
  boolean hasBuildOutputDownloadsInfoEvent();
  /**
   * <pre>
   * set when kind = BUILD_OUTPUT_DOWNLOADS_INFO_USER_INTERACTION
   * </pre>
   *
   * <code>optional .android_studio.BuildOutputDownloadsInfoEvent build_output_downloads_info_event = 163 [lazy = true];</code>
   * @return The buildOutputDownloadsInfoEvent.
   */
  com.google.wireless.android.sdk.stats.BuildOutputDownloadsInfoEvent getBuildOutputDownloadsInfoEvent();
  /**
   * <pre>
   * set when kind = BUILD_OUTPUT_DOWNLOADS_INFO_USER_INTERACTION
   * </pre>
   *
   * <code>optional .android_studio.BuildOutputDownloadsInfoEvent build_output_downloads_info_event = 163 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BuildOutputDownloadsInfoEventOrBuilder getBuildOutputDownloadsInfoEventOrBuilder();

  /**
   * <pre>
   * set when kind = DEVICE_MIRRORING_ABNORMAL_AGENT_TERMINATION
   * </pre>
   *
   * <code>optional .android_studio.DeviceMirroringAbnormalAgentTermination device_mirroring_abnormal_agent_termination = 164 [lazy = true];</code>
   * @return Whether the deviceMirroringAbnormalAgentTermination field is set.
   */
  boolean hasDeviceMirroringAbnormalAgentTermination();
  /**
   * <pre>
   * set when kind = DEVICE_MIRRORING_ABNORMAL_AGENT_TERMINATION
   * </pre>
   *
   * <code>optional .android_studio.DeviceMirroringAbnormalAgentTermination device_mirroring_abnormal_agent_termination = 164 [lazy = true];</code>
   * @return The deviceMirroringAbnormalAgentTermination.
   */
  com.google.wireless.android.sdk.stats.DeviceMirroringAbnormalAgentTermination getDeviceMirroringAbnormalAgentTermination();
  /**
   * <pre>
   * set when kind = DEVICE_MIRRORING_ABNORMAL_AGENT_TERMINATION
   * </pre>
   *
   * <code>optional .android_studio.DeviceMirroringAbnormalAgentTermination device_mirroring_abnormal_agent_termination = 164 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceMirroringAbnormalAgentTerminationOrBuilder getDeviceMirroringAbnormalAgentTerminationOrBuilder();

  /**
   * <pre>
   * set when kind = SYSTEM_HEALTH_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent system_health_event = 165 [lazy = true];</code>
   * @return Whether the systemHealthEvent field is set.
   */
  boolean hasSystemHealthEvent();
  /**
   * <pre>
   * set when kind = SYSTEM_HEALTH_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent system_health_event = 165 [lazy = true];</code>
   * @return The systemHealthEvent.
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent getSystemHealthEvent();
  /**
   * <pre>
   * set when kind = SYSTEM_HEALTH_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent system_health_event = 165 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SystemHealthEventOrBuilder getSystemHealthEventOrBuilder();

  /**
   * <pre>
   * set when kind = COMPOSE_PREVIEW_CANVAS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ComposePreviewCanvasEvent compose_preview_canvas_event = 166 [lazy = true];</code>
   * @return Whether the composePreviewCanvasEvent field is set.
   */
  boolean hasComposePreviewCanvasEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_PREVIEW_CANVAS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ComposePreviewCanvasEvent compose_preview_canvas_event = 166 [lazy = true];</code>
   * @return The composePreviewCanvasEvent.
   */
  com.google.wireless.android.sdk.stats.ComposePreviewCanvasEvent getComposePreviewCanvasEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_PREVIEW_CANVAS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ComposePreviewCanvasEvent compose_preview_canvas_event = 166 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ComposePreviewCanvasEventOrBuilder getComposePreviewCanvasEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_COMPLETION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlCompletionEvent sml_completion_event = 167 [lazy = true];</code>
   * @return Whether the smlCompletionEvent field is set.
   */
  boolean hasSmlCompletionEvent();
  /**
   * <pre>
   * set when kind = SML_COMPLETION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlCompletionEvent sml_completion_event = 167 [lazy = true];</code>
   * @return The smlCompletionEvent.
   */
  com.google.wireless.android.sdk.stats.SmlCompletionEvent getSmlCompletionEvent();
  /**
   * <pre>
   * set when kind = SML_COMPLETION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlCompletionEvent sml_completion_event = 167 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlCompletionEventOrBuilder getSmlCompletionEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_CODE_TRANSFORMATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlTransformEvent sml_transform_event = 168 [lazy = true];</code>
   * @return Whether the smlTransformEvent field is set.
   */
  boolean hasSmlTransformEvent();
  /**
   * <pre>
   * set when kind = SML_CODE_TRANSFORMATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlTransformEvent sml_transform_event = 168 [lazy = true];</code>
   * @return The smlTransformEvent.
   */
  com.google.wireless.android.sdk.stats.SmlTransformEvent getSmlTransformEvent();
  /**
   * <pre>
   * set when kind = SML_CODE_TRANSFORMATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlTransformEvent sml_transform_event = 168 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlTransformEventOrBuilder getSmlTransformEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_CHATBOT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlChatBotEvent sml_chat_bot_event = 169 [lazy = true];</code>
   * @return Whether the smlChatBotEvent field is set.
   */
  boolean hasSmlChatBotEvent();
  /**
   * <pre>
   * set when kind = SML_CHATBOT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlChatBotEvent sml_chat_bot_event = 169 [lazy = true];</code>
   * @return The smlChatBotEvent.
   */
  com.google.wireless.android.sdk.stats.SmlChatBotEvent getSmlChatBotEvent();
  /**
   * <pre>
   * set when kind = SML_CHATBOT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlChatBotEvent sml_chat_bot_event = 169 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlChatBotEventOrBuilder getSmlChatBotEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_CONFIGURATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlConfigurationEvent sml_configuration_event = 170 [lazy = true];</code>
   * @return Whether the smlConfigurationEvent field is set.
   */
  boolean hasSmlConfigurationEvent();
  /**
   * <pre>
   * set when kind = SML_CONFIGURATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlConfigurationEvent sml_configuration_event = 170 [lazy = true];</code>
   * @return The smlConfigurationEvent.
   */
  com.google.wireless.android.sdk.stats.SmlConfigurationEvent getSmlConfigurationEvent();
  /**
   * <pre>
   * set when kind = SML_CONFIGURATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlConfigurationEvent sml_configuration_event = 170 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlConfigurationEventOrBuilder getSmlConfigurationEventOrBuilder();

  /**
   * <pre>
   * set when kind = KOTLIN_SUPPORT_DECLINED
   * </pre>
   *
   * <code>optional .android_studio.KotlinSupportDeclined kotlin_support_declined = 171 [lazy = true];</code>
   * @return Whether the kotlinSupportDeclined field is set.
   */
  boolean hasKotlinSupportDeclined();
  /**
   * <pre>
   * set when kind = KOTLIN_SUPPORT_DECLINED
   * </pre>
   *
   * <code>optional .android_studio.KotlinSupportDeclined kotlin_support_declined = 171 [lazy = true];</code>
   * @return The kotlinSupportDeclined.
   */
  com.google.wireless.android.sdk.stats.KotlinSupportDeclined getKotlinSupportDeclined();
  /**
   * <pre>
   * set when kind = KOTLIN_SUPPORT_DECLINED
   * </pre>
   *
   * <code>optional .android_studio.KotlinSupportDeclined kotlin_support_declined = 171 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.KotlinSupportDeclinedOrBuilder getKotlinSupportDeclinedOrBuilder();

  /**
   * <pre>
   * set when kind = DEVICE_SCREENSHOT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DeviceScreenshotEvent device_screenshot_event = 172 [lazy = true];</code>
   * @return Whether the deviceScreenshotEvent field is set.
   */
  boolean hasDeviceScreenshotEvent();
  /**
   * <pre>
   * set when kind = DEVICE_SCREENSHOT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DeviceScreenshotEvent device_screenshot_event = 172 [lazy = true];</code>
   * @return The deviceScreenshotEvent.
   */
  com.google.wireless.android.sdk.stats.DeviceScreenshotEvent getDeviceScreenshotEvent();
  /**
   * <pre>
   * set when kind = DEVICE_SCREENSHOT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DeviceScreenshotEvent device_screenshot_event = 172 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceScreenshotEventOrBuilder getDeviceScreenshotEventOrBuilder();

  /**
   * <pre>
   * set when kind = EDITOR_NOTIFICATION
   * </pre>
   *
   * <code>optional .android_studio.EditorNotification editor_notification = 173 [lazy = true];</code>
   * @return Whether the editorNotification field is set.
   */
  boolean hasEditorNotification();
  /**
   * <pre>
   * set when kind = EDITOR_NOTIFICATION
   * </pre>
   *
   * <code>optional .android_studio.EditorNotification editor_notification = 173 [lazy = true];</code>
   * @return The editorNotification.
   */
  com.google.wireless.android.sdk.stats.EditorNotification getEditorNotification();
  /**
   * <pre>
   * set when kind = EDITOR_NOTIFICATION
   * </pre>
   *
   * <code>optional .android_studio.EditorNotification editor_notification = 173 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EditorNotificationOrBuilder getEditorNotificationOrBuilder();

  /**
   * <pre>
   * set when kind = COMPOSE_PREVIEW_LITE_MODE
   * </pre>
   *
   * <code>optional .android_studio.ComposePreviewLiteModeEvent compose_preview_lite_mode_event = 174 [lazy = true];</code>
   * @return Whether the composePreviewLiteModeEvent field is set.
   */
  boolean hasComposePreviewLiteModeEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_PREVIEW_LITE_MODE
   * </pre>
   *
   * <code>optional .android_studio.ComposePreviewLiteModeEvent compose_preview_lite_mode_event = 174 [lazy = true];</code>
   * @return The composePreviewLiteModeEvent.
   */
  com.google.wireless.android.sdk.stats.ComposePreviewLiteModeEvent getComposePreviewLiteModeEvent();
  /**
   * <pre>
   * set when kind = COMPOSE_PREVIEW_LITE_MODE
   * </pre>
   *
   * <code>optional .android_studio.ComposePreviewLiteModeEvent compose_preview_lite_mode_event = 174 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ComposePreviewLiteModeEventOrBuilder getComposePreviewLiteModeEventOrBuilder();

  /**
   * <pre>
   * set when kind = UPGRADE_ANDROID_STUDIO_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAndroidStudioDialogStats upgrade_android_studio_dialog = 175 [lazy = true];</code>
   * @return Whether the upgradeAndroidStudioDialog field is set.
   */
  boolean hasUpgradeAndroidStudioDialog();
  /**
   * <pre>
   * set when kind = UPGRADE_ANDROID_STUDIO_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAndroidStudioDialogStats upgrade_android_studio_dialog = 175 [lazy = true];</code>
   * @return The upgradeAndroidStudioDialog.
   */
  com.google.wireless.android.sdk.stats.UpgradeAndroidStudioDialogStats getUpgradeAndroidStudioDialog();
  /**
   * <pre>
   * set when kind = UPGRADE_ANDROID_STUDIO_DIALOG
   * </pre>
   *
   * <code>optional .android_studio.UpgradeAndroidStudioDialogStats upgrade_android_studio_dialog = 175 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UpgradeAndroidStudioDialogStatsOrBuilder getUpgradeAndroidStudioDialogOrBuilder();

  /**
   * <pre>
   * set when kind = DEBUGGER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DebuggerEvent debugger_event = 176 [lazy = true];</code>
   * @return Whether the debuggerEvent field is set.
   */
  boolean hasDebuggerEvent();
  /**
   * <pre>
   * set when kind = DEBUGGER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DebuggerEvent debugger_event = 176 [lazy = true];</code>
   * @return The debuggerEvent.
   */
  com.google.wireless.android.sdk.stats.DebuggerEvent getDebuggerEvent();
  /**
   * <pre>
   * set when kind = DEBUGGER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DebuggerEvent debugger_event = 176 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DebuggerEventOrBuilder getDebuggerEventOrBuilder();

  /**
   * <pre>
   * set when kind = SOONG_SYNC_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SoongSyncStats soong_sync_stats = 177 [lazy = true];</code>
   * @return Whether the soongSyncStats field is set.
   */
  boolean hasSoongSyncStats();
  /**
   * <pre>
   * set when kind = SOONG_SYNC_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SoongSyncStats soong_sync_stats = 177 [lazy = true];</code>
   * @return The soongSyncStats.
   */
  com.google.wireless.android.sdk.stats.SoongSyncStats getSoongSyncStats();
  /**
   * <pre>
   * set when kind = SOONG_SYNC_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SoongSyncStats soong_sync_stats = 177 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SoongSyncStatsOrBuilder getSoongSyncStatsOrBuilder();

  /**
   * <pre>
   * set when kind = INTELLIJ_NEW_UI_SWITCH
   * </pre>
   *
   * <code>optional .android_studio.IntelliJNewUISwitch intellij_new_ui_switch = 178 [lazy = true];</code>
   * @return Whether the intellijNewUiSwitch field is set.
   */
  boolean hasIntellijNewUiSwitch();
  /**
   * <pre>
   * set when kind = INTELLIJ_NEW_UI_SWITCH
   * </pre>
   *
   * <code>optional .android_studio.IntelliJNewUISwitch intellij_new_ui_switch = 178 [lazy = true];</code>
   * @return The intellijNewUiSwitch.
   */
  com.google.wireless.android.sdk.stats.IntelliJNewUISwitch getIntellijNewUiSwitch();
  /**
   * <pre>
   * set when kind = INTELLIJ_NEW_UI_SWITCH
   * </pre>
   *
   * <code>optional .android_studio.IntelliJNewUISwitch intellij_new_ui_switch = 178 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.IntelliJNewUISwitchOrBuilder getIntellijNewUiSwitchOrBuilder();

  /**
   * <pre>
   * set when kind = ESSENTIALS_MODE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.EssentialsModeEvent essentials_mode_event = 179 [lazy = true];</code>
   * @return Whether the essentialsModeEvent field is set.
   */
  boolean hasEssentialsModeEvent();
  /**
   * <pre>
   * set when kind = ESSENTIALS_MODE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.EssentialsModeEvent essentials_mode_event = 179 [lazy = true];</code>
   * @return The essentialsModeEvent.
   */
  com.google.wireless.android.sdk.stats.EssentialsModeEvent getEssentialsModeEvent();
  /**
   * <pre>
   * set when kind = ESSENTIALS_MODE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.EssentialsModeEvent essentials_mode_event = 179 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EssentialsModeEventOrBuilder getEssentialsModeEventOrBuilder();

  /**
   * <pre>
   * set when kind = LINT_TOOLTIP_LINK_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LintTooltipLinkEvent lint_tooltip_link_event = 180 [lazy = true];</code>
   * @return Whether the lintTooltipLinkEvent field is set.
   */
  boolean hasLintTooltipLinkEvent();
  /**
   * <pre>
   * set when kind = LINT_TOOLTIP_LINK_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LintTooltipLinkEvent lint_tooltip_link_event = 180 [lazy = true];</code>
   * @return The lintTooltipLinkEvent.
   */
  com.google.wireless.android.sdk.stats.LintTooltipLinkEvent getLintTooltipLinkEvent();
  /**
   * <pre>
   * set when kind = LINT_TOOLTIP_LINK_EVENT
   * </pre>
   *
   * <code>optional .android_studio.LintTooltipLinkEvent lint_tooltip_link_event = 180 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LintTooltipLinkEventOrBuilder getLintTooltipLinkEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_AI_EXCLUDE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlAiExcludeEvent sml_ai_exclude_event = 181 [lazy = true];</code>
   * @return Whether the smlAiExcludeEvent field is set.
   */
  boolean hasSmlAiExcludeEvent();
  /**
   * <pre>
   * set when kind = SML_AI_EXCLUDE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlAiExcludeEvent sml_ai_exclude_event = 181 [lazy = true];</code>
   * @return The smlAiExcludeEvent.
   */
  com.google.wireless.android.sdk.stats.SmlAiExcludeEvent getSmlAiExcludeEvent();
  /**
   * <pre>
   * set when kind = SML_AI_EXCLUDE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlAiExcludeEvent sml_ai_exclude_event = 181 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlAiExcludeEventOrBuilder getSmlAiExcludeEventOrBuilder();

  /**
   * <pre>
   * set when kind = I_DEVICE_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.IDeviceUsageEvent i_device_usage_event = 182 [lazy = true];</code>
   * @return Whether the iDeviceUsageEvent field is set.
   */
  boolean hasIDeviceUsageEvent();
  /**
   * <pre>
   * set when kind = I_DEVICE_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.IDeviceUsageEvent i_device_usage_event = 182 [lazy = true];</code>
   * @return The iDeviceUsageEvent.
   */
  com.google.wireless.android.sdk.stats.IDeviceUsageEvent getIDeviceUsageEvent();
  /**
   * <pre>
   * set when kind = I_DEVICE_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.IDeviceUsageEvent i_device_usage_event = 182 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.IDeviceUsageEventOrBuilder getIDeviceUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_JDK_CONFIGURATION
   * </pre>
   *
   * <code>optional .android_studio.GradleJdkConfigurationEvent gradle_jdk_configuration_event = 183 [lazy = true];</code>
   * @return Whether the gradleJdkConfigurationEvent field is set.
   */
  boolean hasGradleJdkConfigurationEvent();
  /**
   * <pre>
   * set when kind = GRADLE_JDK_CONFIGURATION
   * </pre>
   *
   * <code>optional .android_studio.GradleJdkConfigurationEvent gradle_jdk_configuration_event = 183 [lazy = true];</code>
   * @return The gradleJdkConfigurationEvent.
   */
  com.google.wireless.android.sdk.stats.GradleJdkConfigurationEvent getGradleJdkConfigurationEvent();
  /**
   * <pre>
   * set when kind = GRADLE_JDK_CONFIGURATION
   * </pre>
   *
   * <code>optional .android_studio.GradleJdkConfigurationEvent gradle_jdk_configuration_event = 183 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleJdkConfigurationEventOrBuilder getGradleJdkConfigurationEventOrBuilder();

  /**
   * <pre>
   * set when kind = RENDER_SECURITY_MANAGER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.RenderSecurityManagerEvent render_security_manager_event = 184 [lazy = true];</code>
   * @return Whether the renderSecurityManagerEvent field is set.
   */
  boolean hasRenderSecurityManagerEvent();
  /**
   * <pre>
   * set when kind = RENDER_SECURITY_MANAGER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.RenderSecurityManagerEvent render_security_manager_event = 184 [lazy = true];</code>
   * @return The renderSecurityManagerEvent.
   */
  com.google.wireless.android.sdk.stats.RenderSecurityManagerEvent getRenderSecurityManagerEvent();
  /**
   * <pre>
   * set when kind = RENDER_SECURITY_MANAGER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.RenderSecurityManagerEvent render_security_manager_event = 184 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.RenderSecurityManagerEventOrBuilder getRenderSecurityManagerEventOrBuilder();

  /**
   * <pre>
   * set when kind = PREVIEW_REFRESH_EVENT
   * </pre>
   *
   * <code>optional .android_studio.PreviewRefreshEvent preview_refresh_event = 185 [lazy = true];</code>
   * @return Whether the previewRefreshEvent field is set.
   */
  boolean hasPreviewRefreshEvent();
  /**
   * <pre>
   * set when kind = PREVIEW_REFRESH_EVENT
   * </pre>
   *
   * <code>optional .android_studio.PreviewRefreshEvent preview_refresh_event = 185 [lazy = true];</code>
   * @return The previewRefreshEvent.
   */
  com.google.wireless.android.sdk.stats.PreviewRefreshEvent getPreviewRefreshEvent();
  /**
   * <pre>
   * set when kind = PREVIEW_REFRESH_EVENT
   * </pre>
   *
   * <code>optional .android_studio.PreviewRefreshEvent preview_refresh_event = 185 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.PreviewRefreshEventOrBuilder getPreviewRefreshEventOrBuilder();

  /**
   * <pre>
   * set when kind = WEAR_HEALTH_SERVICES_TOOL_WINDOW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WearHealthServicesEvent wear_health_services_event = 186 [lazy = true];</code>
   * @return Whether the wearHealthServicesEvent field is set.
   */
  boolean hasWearHealthServicesEvent();
  /**
   * <pre>
   * set when kind = WEAR_HEALTH_SERVICES_TOOL_WINDOW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WearHealthServicesEvent wear_health_services_event = 186 [lazy = true];</code>
   * @return The wearHealthServicesEvent.
   */
  com.google.wireless.android.sdk.stats.WearHealthServicesEvent getWearHealthServicesEvent();
  /**
   * <pre>
   * set when kind = WEAR_HEALTH_SERVICES_TOOL_WINDOW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WearHealthServicesEvent wear_health_services_event = 186 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.WearHealthServicesEventOrBuilder getWearHealthServicesEventOrBuilder();

  /**
   * <pre>
   * set when kind = UI_DEVICE_SETTINGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UiDeviceSettingsEvent ui_device_settings_event = 187 [lazy = true];</code>
   * @return Whether the uiDeviceSettingsEvent field is set.
   */
  boolean hasUiDeviceSettingsEvent();
  /**
   * <pre>
   * set when kind = UI_DEVICE_SETTINGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UiDeviceSettingsEvent ui_device_settings_event = 187 [lazy = true];</code>
   * @return The uiDeviceSettingsEvent.
   */
  com.google.wireless.android.sdk.stats.UiDeviceSettingsEvent getUiDeviceSettingsEvent();
  /**
   * <pre>
   * set when kind = UI_DEVICE_SETTINGS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UiDeviceSettingsEvent ui_device_settings_event = 187 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UiDeviceSettingsEventOrBuilder getUiDeviceSettingsEventOrBuilder();

  /**
   * <pre>
   * set when kind = ADB_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AdbUsageEvent adb_usage_event = 188 [lazy = true];</code>
   * @return Whether the adbUsageEvent field is set.
   */
  boolean hasAdbUsageEvent();
  /**
   * <pre>
   * set when kind = ADB_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AdbUsageEvent adb_usage_event = 188 [lazy = true];</code>
   * @return The adbUsageEvent.
   */
  com.google.wireless.android.sdk.stats.AdbUsageEvent getAdbUsageEvent();
  /**
   * <pre>
   * set when kind = ADB_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AdbUsageEvent adb_usage_event = 188 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AdbUsageEventOrBuilder getAdbUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_GEOLOCATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlGeolocationEvent sml_geolocation_event = 189 [lazy = true];</code>
   * @return Whether the smlGeolocationEvent field is set.
   */
  boolean hasSmlGeolocationEvent();
  /**
   * <pre>
   * set when kind = SML_GEOLOCATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlGeolocationEvent sml_geolocation_event = 189 [lazy = true];</code>
   * @return The smlGeolocationEvent.
   */
  com.google.wireless.android.sdk.stats.SmlGeolocationEvent getSmlGeolocationEvent();
  /**
   * <pre>
   * set when kind = SML_GEOLOCATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SmlGeolocationEvent sml_geolocation_event = 189 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlGeolocationEventOrBuilder getSmlGeolocationEventOrBuilder();

  /**
   * <pre>
   * set when kind = SML_COMPLETION_REQUEST_ERROR
   * </pre>
   *
   * <code>optional .android_studio.SmlCompletionRequestErrorEvent sml_completion_request_error = 190 [lazy = true];</code>
   * @return Whether the smlCompletionRequestError field is set.
   */
  boolean hasSmlCompletionRequestError();
  /**
   * <pre>
   * set when kind = SML_COMPLETION_REQUEST_ERROR
   * </pre>
   *
   * <code>optional .android_studio.SmlCompletionRequestErrorEvent sml_completion_request_error = 190 [lazy = true];</code>
   * @return The smlCompletionRequestError.
   */
  com.google.wireless.android.sdk.stats.SmlCompletionRequestErrorEvent getSmlCompletionRequestError();
  /**
   * <pre>
   * set when kind = SML_COMPLETION_REQUEST_ERROR
   * </pre>
   *
   * <code>optional .android_studio.SmlCompletionRequestErrorEvent sml_completion_request_error = 190 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SmlCompletionRequestErrorEventOrBuilder getSmlCompletionRequestErrorOrBuilder();

  /**
   * <pre>
   * set when kind = ADB_DEVICE_CONNECTED
   * </pre>
   *
   * <code>optional .android_studio.DeviceConnectedNotificationEvent device_connected = 191 [lazy = true];</code>
   * @return Whether the deviceConnected field is set.
   */
  boolean hasDeviceConnected();
  /**
   * <pre>
   * set when kind = ADB_DEVICE_CONNECTED
   * </pre>
   *
   * <code>optional .android_studio.DeviceConnectedNotificationEvent device_connected = 191 [lazy = true];</code>
   * @return The deviceConnected.
   */
  com.google.wireless.android.sdk.stats.DeviceConnectedNotificationEvent getDeviceConnected();
  /**
   * <pre>
   * set when kind = ADB_DEVICE_CONNECTED
   * </pre>
   *
   * <code>optional .android_studio.DeviceConnectedNotificationEvent device_connected = 191 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DeviceConnectedNotificationEventOrBuilder getDeviceConnectedOrBuilder();

  /**
   * <pre>
   * set when kind = SCREENSHOT_TEST_COMPOSE_PREVIEW
   * </pre>
   *
   * <code>optional .android_studio.ScreenshotTestComposePreviewEvent screenshot_test_compose_preview_event = 192 [lazy = true];</code>
   * @return Whether the screenshotTestComposePreviewEvent field is set.
   */
  boolean hasScreenshotTestComposePreviewEvent();
  /**
   * <pre>
   * set when kind = SCREENSHOT_TEST_COMPOSE_PREVIEW
   * </pre>
   *
   * <code>optional .android_studio.ScreenshotTestComposePreviewEvent screenshot_test_compose_preview_event = 192 [lazy = true];</code>
   * @return The screenshotTestComposePreviewEvent.
   */
  com.google.wireless.android.sdk.stats.ScreenshotTestComposePreviewEvent getScreenshotTestComposePreviewEvent();
  /**
   * <pre>
   * set when kind = SCREENSHOT_TEST_COMPOSE_PREVIEW
   * </pre>
   *
   * <code>optional .android_studio.ScreenshotTestComposePreviewEvent screenshot_test_compose_preview_event = 192 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ScreenshotTestComposePreviewEventOrBuilder getScreenshotTestComposePreviewEventOrBuilder();

  /**
   * <pre>
   * set when kind = TEST_SCENARIO_EVENT
   * </pre>
   *
   * <code>optional .android_studio.TestScenarioEvent test_scenario_event = 193 [lazy = true];</code>
   * @return Whether the testScenarioEvent field is set.
   */
  boolean hasTestScenarioEvent();
  /**
   * <pre>
   * set when kind = TEST_SCENARIO_EVENT
   * </pre>
   *
   * <code>optional .android_studio.TestScenarioEvent test_scenario_event = 193 [lazy = true];</code>
   * @return The testScenarioEvent.
   */
  com.google.wireless.android.sdk.stats.TestScenarioEvent getTestScenarioEvent();
  /**
   * <pre>
   * set when kind = TEST_SCENARIO_EVENT
   * </pre>
   *
   * <code>optional .android_studio.TestScenarioEvent test_scenario_event = 193 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TestScenarioEventOrBuilder getTestScenarioEventOrBuilder();

  /**
   * <pre>
   * set when kind = ADB_SERVER_STATE
   * OBSOLETE, use ADB_SERVER_STATUS instead.
   * </pre>
   *
   * <code>optional .android_studio.AdbServerState adb_server_state = 194 [lazy = true];</code>
   * @return Whether the adbServerState field is set.
   */
  boolean hasAdbServerState();
  /**
   * <pre>
   * set when kind = ADB_SERVER_STATE
   * OBSOLETE, use ADB_SERVER_STATUS instead.
   * </pre>
   *
   * <code>optional .android_studio.AdbServerState adb_server_state = 194 [lazy = true];</code>
   * @return The adbServerState.
   */
  com.google.wireless.android.sdk.stats.AdbServerState getAdbServerState();
  /**
   * <pre>
   * set when kind = ADB_SERVER_STATE
   * OBSOLETE, use ADB_SERVER_STATUS instead.
   * </pre>
   *
   * <code>optional .android_studio.AdbServerState adb_server_state = 194 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AdbServerStateOrBuilder getAdbServerStateOrBuilder();

  /**
   * <pre>
   * set when kind = FIREBASE_MANAGEMENT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.FirebaseManagementEvent firebase_management_event = 195;</code>
   * @return Whether the firebaseManagementEvent field is set.
   */
  boolean hasFirebaseManagementEvent();
  /**
   * <pre>
   * set when kind = FIREBASE_MANAGEMENT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.FirebaseManagementEvent firebase_management_event = 195;</code>
   * @return The firebaseManagementEvent.
   */
  com.google.wireless.android.sdk.stats.FirebaseManagementEvent getFirebaseManagementEvent();
  /**
   * <pre>
   * set when kind = FIREBASE_MANAGEMENT_EVENT
   * </pre>
   *
   * <code>optional .android_studio.FirebaseManagementEvent firebase_management_event = 195;</code>
   */
  com.google.wireless.android.sdk.stats.FirebaseManagementEventOrBuilder getFirebaseManagementEventOrBuilder();

  /**
   * <pre>
   * set when kind = ADB_SERVER_STATUS
   * </pre>
   *
   * <code>optional .android_studio.AdbServerStatus adb_server_status = 196;</code>
   * @return Whether the adbServerStatus field is set.
   */
  boolean hasAdbServerStatus();
  /**
   * <pre>
   * set when kind = ADB_SERVER_STATUS
   * </pre>
   *
   * <code>optional .android_studio.AdbServerStatus adb_server_status = 196;</code>
   * @return The adbServerStatus.
   */
  com.google.wireless.android.sdk.stats.AdbServerStatus getAdbServerStatus();
  /**
   * <pre>
   * set when kind = ADB_SERVER_STATUS
   * </pre>
   *
   * <code>optional .android_studio.AdbServerStatus adb_server_status = 196;</code>
   */
  com.google.wireless.android.sdk.stats.AdbServerStatusOrBuilder getAdbServerStatusOrBuilder();

  /**
   * <pre>
   * set when kind = WEAR_TILE_ANIMATION_TOOLING
   * </pre>
   *
   * <code>optional .android_studio.WearTileAnimationToolingEvent wear_tile_animation_tooling_event = 197 [lazy = true];</code>
   * @return Whether the wearTileAnimationToolingEvent field is set.
   */
  boolean hasWearTileAnimationToolingEvent();
  /**
   * <pre>
   * set when kind = WEAR_TILE_ANIMATION_TOOLING
   * </pre>
   *
   * <code>optional .android_studio.WearTileAnimationToolingEvent wear_tile_animation_tooling_event = 197 [lazy = true];</code>
   * @return The wearTileAnimationToolingEvent.
   */
  com.google.wireless.android.sdk.stats.WearTileAnimationToolingEvent getWearTileAnimationToolingEvent();
  /**
   * <pre>
   * set when kind = WEAR_TILE_ANIMATION_TOOLING
   * </pre>
   *
   * <code>optional .android_studio.WearTileAnimationToolingEvent wear_tile_animation_tooling_event = 197 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.WearTileAnimationToolingEventOrBuilder getWearTileAnimationToolingEventOrBuilder();

  /**
   * <pre>
   * set when kind = BACKUP_USAGE
   * </pre>
   *
   * <code>optional .android_studio.BackupUsageEvent backup_usage_event = 198 [lazy = true];</code>
   * @return Whether the backupUsageEvent field is set.
   */
  boolean hasBackupUsageEvent();
  /**
   * <pre>
   * set when kind = BACKUP_USAGE
   * </pre>
   *
   * <code>optional .android_studio.BackupUsageEvent backup_usage_event = 198 [lazy = true];</code>
   * @return The backupUsageEvent.
   */
  com.google.wireless.android.sdk.stats.BackupUsageEvent getBackupUsageEvent();
  /**
   * <pre>
   * set when kind = BACKUP_USAGE
   * </pre>
   *
   * <code>optional .android_studio.BackupUsageEvent backup_usage_event = 198 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BackupUsageEventOrBuilder getBackupUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = STARTUP_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StartupEvent startup_event = 199 [lazy = true];</code>
   * @return Whether the startupEvent field is set.
   */
  boolean hasStartupEvent();
  /**
   * <pre>
   * set when kind = STARTUP_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StartupEvent startup_event = 199 [lazy = true];</code>
   * @return The startupEvent.
   */
  com.google.wireless.android.sdk.stats.StartupEvent getStartupEvent();
  /**
   * <pre>
   * set when kind = STARTUP_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StartupEvent startup_event = 199 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StartupEventOrBuilder getStartupEventOrBuilder();

  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FIRST_UI_SHOWN
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFirstUiShownEvent startup_performance_first_ui_shown_event = 200 [lazy = true];</code>
   * @return Whether the startupPerformanceFirstUiShownEvent field is set.
   */
  boolean hasStartupPerformanceFirstUiShownEvent();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FIRST_UI_SHOWN
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFirstUiShownEvent startup_performance_first_ui_shown_event = 200 [lazy = true];</code>
   * @return The startupPerformanceFirstUiShownEvent.
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceFirstUiShownEvent getStartupPerformanceFirstUiShownEvent();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FIRST_UI_SHOWN
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFirstUiShownEvent startup_performance_first_ui_shown_event = 200 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceFirstUiShownEventOrBuilder getStartupPerformanceFirstUiShownEventOrBuilder();

  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FRAME_BECAME_VISIBLE
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFrameBecameVisibleEvent startup_performance_frame_became_visible_event = 201 [lazy = true];</code>
   * @return Whether the startupPerformanceFrameBecameVisibleEvent field is set.
   */
  boolean hasStartupPerformanceFrameBecameVisibleEvent();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FRAME_BECAME_VISIBLE
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFrameBecameVisibleEvent startup_performance_frame_became_visible_event = 201 [lazy = true];</code>
   * @return The startupPerformanceFrameBecameVisibleEvent.
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceFrameBecameVisibleEvent getStartupPerformanceFrameBecameVisibleEvent();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FRAME_BECAME_VISIBLE
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFrameBecameVisibleEvent startup_performance_frame_became_visible_event = 201 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceFrameBecameVisibleEventOrBuilder getStartupPerformanceFrameBecameVisibleEventOrBuilder();

  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FRAME_BECAME_INTERACTIVE
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFrameBecameInteractiveEvent startup_performance_frame_became_interactive_event = 202 [lazy = true];</code>
   * @return Whether the startupPerformanceFrameBecameInteractiveEvent field is set.
   */
  boolean hasStartupPerformanceFrameBecameInteractiveEvent();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FRAME_BECAME_INTERACTIVE
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFrameBecameInteractiveEvent startup_performance_frame_became_interactive_event = 202 [lazy = true];</code>
   * @return The startupPerformanceFrameBecameInteractiveEvent.
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceFrameBecameInteractiveEvent getStartupPerformanceFrameBecameInteractiveEvent();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_FRAME_BECAME_INTERACTIVE
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceFrameBecameInteractiveEvent startup_performance_frame_became_interactive_event = 202 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceFrameBecameInteractiveEventOrBuilder getStartupPerformanceFrameBecameInteractiveEventOrBuilder();

  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_CODE_LOADED_AND_VISIBLE_IN_EDITOR
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceCodeLoadedAndVisibleInEditor startup_performance_code_loaded_and_visible_in_editor = 203 [lazy = true];</code>
   * @return Whether the startupPerformanceCodeLoadedAndVisibleInEditor field is set.
   */
  boolean hasStartupPerformanceCodeLoadedAndVisibleInEditor();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_CODE_LOADED_AND_VISIBLE_IN_EDITOR
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceCodeLoadedAndVisibleInEditor startup_performance_code_loaded_and_visible_in_editor = 203 [lazy = true];</code>
   * @return The startupPerformanceCodeLoadedAndVisibleInEditor.
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceCodeLoadedAndVisibleInEditor getStartupPerformanceCodeLoadedAndVisibleInEditor();
  /**
   * <pre>
   * set when kind = STARTUP_PERFORMANCE_CODE_LOADED_AND_VISIBLE_IN_EDITOR
   * </pre>
   *
   * <code>optional .android_studio.StartupPerformanceCodeLoadedAndVisibleInEditor startup_performance_code_loaded_and_visible_in_editor = 203 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StartupPerformanceCodeLoadedAndVisibleInEditorOrBuilder getStartupPerformanceCodeLoadedAndVisibleInEditorOrBuilder();

  /**
   * <pre>
   * set when kind = UI_TOOLS_PREFERENCES
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent ui_tools_preferences_event = 204 [lazy = true];</code>
   * @return Whether the uiToolsPreferencesEvent field is set.
   */
  boolean hasUiToolsPreferencesEvent();
  /**
   * <pre>
   * set when kind = UI_TOOLS_PREFERENCES
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent ui_tools_preferences_event = 204 [lazy = true];</code>
   * @return The uiToolsPreferencesEvent.
   */
  com.google.wireless.android.sdk.stats.UiToolsPreferencesEvent getUiToolsPreferencesEvent();
  /**
   * <pre>
   * set when kind = UI_TOOLS_PREFERENCES
   * </pre>
   *
   * <code>optional .android_studio.UiToolsPreferencesEvent ui_tools_preferences_event = 204 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UiToolsPreferencesEventOrBuilder getUiToolsPreferencesEventOrBuilder();

  /**
   * <pre>
   * set when kind = SDK_INDEX_PROJECT_STATS
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexProjectStats sdk_index_project_stats = 205 [lazy = true];</code>
   * @return Whether the sdkIndexProjectStats field is set.
   */
  boolean hasSdkIndexProjectStats();
  /**
   * <pre>
   * set when kind = SDK_INDEX_PROJECT_STATS
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexProjectStats sdk_index_project_stats = 205 [lazy = true];</code>
   * @return The sdkIndexProjectStats.
   */
  com.google.wireless.android.sdk.stats.SdkIndexProjectStats getSdkIndexProjectStats();
  /**
   * <pre>
   * set when kind = SDK_INDEX_PROJECT_STATS
   * </pre>
   *
   * <code>optional .android_studio.SdkIndexProjectStats sdk_index_project_stats = 205 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SdkIndexProjectStatsOrBuilder getSdkIndexProjectStatsOrBuilder();

  /**
   * <pre>
   * set when kind = SOONG_RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SoongRunEvent soong_run_event = 206 [lazy = true];</code>
   * @return Whether the soongRunEvent field is set.
   */
  boolean hasSoongRunEvent();
  /**
   * <pre>
   * set when kind = SOONG_RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SoongRunEvent soong_run_event = 206 [lazy = true];</code>
   * @return The soongRunEvent.
   */
  com.google.wireless.android.sdk.stats.SoongRunEvent getSoongRunEvent();
  /**
   * <pre>
   * set when kind = SOONG_RUN_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SoongRunEvent soong_run_event = 206 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SoongRunEventOrBuilder getSoongRunEventOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_CORE_GEMINI_ACTIONS
   * </pre>
   *
   * <code>optional .android_studio.StudioCoreGeminiActionsEvent android_studio_core_gemini_actions_event = 207 [lazy = true];</code>
   * @return Whether the androidStudioCoreGeminiActionsEvent field is set.
   */
  boolean hasAndroidStudioCoreGeminiActionsEvent();
  /**
   * <pre>
   * set when kind = STUDIO_CORE_GEMINI_ACTIONS
   * </pre>
   *
   * <code>optional .android_studio.StudioCoreGeminiActionsEvent android_studio_core_gemini_actions_event = 207 [lazy = true];</code>
   * @return The androidStudioCoreGeminiActionsEvent.
   */
  com.google.wireless.android.sdk.stats.StudioCoreGeminiActionsEvent getAndroidStudioCoreGeminiActionsEvent();
  /**
   * <pre>
   * set when kind = STUDIO_CORE_GEMINI_ACTIONS
   * </pre>
   *
   * <code>optional .android_studio.StudioCoreGeminiActionsEvent android_studio_core_gemini_actions_event = 207 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioCoreGeminiActionsEventOrBuilder getAndroidStudioCoreGeminiActionsEventOrBuilder();

  /**
   * <pre>
   * set when kind = VIRTUALIZATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.VirtualizationEvent virtualization_event = 208 [lazy = true];</code>
   * @return Whether the virtualizationEvent field is set.
   */
  boolean hasVirtualizationEvent();
  /**
   * <pre>
   * set when kind = VIRTUALIZATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.VirtualizationEvent virtualization_event = 208 [lazy = true];</code>
   * @return The virtualizationEvent.
   */
  com.google.wireless.android.sdk.stats.VirtualizationEvent getVirtualizationEvent();
  /**
   * <pre>
   * set when kind = VIRTUALIZATION_EVENT
   * </pre>
   *
   * <code>optional .android_studio.VirtualizationEvent virtualization_event = 208 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.VirtualizationEventOrBuilder getVirtualizationEventOrBuilder();

  /**
   * <pre>
   * set when kind = DAEMON_CODE_ANALYZER_FINISHED_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DaemonCodeAnalyzerFinishedEvent daemon_code_analyzer_finished_event = 209 [lazy = true];</code>
   * @return Whether the daemonCodeAnalyzerFinishedEvent field is set.
   */
  boolean hasDaemonCodeAnalyzerFinishedEvent();
  /**
   * <pre>
   * set when kind = DAEMON_CODE_ANALYZER_FINISHED_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DaemonCodeAnalyzerFinishedEvent daemon_code_analyzer_finished_event = 209 [lazy = true];</code>
   * @return The daemonCodeAnalyzerFinishedEvent.
   */
  com.google.wireless.android.sdk.stats.DaemonCodeAnalyzerFinishedEvent getDaemonCodeAnalyzerFinishedEvent();
  /**
   * <pre>
   * set when kind = DAEMON_CODE_ANALYZER_FINISHED_EVENT
   * </pre>
   *
   * <code>optional .android_studio.DaemonCodeAnalyzerFinishedEvent daemon_code_analyzer_finished_event = 209 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.DaemonCodeAnalyzerFinishedEventOrBuilder getDaemonCodeAnalyzerFinishedEventOrBuilder();

  /**
   * <pre>
   * set when kind = EDITING_METRICS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.EditingMetricsEvent editing_metrics_event = 210 [lazy = true];</code>
   * @return Whether the editingMetricsEvent field is set.
   */
  boolean hasEditingMetricsEvent();
  /**
   * <pre>
   * set when kind = EDITING_METRICS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.EditingMetricsEvent editing_metrics_event = 210 [lazy = true];</code>
   * @return The editingMetricsEvent.
   */
  com.google.wireless.android.sdk.stats.EditingMetricsEvent getEditingMetricsEvent();
  /**
   * <pre>
   * set when kind = EDITING_METRICS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.EditingMetricsEvent editing_metrics_event = 210 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.EditingMetricsEventOrBuilder getEditingMetricsEventOrBuilder();

  /**
   * <pre>
   * set when kind = STUDIO_LABS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StudioLabsEvent studio_labs_event = 211 [lazy = true];</code>
   * @return Whether the studioLabsEvent field is set.
   */
  boolean hasStudioLabsEvent();
  /**
   * <pre>
   * set when kind = STUDIO_LABS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StudioLabsEvent studio_labs_event = 211 [lazy = true];</code>
   * @return The studioLabsEvent.
   */
  com.google.wireless.android.sdk.stats.StudioLabsEvent getStudioLabsEvent();
  /**
   * <pre>
   * set when kind = STUDIO_LABS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.StudioLabsEvent studio_labs_event = 211 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.StudioLabsEventOrBuilder getStudioLabsEventOrBuilder();

  /**
   * <pre>
   * set when kind = PROMPT_LIBRARY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.PromptLibraryEvent prompt_library_event = 212 [lazy = true];</code>
   * @return Whether the promptLibraryEvent field is set.
   */
  boolean hasPromptLibraryEvent();
  /**
   * <pre>
   * set when kind = PROMPT_LIBRARY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.PromptLibraryEvent prompt_library_event = 212 [lazy = true];</code>
   * @return The promptLibraryEvent.
   */
  com.google.wireless.android.sdk.stats.PromptLibraryEvent getPromptLibraryEvent();
  /**
   * <pre>
   * set when kind = PROMPT_LIBRARY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.PromptLibraryEvent prompt_library_event = 212 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.PromptLibraryEventOrBuilder getPromptLibraryEventOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE_DETAILS
   * </pre>
   *
   * <code>optional .android_studio.GradleFailureDetails gradle_failure_details = 213 [lazy = true];</code>
   * @return Whether the gradleFailureDetails field is set.
   */
  boolean hasGradleFailureDetails();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE_DETAILS
   * </pre>
   *
   * <code>optional .android_studio.GradleFailureDetails gradle_failure_details = 213 [lazy = true];</code>
   * @return The gradleFailureDetails.
   */
  com.google.wireless.android.sdk.stats.GradleFailureDetails getGradleFailureDetails();
  /**
   * <pre>
   * set when kind = GRADLE_SYNC_FAILURE_DETAILS
   * </pre>
   *
   * <code>optional .android_studio.GradleFailureDetails gradle_failure_details = 213 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleFailureDetailsOrBuilder getGradleFailureDetailsOrBuilder();

  /**
   * <pre>
   * set when kind = ADB_DELEGATE_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AdbDelegateUsageEvent adb_delegate_usage_event = 214 [lazy = true];</code>
   * @return Whether the adbDelegateUsageEvent field is set.
   */
  boolean hasAdbDelegateUsageEvent();
  /**
   * <pre>
   * set when kind = ADB_DELEGATE_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AdbDelegateUsageEvent adb_delegate_usage_event = 214 [lazy = true];</code>
   * @return The adbDelegateUsageEvent.
   */
  com.google.wireless.android.sdk.stats.AdbDelegateUsageEvent getAdbDelegateUsageEvent();
  /**
   * <pre>
   * set when kind = ADB_DELEGATE_USAGE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.AdbDelegateUsageEvent adb_delegate_usage_event = 214 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AdbDelegateUsageEventOrBuilder getAdbDelegateUsageEventOrBuilder();

  /**
   * <pre>
   * set when kind = SETUP_WIZARD_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SetupWizardEvent setup_wizard_event = 215 [lazy = true];</code>
   * @return Whether the setupWizardEvent field is set.
   */
  boolean hasSetupWizardEvent();
  /**
   * <pre>
   * set when kind = SETUP_WIZARD_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SetupWizardEvent setup_wizard_event = 215 [lazy = true];</code>
   * @return The setupWizardEvent.
   */
  com.google.wireless.android.sdk.stats.SetupWizardEvent getSetupWizardEvent();
  /**
   * <pre>
   * set when kind = SETUP_WIZARD_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SetupWizardEvent setup_wizard_event = 215 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SetupWizardEventOrBuilder getSetupWizardEventOrBuilder();

  /**
   * <pre>
   * set when kind = BROWSER_SURVEY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BrowserSurveyEvent browser_survey_event = 216 [lazy = true];</code>
   * @return Whether the browserSurveyEvent field is set.
   */
  boolean hasBrowserSurveyEvent();
  /**
   * <pre>
   * set when kind = BROWSER_SURVEY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BrowserSurveyEvent browser_survey_event = 216 [lazy = true];</code>
   * @return The browserSurveyEvent.
   */
  com.google.wireless.android.sdk.stats.BrowserSurveyEvent getBrowserSurveyEvent();
  /**
   * <pre>
   * set when kind = BROWSER_SURVEY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BrowserSurveyEvent browser_survey_event = 216 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BrowserSurveyEventOrBuilder getBrowserSurveyEventOrBuilder();

  /**
   * <pre>
   * set when kind = GRADLE_DAEMON_JVM_CRITERIA_ERROR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GradleDaemonJvmCriteriaErrorEvent gradle_daemon_jvm_criteria_error_event = 217 [lazy = true];</code>
   * @return Whether the gradleDaemonJvmCriteriaErrorEvent field is set.
   */
  boolean hasGradleDaemonJvmCriteriaErrorEvent();
  /**
   * <pre>
   * set when kind = GRADLE_DAEMON_JVM_CRITERIA_ERROR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GradleDaemonJvmCriteriaErrorEvent gradle_daemon_jvm_criteria_error_event = 217 [lazy = true];</code>
   * @return The gradleDaemonJvmCriteriaErrorEvent.
   */
  com.google.wireless.android.sdk.stats.GradleDaemonJvmCriteriaErrorEvent getGradleDaemonJvmCriteriaErrorEvent();
  /**
   * <pre>
   * set when kind = GRADLE_DAEMON_JVM_CRITERIA_ERROR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GradleDaemonJvmCriteriaErrorEvent gradle_daemon_jvm_criteria_error_event = 217 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GradleDaemonJvmCriteriaErrorEventOrBuilder getGradleDaemonJvmCriteriaErrorEventOrBuilder();

  /**
   * <pre>
   * set when kind = ALIGN16KB_EVENT
   * </pre>
   *
   * <code>optional .android_studio.Align16kbEvent align16kb_event = 218 [lazy = true];</code>
   * @return Whether the align16kbEvent field is set.
   */
  boolean hasAlign16KbEvent();
  /**
   * <pre>
   * set when kind = ALIGN16KB_EVENT
   * </pre>
   *
   * <code>optional .android_studio.Align16kbEvent align16kb_event = 218 [lazy = true];</code>
   * @return The align16kbEvent.
   */
  com.google.wireless.android.sdk.stats.Align16kbEvent getAlign16KbEvent();
  /**
   * <pre>
   * set when kind = ALIGN16KB_EVENT
   * </pre>
   *
   * <code>optional .android_studio.Align16kbEvent align16kb_event = 218 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.Align16kbEventOrBuilder getAlign16KbEventOrBuilder();

  /**
   * <pre>
   * set when kind = GC_PAUSE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GcPauseEvent gc_pause_event = 219 [lazy = true];</code>
   * @return Whether the gcPauseEvent field is set.
   */
  boolean hasGcPauseEvent();
  /**
   * <pre>
   * set when kind = GC_PAUSE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GcPauseEvent gc_pause_event = 219 [lazy = true];</code>
   * @return The gcPauseEvent.
   */
  com.google.wireless.android.sdk.stats.GcPauseEvent getGcPauseEvent();
  /**
   * <pre>
   * set when kind = GC_PAUSE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GcPauseEvent gc_pause_event = 219 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GcPauseEventOrBuilder getGcPauseEventOrBuilder();

  /**
   * <pre>
   * set when kind = AUTO_SYNC_SETTING_CHANGE
   * </pre>
   *
   * <code>optional .android_studio.AutoSyncSettingChangeEvent auto_sync_setting_change_event = 220 [lazy = true];</code>
   * @return Whether the autoSyncSettingChangeEvent field is set.
   */
  boolean hasAutoSyncSettingChangeEvent();
  /**
   * <pre>
   * set when kind = AUTO_SYNC_SETTING_CHANGE
   * </pre>
   *
   * <code>optional .android_studio.AutoSyncSettingChangeEvent auto_sync_setting_change_event = 220 [lazy = true];</code>
   * @return The autoSyncSettingChangeEvent.
   */
  com.google.wireless.android.sdk.stats.AutoSyncSettingChangeEvent getAutoSyncSettingChangeEvent();
  /**
   * <pre>
   * set when kind = AUTO_SYNC_SETTING_CHANGE
   * </pre>
   *
   * <code>optional .android_studio.AutoSyncSettingChangeEvent auto_sync_setting_change_event = 220 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AutoSyncSettingChangeEventOrBuilder getAutoSyncSettingChangeEventOrBuilder();

  /**
   * <pre>
   * set when kind = SUPPRESSED_SYNC
   * </pre>
   *
   * <code>optional .android_studio.SuppressedSyncEvent suppressed_sync_event = 221 [lazy = true];</code>
   * @return Whether the suppressedSyncEvent field is set.
   */
  boolean hasSuppressedSyncEvent();
  /**
   * <pre>
   * set when kind = SUPPRESSED_SYNC
   * </pre>
   *
   * <code>optional .android_studio.SuppressedSyncEvent suppressed_sync_event = 221 [lazy = true];</code>
   * @return The suppressedSyncEvent.
   */
  com.google.wireless.android.sdk.stats.SuppressedSyncEvent getSuppressedSyncEvent();
  /**
   * <pre>
   * set when kind = SUPPRESSED_SYNC
   * </pre>
   *
   * <code>optional .android_studio.SuppressedSyncEvent suppressed_sync_event = 221 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SuppressedSyncEventOrBuilder getSuppressedSyncEventOrBuilder();

  /**
   * <pre>
   * set when kind = RESIZE_COMPOSE_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ResizeComposePreviewEvent resize_compose_preview_event = 222 [lazy = true];</code>
   * @return Whether the resizeComposePreviewEvent field is set.
   */
  boolean hasResizeComposePreviewEvent();
  /**
   * <pre>
   * set when kind = RESIZE_COMPOSE_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ResizeComposePreviewEvent resize_compose_preview_event = 222 [lazy = true];</code>
   * @return The resizeComposePreviewEvent.
   */
  com.google.wireless.android.sdk.stats.ResizeComposePreviewEvent getResizeComposePreviewEvent();
  /**
   * <pre>
   * set when kind = RESIZE_COMPOSE_PREVIEW_EVENT
   * </pre>
   *
   * <code>optional .android_studio.ResizeComposePreviewEvent resize_compose_preview_event = 222 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ResizeComposePreviewEventOrBuilder getResizeComposePreviewEventOrBuilder();

  /**
   * <pre>
   * set when kind = WIFI_PAIRING_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WifiPairingEvent wifi_pairing_event = 223 [lazy = true];</code>
   * @return Whether the wifiPairingEvent field is set.
   */
  boolean hasWifiPairingEvent();
  /**
   * <pre>
   * set when kind = WIFI_PAIRING_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WifiPairingEvent wifi_pairing_event = 223 [lazy = true];</code>
   * @return The wifiPairingEvent.
   */
  com.google.wireless.android.sdk.stats.WifiPairingEvent getWifiPairingEvent();
  /**
   * <pre>
   * set when kind = WIFI_PAIRING_EVENT
   * </pre>
   *
   * <code>optional .android_studio.WifiPairingEvent wifi_pairing_event = 223 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.WifiPairingEventOrBuilder getWifiPairingEventOrBuilder();

  /**
   * <pre>
   * set when kind = COMMIT_METRICS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CommitMetricsEvent commit_metrics_event = 224 [lazy = true];</code>
   * @return Whether the commitMetricsEvent field is set.
   */
  boolean hasCommitMetricsEvent();
  /**
   * <pre>
   * set when kind = COMMIT_METRICS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CommitMetricsEvent commit_metrics_event = 224 [lazy = true];</code>
   * @return The commitMetricsEvent.
   */
  com.google.wireless.android.sdk.stats.CommitMetricsEvent getCommitMetricsEvent();
  /**
   * <pre>
   * set when kind = COMMIT_METRICS_EVENT
   * </pre>
   *
   * <code>optional .android_studio.CommitMetricsEvent commit_metrics_event = 224 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.CommitMetricsEventOrBuilder getCommitMetricsEventOrBuilder();

  /**
   * <pre>
   * set when kind = USER_ID_RESET_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UserIdResetEvent user_id_reset_event = 225 [lazy = true];</code>
   * @return Whether the userIdResetEvent field is set.
   */
  boolean hasUserIdResetEvent();
  /**
   * <pre>
   * set when kind = USER_ID_RESET_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UserIdResetEvent user_id_reset_event = 225 [lazy = true];</code>
   * @return The userIdResetEvent.
   */
  com.google.wireless.android.sdk.stats.UserIdResetEvent getUserIdResetEvent();
  /**
   * <pre>
   * set when kind = USER_ID_RESET_EVENT
   * </pre>
   *
   * <code>optional .android_studio.UserIdResetEvent user_id_reset_event = 225 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UserIdResetEventOrBuilder getUserIdResetEventOrBuilder();

  /**
   * <pre>
   * set when kind = K2_MODE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.K2ModeEvent k2_mode_event = 226 [lazy = true];</code>
   * @return Whether the k2ModeEvent field is set.
   */
  boolean hasK2ModeEvent();
  /**
   * <pre>
   * set when kind = K2_MODE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.K2ModeEvent k2_mode_event = 226 [lazy = true];</code>
   * @return The k2ModeEvent.
   */
  com.google.wireless.android.sdk.stats.K2ModeEvent getK2ModeEvent();
  /**
   * <pre>
   * set when kind = K2_MODE_EVENT
   * </pre>
   *
   * <code>optional .android_studio.K2ModeEvent k2_mode_event = 226 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.K2ModeEventOrBuilder getK2ModeEventOrBuilder();

  /**
   * <pre>
   * set when kind = JOURNEY_FINISHED_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JourneyFinishedEvent journey_finished_event = 227 [lazy = true];</code>
   * @return Whether the journeyFinishedEvent field is set.
   */
  boolean hasJourneyFinishedEvent();
  /**
   * <pre>
   * set when kind = JOURNEY_FINISHED_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JourneyFinishedEvent journey_finished_event = 227 [lazy = true];</code>
   * @return The journeyFinishedEvent.
   */
  com.google.wireless.android.sdk.stats.JourneyFinishedEvent getJourneyFinishedEvent();
  /**
   * <pre>
   * set when kind = JOURNEY_FINISHED_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JourneyFinishedEvent journey_finished_event = 227 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.JourneyFinishedEventOrBuilder getJourneyFinishedEventOrBuilder();

  /**
   * <pre>
   * set when kind = JOURNEY_ENGINE_ERROR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JourneyEngineErrorEvent journey_engine_error_event = 228 [lazy = true];</code>
   * @return Whether the journeyEngineErrorEvent field is set.
   */
  boolean hasJourneyEngineErrorEvent();
  /**
   * <pre>
   * set when kind = JOURNEY_ENGINE_ERROR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JourneyEngineErrorEvent journey_engine_error_event = 228 [lazy = true];</code>
   * @return The journeyEngineErrorEvent.
   */
  com.google.wireless.android.sdk.stats.JourneyEngineErrorEvent getJourneyEngineErrorEvent();
  /**
   * <pre>
   * set when kind = JOURNEY_ENGINE_ERROR_EVENT
   * </pre>
   *
   * <code>optional .android_studio.JourneyEngineErrorEvent journey_engine_error_event = 228 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.JourneyEngineErrorEventOrBuilder getJourneyEngineErrorEventOrBuilder();

  /**
   * <pre>
   * set when kind = BACKUP_AND_SYNC_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BackupAndSyncEvent backup_and_sync_event = 229 [lazy = true];</code>
   * @return Whether the backupAndSyncEvent field is set.
   */
  boolean hasBackupAndSyncEvent();
  /**
   * <pre>
   * set when kind = BACKUP_AND_SYNC_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BackupAndSyncEvent backup_and_sync_event = 229 [lazy = true];</code>
   * @return The backupAndSyncEvent.
   */
  com.google.wireless.android.sdk.stats.BackupAndSyncEvent getBackupAndSyncEvent();
  /**
   * <pre>
   * set when kind = BACKUP_AND_SYNC_EVENT
   * </pre>
   *
   * <code>optional .android_studio.BackupAndSyncEvent backup_and_sync_event = 229 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.BackupAndSyncEventOrBuilder getBackupAndSyncEventOrBuilder();

  /**
   * <pre>
   * set when kind = SENTIMENT_SURVEY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SentimentSurveyEvent sentiment_survey_event = 230 [lazy = true];</code>
   * @return Whether the sentimentSurveyEvent field is set.
   */
  boolean hasSentimentSurveyEvent();
  /**
   * <pre>
   * set when kind = SENTIMENT_SURVEY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SentimentSurveyEvent sentiment_survey_event = 230 [lazy = true];</code>
   * @return The sentimentSurveyEvent.
   */
  com.google.wireless.android.sdk.stats.SentimentSurveyEvent getSentimentSurveyEvent();
  /**
   * <pre>
   * set when kind = SENTIMENT_SURVEY_EVENT
   * </pre>
   *
   * <code>optional .android_studio.SentimentSurveyEvent sentiment_survey_event = 230 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SentimentSurveyEventOrBuilder getSentimentSurveyEventOrBuilder();

  /**
   * <pre>
   * set when kind = GEMINI_ADVERTISER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GeminiAdvertiserEvent gemini_advertiser_event = 231 [lazy = true];</code>
   * @return Whether the geminiAdvertiserEvent field is set.
   */
  boolean hasGeminiAdvertiserEvent();
  /**
   * <pre>
   * set when kind = GEMINI_ADVERTISER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GeminiAdvertiserEvent gemini_advertiser_event = 231 [lazy = true];</code>
   * @return The geminiAdvertiserEvent.
   */
  com.google.wireless.android.sdk.stats.GeminiAdvertiserEvent getGeminiAdvertiserEvent();
  /**
   * <pre>
   * set when kind = GEMINI_ADVERTISER_EVENT
   * </pre>
   *
   * <code>optional .android_studio.GeminiAdvertiserEvent gemini_advertiser_event = 231 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.GeminiAdvertiserEventOrBuilder getGeminiAdvertiserEventOrBuilder();
}
