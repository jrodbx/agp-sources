// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * A single execution span from a build.
 * For example, a task execution or creation of some tasks for a variant.
 * </pre>
 *
 * Protobuf type {@code android_studio.GradleBuildProfileSpan}
 */
public final class GradleBuildProfileSpan extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.GradleBuildProfileSpan)
    GradleBuildProfileSpanOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GradleBuildProfileSpan.newBuilder() to construct.
  private GradleBuildProfileSpan(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GradleBuildProfileSpan() {
    type_ = 1;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GradleBuildProfileSpan();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_GradleBuildProfileSpan_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_GradleBuildProfileSpan_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.class, com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.Builder.class);
  }

  /**
   * <pre>
   * The type of execution.
   * This was originally com.android.builder.profile.ExecutionType.
   * </pre>
   *
   * Protobuf enum {@code android_studio.GradleBuildProfileSpan.ExecutionType}
   */
  public enum ExecutionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SOME_RANDOM_PROCESSING = 1;</code>
     */
    SOME_RANDOM_PROCESSING(1),
    /**
     * <code>BASE_PLUGIN_PROJECT_CONFIGURE = 2;</code>
     */
    BASE_PLUGIN_PROJECT_CONFIGURE(2),
    /**
     * <code>BASE_PLUGIN_PROJECT_BASE_EXTENSION_CREATION = 3;</code>
     */
    BASE_PLUGIN_PROJECT_BASE_EXTENSION_CREATION(3),
    /**
     * <code>BASE_PLUGIN_PROJECT_TASKS_CREATION = 4;</code>
     */
    BASE_PLUGIN_PROJECT_TASKS_CREATION(4),
    /**
     * <code>BASE_PLUGIN_BUILD_FINISHED = 5;</code>
     */
    BASE_PLUGIN_BUILD_FINISHED(5),
    /**
     * <code>TASK_MANAGER_CREATE_TASKS = 6;</code>
     */
    TASK_MANAGER_CREATE_TASKS(6),
    /**
     * <code>BASE_PLUGIN_CREATE_ANDROID_TASKS = 7;</code>
     */
    BASE_PLUGIN_CREATE_ANDROID_TASKS(7),
    /**
     * <code>VARIANT_MANAGER_CREATE_ANDROID_TASKS = 8;</code>
     */
    VARIANT_MANAGER_CREATE_ANDROID_TASKS(8),
    /**
     * <code>VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT = 9;</code>
     */
    VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT(9),
    /**
     * <code>VARIANT_MANAGER_CREATE_LINT_TASKS = 10;</code>
     */
    VARIANT_MANAGER_CREATE_LINT_TASKS(10),
    /**
     * <code>VARIANT_MANAGER_CREATE_TESTS_TASKS = 11;</code>
     */
    VARIANT_MANAGER_CREATE_TESTS_TASKS(11),
    /**
     * <code>VARIANT_MANAGER_CREATE_VARIANTS = 12;</code>
     */
    VARIANT_MANAGER_CREATE_VARIANTS(12),
    /**
     * <code>RESOLVE_DEPENDENCIES = 13;</code>
     */
    RESOLVE_DEPENDENCIES(13),
    /**
     * <pre>
     * span for task execution as reported by Gradle, that's including Gradle's
     * pre and post task activities.
     * </pre>
     *
     * <code>TASK_EXECUTION = 14;</code>
     */
    TASK_EXECUTION(14),
    /**
     * <code>WORKER_EXECUTION = 15;</code>
     */
    WORKER_EXECUTION(15),
    /**
     * <code>THREAD_EXECUTION = 16;</code>
     */
    THREAD_EXECUTION(16),
    /**
     * <code>ARTIFACT_TRANSFORM = 17;</code>
     */
    ARTIFACT_TRANSFORM(17),
    /**
     * <code>INITIAL_METADATA = 100 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    INITIAL_METADATA(100),
    /**
     * <code>FINAL_METADATA = 101 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FINAL_METADATA(101),
    /**
     * <code>GENERAL_CONFIG = 102;</code>
     */
    GENERAL_CONFIG(102),
    /**
     * <code>VARIANT_CONFIG = 103;</code>
     */
    VARIANT_CONFIG(103),
    /**
     * <code>VARIANT_MANAGER_EXTERNAL_NATIVE_CONFIG_VALUES = 104;</code>
     */
    VARIANT_MANAGER_EXTERNAL_NATIVE_CONFIG_VALUES(104),
    /**
     * <code>APK_METRICS = 105;</code>
     */
    APK_METRICS(105),
    /**
     * <pre>
     * span for task execution excluding Gradle's pre and post task activities.
     * </pre>
     *
     * <code>TASK_EXECUTION_ALL_PHASES = 200;</code>
     */
    TASK_EXECUTION_ALL_PHASES(200),
    /**
     * <pre>
     * generic span types for task implementation. Phases are sequential sub
     * parts of the task implementation that can help determine the performance
     * of sub parts of the task implementation.
     * For instance a task spans can look like :
     *
     * &lt;---------------------- TASK_EXECUTION -------------------&gt;
     * &lt;--PRE--&gt;&lt;------- TASK_EXECUTION_ALL_PHASES ----&gt;&lt;--POST--&gt;
     *          &lt;---PHASE_1---&gt;&lt;-PHASE_2-&gt;&lt;--PHASE_3---&gt;
     * </pre>
     *
     * <code>TASK_EXECUTION_PHASE_1 = 201;</code>
     */
    TASK_EXECUTION_PHASE_1(201),
    /**
     * <code>TASK_EXECUTION_PHASE_2 = 202;</code>
     */
    TASK_EXECUTION_PHASE_2(202),
    /**
     * <code>TASK_EXECUTION_PHASE_3 = 203;</code>
     */
    TASK_EXECUTION_PHASE_3(203),
    /**
     * <code>TASK_EXECUTION_PHASE_4 = 204;</code>
     */
    TASK_EXECUTION_PHASE_4(204),
    /**
     * <code>TASK_EXECUTION_PHASE_5 = 205;</code>
     */
    TASK_EXECUTION_PHASE_5(205),
    /**
     * <code>TASK_EXECUTION_PHASE_6 = 206;</code>
     */
    TASK_EXECUTION_PHASE_6(206),
    /**
     * <code>TASK_EXECUTION_PHASE_7 = 207;</code>
     */
    TASK_EXECUTION_PHASE_7(207),
    /**
     * <code>TASK_EXECUTION_PHASE_8 = 208;</code>
     */
    TASK_EXECUTION_PHASE_8(208),
    /**
     * <code>TASK_EXECUTION_PHASE_9 = 209;</code>
     */
    TASK_EXECUTION_PHASE_9(209),
    /**
     * <pre>
     * span for gradle overhead before task execution
     * </pre>
     *
     * <code>GRADLE_PRE_TASK_SPAN = 298;</code>
     */
    GRADLE_PRE_TASK_SPAN(298),
    /**
     * <pre>
     * span for gradle overhead after task execution
     * </pre>
     *
     * <code>GRADLE_POST_TASK_SPAN = 299;</code>
     */
    GRADLE_POST_TASK_SPAN(299),
    /**
     * <pre>
     * ApplicationTaskManager per variant tasks.
     * </pre>
     *
     * <code>APP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 1000 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK(1000),
    /**
     * <code>APP_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 1001 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK(1001),
    /**
     * <code>APP_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 1002 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK(1002),
    /**
     * <code>APP_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 1003 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK(1003),
    /**
     * <code>APP_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 1004 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK(1004),
    /**
     * <code>APP_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 1005 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK(1005),
    /**
     * <code>APP_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 1006 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_PROCESS_RES_TASK(1006),
    /**
     * <code>APP_TASK_MANAGER_CREATE_AIDL_TASK = 1007 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_AIDL_TASK(1007),
    /**
     * <code>APP_TASK_MANAGER_CREATE_COMPILE_TASK = 1008 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_COMPILE_TASK(1008),
    /**
     * <code>APP_TASK_MANAGER_CREATE_NDK_TASK = 1009 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_NDK_TASK(1009),
    /**
     * <code>APP_TASK_MANAGER_CREATE_SPLIT_TASK = 1010 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_SPLIT_TASK(1010),
    /**
     * <code>APP_TASK_MANAGER_CREATE_PACKAGING_TASK = 1011 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_PACKAGING_TASK(1011),
    /**
     * <code>APP_TASK_MANAGER_CREATE_PREPROCESS_RESOURCES_TASK = 1012 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_PREPROCESS_RESOURCES_TASK(1012),
    /**
     * <code>APP_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK = 1013 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK(1013),
    /**
     * <code>APP_TASK_MANAGER_CREATE_LINT_TASK = 1014 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_LINT_TASK(1014),
    /**
     * <code>APP_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK = 1015 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK(1015),
    /**
     * <code>APP_TASK_MANAGER_CREATE_SHADER_TASK = 1016 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_SHADER_TASK(1016),
    /**
     * <code>APP_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 1017 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK(1017),
    /**
     * <code>APP_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK = 1018 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    APP_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK(1018),
    /**
     * <pre>
     * LibraryTaskManager per variant tasks.
     * </pre>
     *
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 2000 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK(2000),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 2001 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK(2001),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 2002 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK(2002),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 2003 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK(2003),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 2004 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK(2004),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 2005 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK(2005),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 2006 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_PROCESS_RES_TASK(2006),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_AIDL_TASK = 2007 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_AIDL_TASK(2007),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_COMPILE_TASK = 2008 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_COMPILE_TASK(2008),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_NDK_TASK = 2009 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_NDK_TASK(2009),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_SPLIT_TASK = 2010 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_SPLIT_TASK(2010),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PACKAGING_TASK = 2011 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_PACKAGING_TASK(2011),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_PROGUARD_FILE_TASK = 2012 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_MERGE_PROGUARD_FILE_TASK(2012),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_POST_COMPILATION_TASK = 2013 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_POST_COMPILATION_TASK(2013),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PROGUARD_TASK = 2014 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_PROGUARD_TASK(2014),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PACKAGE_LOCAL_JAR = 2015 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_PACKAGE_LOCAL_JAR(2015),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK = 2016 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK(2016),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_LINT_TASK = 2017 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_LINT_TASK(2017),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_SHADER_TASK = 2018 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_SHADER_TASK(2018),
    /**
     * <code>LIB_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 2019 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    LIB_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK(2019),
    /**
     * <pre>
     * Task execution: Deprecated, use TASK_EXECUTION and
     * GradleTaskExecution#Type instead.
     * Deprecated July 2016.
     * </pre>
     *
     * <code>GENERIC_TASK_EXECUTION = 3000 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    GENERIC_TASK_EXECUTION(3000),
    /**
     * <code>TASK_AIDL_COMPILE = 3001 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_AIDL_COMPILE(3001),
    /**
     * <code>TASK_DELETE = 3002 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_DELETE(3002),
    /**
     * <code>TASK_CHECK_MANIFEST = 3003 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_CHECK_MANIFEST(3003),
    /**
     * <code>TASK_PREPARE_DEPENDENCIES_TASK = 3004 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_PREPARE_DEPENDENCIES_TASK(3004),
    /**
     * <code>TASK_RENDERSCRIPT_COMPILE = 3005 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_RENDERSCRIPT_COMPILE(3005),
    /**
     * <code>TASK_GENERATE_BUILD_CONFIG = 3006 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_GENERATE_BUILD_CONFIG(3006),
    /**
     * <code>TASK_MERGE_ASSETS = 3007 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_MERGE_ASSETS(3007),
    /**
     * <code>TASK_GENERATE_RES_VALUES = 3008 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_GENERATE_RES_VALUES(3008),
    /**
     * <code>TASK_MERGE_RESOURCES = 3009 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_MERGE_RESOURCES(3009),
    /**
     * <code>TASK_MERGE_MANIFESTS = 3010 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_MERGE_MANIFESTS(3010),
    /**
     * <code>TASK_PROCESS_ANDROID_RESOURCES = 3011 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_PROCESS_ANDROID_RESOURCES(3011),
    /**
     * <code>TASK_JAVA_COMPILE = 3012 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_JAVA_COMPILE(3012),
    /**
     * <code>TASK_NDK_COMPILE = 3013 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_NDK_COMPILE(3013),
    /**
     * <code>TASK_PRE_DEX = 3014 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_PRE_DEX(3014),
    /**
     * <code>TASK_DEX = 3015 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_DEX(3015),
    /**
     * <code>TASK_PACKAGE_SPLIT_RES = 3016 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_PACKAGE_SPLIT_RES(3016),
    /**
     * <code>TASK_PROCESS_RESOURCES = 3017 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_PROCESS_RESOURCES(3017),
    /**
     * <code>TASK_VALIDATE_SIGNING_TASK = 3018 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_VALIDATE_SIGNING_TASK(3018),
    /**
     * <code>TASK_PACKAGE_APPLICATION = 3019 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_PACKAGE_APPLICATION(3019),
    /**
     * <code>TASK_SPLIT_ZIP_ALIGN = 3020 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_SPLIT_ZIP_ALIGN(3020),
    /**
     * <code>TASK_ZIP_ALIGN = 3021 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_ZIP_ALIGN(3021),
    /**
     * <code>TASK_COPY = 3022 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_COPY(3022),
    /**
     * <code>TASK_LINT = 3023 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_LINT(3023),
    /**
     * <code>TASK_FILE_VERIFICATION = 3026 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_FILE_VERIFICATION(3026),
    /**
     * <code>TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS_PER_ABI = 3027 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS_PER_ABI(3027),
    /**
     * <code>TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS = 3028 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS(3028),
    /**
     * <pre>
     * Transform execution
     * </pre>
     *
     * <code>TASK_TRANSFORM_PREPARATION = 3024;</code>
     */
    TASK_TRANSFORM_PREPARATION(3024),
    /**
     * <code>TASK_TRANSFORM = 3025;</code>
     */
    TASK_TRANSFORM(3025),
    /**
     * <pre>
     * AtomTaskManager per variant tasks.
     * </pre>
     *
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 4000 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK(4000),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 4001 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK(4001),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 4002 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK(4002),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 4003 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK(4003),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 4004 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK(4004),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 4005 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK(4005),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 4006 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_PROCESS_RES_TASK(4006),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_AIDL_TASK = 4007 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_AIDL_TASK(4007),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_SHADER_TASK = 4008 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_SHADER_TASK(4008),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_NDK_TASK = 4009 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_NDK_TASK(4009),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 4010 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK(4010),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK = 4011 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK(4011),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_COMPILE_TASK = 4012 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_COMPILE_TASK(4012),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_BUNDLING_TASK = 4013 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_BUNDLING_TASK(4013),
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_LINT_TASK = 4014 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    ATOM_TASK_MANAGER_CREATE_LINT_TASK(4014),
    /**
     * <pre>
     * InstantAppTaskManager per variant tasks.
     * </pre>
     *
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 5000 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    INSTANTAPP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK(5000),
    /**
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_ATOM_PACKAGING_TASKS = 5001 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    INSTANTAPP_TASK_MANAGER_CREATE_ATOM_PACKAGING_TASKS(5001),
    /**
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 5002 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    INSTANTAPP_TASK_MANAGER_CREATE_PROCESS_RES_TASK(5002),
    /**
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_PACKAGING_TASK = 5003 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    INSTANTAPP_TASK_MANAGER_CREATE_PACKAGING_TASK(5003),
    /**
     * <pre>
     * FeatureTaskManager per variant tasks.
     * </pre>
     *
     * <code>FEATURE_TASK_MANAGER_CREATE_BASE_TASKS = 6000 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_BASE_TASKS(6000),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_NON_BASE_TASKS = 6001 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_NON_BASE_TASKS(6001),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 6002 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK(6002),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 6003 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK(6003),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 6004 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK(6004),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 6005 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK(6005),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 6006 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK(6006),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 6007 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK(6007),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 6008 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_PROCESS_RES_TASK(6008),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_AIDL_TASK = 6009 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_AIDL_TASK(6009),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_SHADER_TASK = 6010 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_SHADER_TASK(6010),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_NDK_TASK = 6011 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_NDK_TASK(6011),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 6012 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK(6012),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK = 6013 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK(6013),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_COMPILE_TASK = 6014 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_COMPILE_TASK(6014),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK = 6015 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK(6015),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_SPLIT_TASK = 6016 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_SPLIT_TASK(6016),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_PACKAGING_TASK = 6017 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_PACKAGING_TASK(6017),
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_LINT_TASK = 6018 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    FEATURE_TASK_MANAGER_CREATE_LINT_TASK(6018),
    ;

    /**
     * <code>SOME_RANDOM_PROCESSING = 1;</code>
     */
    public static final int SOME_RANDOM_PROCESSING_VALUE = 1;
    /**
     * <code>BASE_PLUGIN_PROJECT_CONFIGURE = 2;</code>
     */
    public static final int BASE_PLUGIN_PROJECT_CONFIGURE_VALUE = 2;
    /**
     * <code>BASE_PLUGIN_PROJECT_BASE_EXTENSION_CREATION = 3;</code>
     */
    public static final int BASE_PLUGIN_PROJECT_BASE_EXTENSION_CREATION_VALUE = 3;
    /**
     * <code>BASE_PLUGIN_PROJECT_TASKS_CREATION = 4;</code>
     */
    public static final int BASE_PLUGIN_PROJECT_TASKS_CREATION_VALUE = 4;
    /**
     * <code>BASE_PLUGIN_BUILD_FINISHED = 5;</code>
     */
    public static final int BASE_PLUGIN_BUILD_FINISHED_VALUE = 5;
    /**
     * <code>TASK_MANAGER_CREATE_TASKS = 6;</code>
     */
    public static final int TASK_MANAGER_CREATE_TASKS_VALUE = 6;
    /**
     * <code>BASE_PLUGIN_CREATE_ANDROID_TASKS = 7;</code>
     */
    public static final int BASE_PLUGIN_CREATE_ANDROID_TASKS_VALUE = 7;
    /**
     * <code>VARIANT_MANAGER_CREATE_ANDROID_TASKS = 8;</code>
     */
    public static final int VARIANT_MANAGER_CREATE_ANDROID_TASKS_VALUE = 8;
    /**
     * <code>VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT = 9;</code>
     */
    public static final int VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT_VALUE = 9;
    /**
     * <code>VARIANT_MANAGER_CREATE_LINT_TASKS = 10;</code>
     */
    public static final int VARIANT_MANAGER_CREATE_LINT_TASKS_VALUE = 10;
    /**
     * <code>VARIANT_MANAGER_CREATE_TESTS_TASKS = 11;</code>
     */
    public static final int VARIANT_MANAGER_CREATE_TESTS_TASKS_VALUE = 11;
    /**
     * <code>VARIANT_MANAGER_CREATE_VARIANTS = 12;</code>
     */
    public static final int VARIANT_MANAGER_CREATE_VARIANTS_VALUE = 12;
    /**
     * <code>RESOLVE_DEPENDENCIES = 13;</code>
     */
    public static final int RESOLVE_DEPENDENCIES_VALUE = 13;
    /**
     * <pre>
     * span for task execution as reported by Gradle, that's including Gradle's
     * pre and post task activities.
     * </pre>
     *
     * <code>TASK_EXECUTION = 14;</code>
     */
    public static final int TASK_EXECUTION_VALUE = 14;
    /**
     * <code>WORKER_EXECUTION = 15;</code>
     */
    public static final int WORKER_EXECUTION_VALUE = 15;
    /**
     * <code>THREAD_EXECUTION = 16;</code>
     */
    public static final int THREAD_EXECUTION_VALUE = 16;
    /**
     * <code>ARTIFACT_TRANSFORM = 17;</code>
     */
    public static final int ARTIFACT_TRANSFORM_VALUE = 17;
    /**
     * <code>INITIAL_METADATA = 100 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int INITIAL_METADATA_VALUE = 100;
    /**
     * <code>FINAL_METADATA = 101 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FINAL_METADATA_VALUE = 101;
    /**
     * <code>GENERAL_CONFIG = 102;</code>
     */
    public static final int GENERAL_CONFIG_VALUE = 102;
    /**
     * <code>VARIANT_CONFIG = 103;</code>
     */
    public static final int VARIANT_CONFIG_VALUE = 103;
    /**
     * <code>VARIANT_MANAGER_EXTERNAL_NATIVE_CONFIG_VALUES = 104;</code>
     */
    public static final int VARIANT_MANAGER_EXTERNAL_NATIVE_CONFIG_VALUES_VALUE = 104;
    /**
     * <code>APK_METRICS = 105;</code>
     */
    public static final int APK_METRICS_VALUE = 105;
    /**
     * <pre>
     * span for task execution excluding Gradle's pre and post task activities.
     * </pre>
     *
     * <code>TASK_EXECUTION_ALL_PHASES = 200;</code>
     */
    public static final int TASK_EXECUTION_ALL_PHASES_VALUE = 200;
    /**
     * <pre>
     * generic span types for task implementation. Phases are sequential sub
     * parts of the task implementation that can help determine the performance
     * of sub parts of the task implementation.
     * For instance a task spans can look like :
     *
     * &lt;---------------------- TASK_EXECUTION -------------------&gt;
     * &lt;--PRE--&gt;&lt;------- TASK_EXECUTION_ALL_PHASES ----&gt;&lt;--POST--&gt;
     *          &lt;---PHASE_1---&gt;&lt;-PHASE_2-&gt;&lt;--PHASE_3---&gt;
     * </pre>
     *
     * <code>TASK_EXECUTION_PHASE_1 = 201;</code>
     */
    public static final int TASK_EXECUTION_PHASE_1_VALUE = 201;
    /**
     * <code>TASK_EXECUTION_PHASE_2 = 202;</code>
     */
    public static final int TASK_EXECUTION_PHASE_2_VALUE = 202;
    /**
     * <code>TASK_EXECUTION_PHASE_3 = 203;</code>
     */
    public static final int TASK_EXECUTION_PHASE_3_VALUE = 203;
    /**
     * <code>TASK_EXECUTION_PHASE_4 = 204;</code>
     */
    public static final int TASK_EXECUTION_PHASE_4_VALUE = 204;
    /**
     * <code>TASK_EXECUTION_PHASE_5 = 205;</code>
     */
    public static final int TASK_EXECUTION_PHASE_5_VALUE = 205;
    /**
     * <code>TASK_EXECUTION_PHASE_6 = 206;</code>
     */
    public static final int TASK_EXECUTION_PHASE_6_VALUE = 206;
    /**
     * <code>TASK_EXECUTION_PHASE_7 = 207;</code>
     */
    public static final int TASK_EXECUTION_PHASE_7_VALUE = 207;
    /**
     * <code>TASK_EXECUTION_PHASE_8 = 208;</code>
     */
    public static final int TASK_EXECUTION_PHASE_8_VALUE = 208;
    /**
     * <code>TASK_EXECUTION_PHASE_9 = 209;</code>
     */
    public static final int TASK_EXECUTION_PHASE_9_VALUE = 209;
    /**
     * <pre>
     * span for gradle overhead before task execution
     * </pre>
     *
     * <code>GRADLE_PRE_TASK_SPAN = 298;</code>
     */
    public static final int GRADLE_PRE_TASK_SPAN_VALUE = 298;
    /**
     * <pre>
     * span for gradle overhead after task execution
     * </pre>
     *
     * <code>GRADLE_POST_TASK_SPAN = 299;</code>
     */
    public static final int GRADLE_POST_TASK_SPAN_VALUE = 299;
    /**
     * <pre>
     * ApplicationTaskManager per variant tasks.
     * </pre>
     *
     * <code>APP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 1000 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK_VALUE = 1000;
    /**
     * <code>APP_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 1001 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK_VALUE = 1001;
    /**
     * <code>APP_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 1002 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK_VALUE = 1002;
    /**
     * <code>APP_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 1003 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK_VALUE = 1003;
    /**
     * <code>APP_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 1004 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK_VALUE = 1004;
    /**
     * <code>APP_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 1005 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK_VALUE = 1005;
    /**
     * <code>APP_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 1006 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_PROCESS_RES_TASK_VALUE = 1006;
    /**
     * <code>APP_TASK_MANAGER_CREATE_AIDL_TASK = 1007 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_AIDL_TASK_VALUE = 1007;
    /**
     * <code>APP_TASK_MANAGER_CREATE_COMPILE_TASK = 1008 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_COMPILE_TASK_VALUE = 1008;
    /**
     * <code>APP_TASK_MANAGER_CREATE_NDK_TASK = 1009 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_NDK_TASK_VALUE = 1009;
    /**
     * <code>APP_TASK_MANAGER_CREATE_SPLIT_TASK = 1010 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_SPLIT_TASK_VALUE = 1010;
    /**
     * <code>APP_TASK_MANAGER_CREATE_PACKAGING_TASK = 1011 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_PACKAGING_TASK_VALUE = 1011;
    /**
     * <code>APP_TASK_MANAGER_CREATE_PREPROCESS_RESOURCES_TASK = 1012 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_PREPROCESS_RESOURCES_TASK_VALUE = 1012;
    /**
     * <code>APP_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK = 1013 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK_VALUE = 1013;
    /**
     * <code>APP_TASK_MANAGER_CREATE_LINT_TASK = 1014 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_LINT_TASK_VALUE = 1014;
    /**
     * <code>APP_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK = 1015 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK_VALUE = 1015;
    /**
     * <code>APP_TASK_MANAGER_CREATE_SHADER_TASK = 1016 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_SHADER_TASK_VALUE = 1016;
    /**
     * <code>APP_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 1017 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK_VALUE = 1017;
    /**
     * <code>APP_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK = 1018 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int APP_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK_VALUE = 1018;
    /**
     * <pre>
     * LibraryTaskManager per variant tasks.
     * </pre>
     *
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 2000 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK_VALUE = 2000;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 2001 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK_VALUE = 2001;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 2002 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK_VALUE = 2002;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 2003 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK_VALUE = 2003;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 2004 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK_VALUE = 2004;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 2005 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK_VALUE = 2005;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 2006 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_PROCESS_RES_TASK_VALUE = 2006;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_AIDL_TASK = 2007 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_AIDL_TASK_VALUE = 2007;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_COMPILE_TASK = 2008 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_COMPILE_TASK_VALUE = 2008;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_NDK_TASK = 2009 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_NDK_TASK_VALUE = 2009;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_SPLIT_TASK = 2010 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_SPLIT_TASK_VALUE = 2010;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PACKAGING_TASK = 2011 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_PACKAGING_TASK_VALUE = 2011;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_MERGE_PROGUARD_FILE_TASK = 2012 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_MERGE_PROGUARD_FILE_TASK_VALUE = 2012;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_POST_COMPILATION_TASK = 2013 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_POST_COMPILATION_TASK_VALUE = 2013;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PROGUARD_TASK = 2014 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_PROGUARD_TASK_VALUE = 2014;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_PACKAGE_LOCAL_JAR = 2015 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_PACKAGE_LOCAL_JAR_VALUE = 2015;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK = 2016 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK_VALUE = 2016;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_LINT_TASK = 2017 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_LINT_TASK_VALUE = 2017;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_SHADER_TASK = 2018 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_SHADER_TASK_VALUE = 2018;
    /**
     * <code>LIB_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 2019 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int LIB_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK_VALUE = 2019;
    /**
     * <pre>
     * Task execution: Deprecated, use TASK_EXECUTION and
     * GradleTaskExecution#Type instead.
     * Deprecated July 2016.
     * </pre>
     *
     * <code>GENERIC_TASK_EXECUTION = 3000 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int GENERIC_TASK_EXECUTION_VALUE = 3000;
    /**
     * <code>TASK_AIDL_COMPILE = 3001 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_AIDL_COMPILE_VALUE = 3001;
    /**
     * <code>TASK_DELETE = 3002 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_DELETE_VALUE = 3002;
    /**
     * <code>TASK_CHECK_MANIFEST = 3003 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_CHECK_MANIFEST_VALUE = 3003;
    /**
     * <code>TASK_PREPARE_DEPENDENCIES_TASK = 3004 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_PREPARE_DEPENDENCIES_TASK_VALUE = 3004;
    /**
     * <code>TASK_RENDERSCRIPT_COMPILE = 3005 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_RENDERSCRIPT_COMPILE_VALUE = 3005;
    /**
     * <code>TASK_GENERATE_BUILD_CONFIG = 3006 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_GENERATE_BUILD_CONFIG_VALUE = 3006;
    /**
     * <code>TASK_MERGE_ASSETS = 3007 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_MERGE_ASSETS_VALUE = 3007;
    /**
     * <code>TASK_GENERATE_RES_VALUES = 3008 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_GENERATE_RES_VALUES_VALUE = 3008;
    /**
     * <code>TASK_MERGE_RESOURCES = 3009 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_MERGE_RESOURCES_VALUE = 3009;
    /**
     * <code>TASK_MERGE_MANIFESTS = 3010 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_MERGE_MANIFESTS_VALUE = 3010;
    /**
     * <code>TASK_PROCESS_ANDROID_RESOURCES = 3011 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_PROCESS_ANDROID_RESOURCES_VALUE = 3011;
    /**
     * <code>TASK_JAVA_COMPILE = 3012 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_JAVA_COMPILE_VALUE = 3012;
    /**
     * <code>TASK_NDK_COMPILE = 3013 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_NDK_COMPILE_VALUE = 3013;
    /**
     * <code>TASK_PRE_DEX = 3014 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_PRE_DEX_VALUE = 3014;
    /**
     * <code>TASK_DEX = 3015 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_DEX_VALUE = 3015;
    /**
     * <code>TASK_PACKAGE_SPLIT_RES = 3016 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_PACKAGE_SPLIT_RES_VALUE = 3016;
    /**
     * <code>TASK_PROCESS_RESOURCES = 3017 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_PROCESS_RESOURCES_VALUE = 3017;
    /**
     * <code>TASK_VALIDATE_SIGNING_TASK = 3018 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_VALIDATE_SIGNING_TASK_VALUE = 3018;
    /**
     * <code>TASK_PACKAGE_APPLICATION = 3019 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_PACKAGE_APPLICATION_VALUE = 3019;
    /**
     * <code>TASK_SPLIT_ZIP_ALIGN = 3020 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_SPLIT_ZIP_ALIGN_VALUE = 3020;
    /**
     * <code>TASK_ZIP_ALIGN = 3021 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_ZIP_ALIGN_VALUE = 3021;
    /**
     * <code>TASK_COPY = 3022 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_COPY_VALUE = 3022;
    /**
     * <code>TASK_LINT = 3023 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_LINT_VALUE = 3023;
    /**
     * <code>TASK_FILE_VERIFICATION = 3026 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_FILE_VERIFICATION_VALUE = 3026;
    /**
     * <code>TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS_PER_ABI = 3027 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS_PER_ABI_VALUE = 3027;
    /**
     * <code>TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS = 3028 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS_VALUE = 3028;
    /**
     * <pre>
     * Transform execution
     * </pre>
     *
     * <code>TASK_TRANSFORM_PREPARATION = 3024;</code>
     */
    public static final int TASK_TRANSFORM_PREPARATION_VALUE = 3024;
    /**
     * <code>TASK_TRANSFORM = 3025;</code>
     */
    public static final int TASK_TRANSFORM_VALUE = 3025;
    /**
     * <pre>
     * AtomTaskManager per variant tasks.
     * </pre>
     *
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 4000 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK_VALUE = 4000;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 4001 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK_VALUE = 4001;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 4002 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK_VALUE = 4002;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 4003 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK_VALUE = 4003;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 4004 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK_VALUE = 4004;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 4005 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK_VALUE = 4005;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 4006 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_PROCESS_RES_TASK_VALUE = 4006;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_AIDL_TASK = 4007 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_AIDL_TASK_VALUE = 4007;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_SHADER_TASK = 4008 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_SHADER_TASK_VALUE = 4008;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_NDK_TASK = 4009 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_NDK_TASK_VALUE = 4009;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 4010 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK_VALUE = 4010;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK = 4011 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK_VALUE = 4011;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_COMPILE_TASK = 4012 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_COMPILE_TASK_VALUE = 4012;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_BUNDLING_TASK = 4013 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_BUNDLING_TASK_VALUE = 4013;
    /**
     * <code>ATOM_TASK_MANAGER_CREATE_LINT_TASK = 4014 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int ATOM_TASK_MANAGER_CREATE_LINT_TASK_VALUE = 4014;
    /**
     * <pre>
     * InstantAppTaskManager per variant tasks.
     * </pre>
     *
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 5000 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int INSTANTAPP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK_VALUE = 5000;
    /**
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_ATOM_PACKAGING_TASKS = 5001 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int INSTANTAPP_TASK_MANAGER_CREATE_ATOM_PACKAGING_TASKS_VALUE = 5001;
    /**
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 5002 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int INSTANTAPP_TASK_MANAGER_CREATE_PROCESS_RES_TASK_VALUE = 5002;
    /**
     * <code>INSTANTAPP_TASK_MANAGER_CREATE_PACKAGING_TASK = 5003 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int INSTANTAPP_TASK_MANAGER_CREATE_PACKAGING_TASK_VALUE = 5003;
    /**
     * <pre>
     * FeatureTaskManager per variant tasks.
     * </pre>
     *
     * <code>FEATURE_TASK_MANAGER_CREATE_BASE_TASKS = 6000 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_BASE_TASKS_VALUE = 6000;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_NON_BASE_TASKS = 6001 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_NON_BASE_TASKS_VALUE = 6001;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK = 6002 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK_VALUE = 6002;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK = 6003 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK_VALUE = 6003;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK = 6004 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK_VALUE = 6004;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK = 6005 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK_VALUE = 6005;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK = 6006 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK_VALUE = 6006;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK = 6007 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK_VALUE = 6007;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_PROCESS_RES_TASK = 6008 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_PROCESS_RES_TASK_VALUE = 6008;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_AIDL_TASK = 6009 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_AIDL_TASK_VALUE = 6009;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_SHADER_TASK = 6010 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_SHADER_TASK_VALUE = 6010;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_NDK_TASK = 6011 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_NDK_TASK_VALUE = 6011;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK = 6012 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK_VALUE = 6012;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK = 6013 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK_VALUE = 6013;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_COMPILE_TASK = 6014 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_COMPILE_TASK_VALUE = 6014;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK = 6015 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK_VALUE = 6015;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_SPLIT_TASK = 6016 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_SPLIT_TASK_VALUE = 6016;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_PACKAGING_TASK = 6017 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_PACKAGING_TASK_VALUE = 6017;
    /**
     * <code>FEATURE_TASK_MANAGER_CREATE_LINT_TASK = 6018 [deprecated = true];</code>
     */
    @java.lang.Deprecated public static final int FEATURE_TASK_MANAGER_CREATE_LINT_TASK_VALUE = 6018;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExecutionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ExecutionType forNumber(int value) {
      switch (value) {
        case 1: return SOME_RANDOM_PROCESSING;
        case 2: return BASE_PLUGIN_PROJECT_CONFIGURE;
        case 3: return BASE_PLUGIN_PROJECT_BASE_EXTENSION_CREATION;
        case 4: return BASE_PLUGIN_PROJECT_TASKS_CREATION;
        case 5: return BASE_PLUGIN_BUILD_FINISHED;
        case 6: return TASK_MANAGER_CREATE_TASKS;
        case 7: return BASE_PLUGIN_CREATE_ANDROID_TASKS;
        case 8: return VARIANT_MANAGER_CREATE_ANDROID_TASKS;
        case 9: return VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT;
        case 10: return VARIANT_MANAGER_CREATE_LINT_TASKS;
        case 11: return VARIANT_MANAGER_CREATE_TESTS_TASKS;
        case 12: return VARIANT_MANAGER_CREATE_VARIANTS;
        case 13: return RESOLVE_DEPENDENCIES;
        case 14: return TASK_EXECUTION;
        case 15: return WORKER_EXECUTION;
        case 16: return THREAD_EXECUTION;
        case 17: return ARTIFACT_TRANSFORM;
        case 100: return INITIAL_METADATA;
        case 101: return FINAL_METADATA;
        case 102: return GENERAL_CONFIG;
        case 103: return VARIANT_CONFIG;
        case 104: return VARIANT_MANAGER_EXTERNAL_NATIVE_CONFIG_VALUES;
        case 105: return APK_METRICS;
        case 200: return TASK_EXECUTION_ALL_PHASES;
        case 201: return TASK_EXECUTION_PHASE_1;
        case 202: return TASK_EXECUTION_PHASE_2;
        case 203: return TASK_EXECUTION_PHASE_3;
        case 204: return TASK_EXECUTION_PHASE_4;
        case 205: return TASK_EXECUTION_PHASE_5;
        case 206: return TASK_EXECUTION_PHASE_6;
        case 207: return TASK_EXECUTION_PHASE_7;
        case 208: return TASK_EXECUTION_PHASE_8;
        case 209: return TASK_EXECUTION_PHASE_9;
        case 298: return GRADLE_PRE_TASK_SPAN;
        case 299: return GRADLE_POST_TASK_SPAN;
        case 1000: return APP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK;
        case 1001: return APP_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK;
        case 1002: return APP_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK;
        case 1003: return APP_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK;
        case 1004: return APP_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK;
        case 1005: return APP_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK;
        case 1006: return APP_TASK_MANAGER_CREATE_PROCESS_RES_TASK;
        case 1007: return APP_TASK_MANAGER_CREATE_AIDL_TASK;
        case 1008: return APP_TASK_MANAGER_CREATE_COMPILE_TASK;
        case 1009: return APP_TASK_MANAGER_CREATE_NDK_TASK;
        case 1010: return APP_TASK_MANAGER_CREATE_SPLIT_TASK;
        case 1011: return APP_TASK_MANAGER_CREATE_PACKAGING_TASK;
        case 1012: return APP_TASK_MANAGER_CREATE_PREPROCESS_RESOURCES_TASK;
        case 1013: return APP_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK;
        case 1014: return APP_TASK_MANAGER_CREATE_LINT_TASK;
        case 1015: return APP_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK;
        case 1016: return APP_TASK_MANAGER_CREATE_SHADER_TASK;
        case 1017: return APP_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK;
        case 1018: return APP_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK;
        case 2000: return LIB_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK;
        case 2001: return LIB_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK;
        case 2002: return LIB_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK;
        case 2003: return LIB_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK;
        case 2004: return LIB_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK;
        case 2005: return LIB_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK;
        case 2006: return LIB_TASK_MANAGER_CREATE_PROCESS_RES_TASK;
        case 2007: return LIB_TASK_MANAGER_CREATE_AIDL_TASK;
        case 2008: return LIB_TASK_MANAGER_CREATE_COMPILE_TASK;
        case 2009: return LIB_TASK_MANAGER_CREATE_NDK_TASK;
        case 2010: return LIB_TASK_MANAGER_CREATE_SPLIT_TASK;
        case 2011: return LIB_TASK_MANAGER_CREATE_PACKAGING_TASK;
        case 2012: return LIB_TASK_MANAGER_CREATE_MERGE_PROGUARD_FILE_TASK;
        case 2013: return LIB_TASK_MANAGER_CREATE_POST_COMPILATION_TASK;
        case 2014: return LIB_TASK_MANAGER_CREATE_PROGUARD_TASK;
        case 2015: return LIB_TASK_MANAGER_CREATE_PACKAGE_LOCAL_JAR;
        case 2016: return LIB_TASK_MANAGER_CREATE_BACKPORT_RESOURCES_TASK;
        case 2017: return LIB_TASK_MANAGER_CREATE_LINT_TASK;
        case 2018: return LIB_TASK_MANAGER_CREATE_SHADER_TASK;
        case 2019: return LIB_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK;
        case 3000: return GENERIC_TASK_EXECUTION;
        case 3001: return TASK_AIDL_COMPILE;
        case 3002: return TASK_DELETE;
        case 3003: return TASK_CHECK_MANIFEST;
        case 3004: return TASK_PREPARE_DEPENDENCIES_TASK;
        case 3005: return TASK_RENDERSCRIPT_COMPILE;
        case 3006: return TASK_GENERATE_BUILD_CONFIG;
        case 3007: return TASK_MERGE_ASSETS;
        case 3008: return TASK_GENERATE_RES_VALUES;
        case 3009: return TASK_MERGE_RESOURCES;
        case 3010: return TASK_MERGE_MANIFESTS;
        case 3011: return TASK_PROCESS_ANDROID_RESOURCES;
        case 3012: return TASK_JAVA_COMPILE;
        case 3013: return TASK_NDK_COMPILE;
        case 3014: return TASK_PRE_DEX;
        case 3015: return TASK_DEX;
        case 3016: return TASK_PACKAGE_SPLIT_RES;
        case 3017: return TASK_PROCESS_RESOURCES;
        case 3018: return TASK_VALIDATE_SIGNING_TASK;
        case 3019: return TASK_PACKAGE_APPLICATION;
        case 3020: return TASK_SPLIT_ZIP_ALIGN;
        case 3021: return TASK_ZIP_ALIGN;
        case 3022: return TASK_COPY;
        case 3023: return TASK_LINT;
        case 3026: return TASK_FILE_VERIFICATION;
        case 3027: return TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS_PER_ABI;
        case 3028: return TASK_EXTERNAL_NATIVE_BUILD_GENERATE_JSON_PROCESS;
        case 3024: return TASK_TRANSFORM_PREPARATION;
        case 3025: return TASK_TRANSFORM;
        case 4000: return ATOM_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK;
        case 4001: return ATOM_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK;
        case 4002: return ATOM_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK;
        case 4003: return ATOM_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK;
        case 4004: return ATOM_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK;
        case 4005: return ATOM_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK;
        case 4006: return ATOM_TASK_MANAGER_CREATE_PROCESS_RES_TASK;
        case 4007: return ATOM_TASK_MANAGER_CREATE_AIDL_TASK;
        case 4008: return ATOM_TASK_MANAGER_CREATE_SHADER_TASK;
        case 4009: return ATOM_TASK_MANAGER_CREATE_NDK_TASK;
        case 4010: return ATOM_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK;
        case 4011: return ATOM_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK;
        case 4012: return ATOM_TASK_MANAGER_CREATE_COMPILE_TASK;
        case 4013: return ATOM_TASK_MANAGER_CREATE_BUNDLING_TASK;
        case 4014: return ATOM_TASK_MANAGER_CREATE_LINT_TASK;
        case 5000: return INSTANTAPP_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK;
        case 5001: return INSTANTAPP_TASK_MANAGER_CREATE_ATOM_PACKAGING_TASKS;
        case 5002: return INSTANTAPP_TASK_MANAGER_CREATE_PROCESS_RES_TASK;
        case 5003: return INSTANTAPP_TASK_MANAGER_CREATE_PACKAGING_TASK;
        case 6000: return FEATURE_TASK_MANAGER_CREATE_BASE_TASKS;
        case 6001: return FEATURE_TASK_MANAGER_CREATE_NON_BASE_TASKS;
        case 6002: return FEATURE_TASK_MANAGER_CREATE_MERGE_MANIFEST_TASK;
        case 6003: return FEATURE_TASK_MANAGER_CREATE_GENERATE_RES_VALUES_TASK;
        case 6004: return FEATURE_TASK_MANAGER_CREATE_CREATE_RENDERSCRIPT_TASK;
        case 6005: return FEATURE_TASK_MANAGER_CREATE_MERGE_RESOURCES_TASK;
        case 6006: return FEATURE_TASK_MANAGER_CREATE_MERGE_ASSETS_TASK;
        case 6007: return FEATURE_TASK_MANAGER_CREATE_BUILD_CONFIG_TASK;
        case 6008: return FEATURE_TASK_MANAGER_CREATE_PROCESS_RES_TASK;
        case 6009: return FEATURE_TASK_MANAGER_CREATE_AIDL_TASK;
        case 6010: return FEATURE_TASK_MANAGER_CREATE_SHADER_TASK;
        case 6011: return FEATURE_TASK_MANAGER_CREATE_NDK_TASK;
        case 6012: return FEATURE_TASK_MANAGER_CREATE_EXTERNAL_NATIVE_BUILD_TASK;
        case 6013: return FEATURE_TASK_MANAGER_CREATE_MERGE_JNILIBS_FOLDERS_TASK;
        case 6014: return FEATURE_TASK_MANAGER_CREATE_COMPILE_TASK;
        case 6015: return FEATURE_TASK_MANAGER_CREATE_STRIP_NATIVE_LIBRARY_TASK;
        case 6016: return FEATURE_TASK_MANAGER_CREATE_SPLIT_TASK;
        case 6017: return FEATURE_TASK_MANAGER_CREATE_PACKAGING_TASK;
        case 6018: return FEATURE_TASK_MANAGER_CREATE_LINT_TASK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExecutionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExecutionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExecutionType>() {
            public ExecutionType findValueByNumber(int number) {
              return ExecutionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.getDescriptor().getEnumTypes().get(0);
    }

    private static final ExecutionType[] VALUES = values();

    public static ExecutionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExecutionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.GradleBuildProfileSpan.ExecutionType)
  }

  private int bitField0_;
  public static final int ID_FIELD_NUMBER = 1;
  private long id_ = 0L;
  /**
   * <pre>
   * Identifier for this span, created by sequentially allocating IDs to spans
   * as they start. Used only for the parent-child relationship of spans, to
   * show execution that is part of another span.
   * Not stable or meaningful across builds.
   * </pre>
   *
   * <code>optional int64 id = 1;</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Identifier for this span, created by sequentially allocating IDs to spans
   * as they start. Used only for the parent-child relationship of spans, to
   * show execution that is part of another span.
   * Not stable or meaningful across builds.
   * </pre>
   *
   * <code>optional int64 id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public long getId() {
    return id_;
  }

  public static final int PARENT_ID_FIELD_NUMBER = 2;
  private long parentId_ = 0L;
  /**
   * <pre>
   * For nested spans: the id for containing span.
   * See GradleBuildProfileSpan.id.
   * </pre>
   *
   * <code>optional int64 parent_id = 2;</code>
   * @return Whether the parentId field is set.
   */
  @java.lang.Override
  public boolean hasParentId() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * For nested spans: the id for containing span.
   * See GradleBuildProfileSpan.id.
   * </pre>
   *
   * <code>optional int64 parent_id = 2;</code>
   * @return The parentId.
   */
  @java.lang.Override
  public long getParentId() {
    return parentId_;
  }

  public static final int START_TIME_IN_MS_FIELD_NUMBER = 3;
  private long startTimeInMs_ = 0L;
  /**
   * <pre>
   * The start time of this event
   * </pre>
   *
   * <code>optional int64 start_time_in_ms = 3;</code>
   * @return Whether the startTimeInMs field is set.
   */
  @java.lang.Override
  public boolean hasStartTimeInMs() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The start time of this event
   * </pre>
   *
   * <code>optional int64 start_time_in_ms = 3;</code>
   * @return The startTimeInMs.
   */
  @java.lang.Override
  public long getStartTimeInMs() {
    return startTimeInMs_;
  }

  public static final int DURATION_IN_MS_FIELD_NUMBER = 4;
  private long durationInMs_ = 0L;
  /**
   * <pre>
   * The duration of this event. May be zero.
   * </pre>
   *
   * <code>optional int64 duration_in_ms = 4;</code>
   * @return Whether the durationInMs field is set.
   */
  @java.lang.Override
  public boolean hasDurationInMs() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The duration of this event. May be zero.
   * </pre>
   *
   * <code>optional int64 duration_in_ms = 4;</code>
   * @return The durationInMs.
   */
  @java.lang.Override
  public long getDurationInMs() {
    return durationInMs_;
  }

  public static final int TYPE_FIELD_NUMBER = 5;
  private int type_ = 1;
  /**
   * <pre>
   * The type of event recorded
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildProfileSpan.ExecutionType type = 5;</code>
   * @return Whether the type field is set.
   */
  @java.lang.Override public boolean hasType() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The type of event recorded
   * </pre>
   *
   * <code>optional .android_studio.GradleBuildProfileSpan.ExecutionType type = 5;</code>
   * @return The type.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType getType() {
    com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType result = com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType.forNumber(type_);
    return result == null ? com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType.SOME_RANDOM_PROCESSING : result;
  }

  public static final int TRANSFORM_FIELD_NUMBER = 6;
  private com.google.wireless.android.sdk.stats.GradleTransformExecution transform_;
  /**
   * <pre>
   * More informations about the execution of TransformTasks.
   * Only used when executionType is TASK_TRANSFORM_PREPARATION or
   * TASK_TRANSFORM.
   * </pre>
   *
   * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
   * @return Whether the transform field is set.
   */
  @java.lang.Override
  public boolean hasTransform() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * More informations about the execution of TransformTasks.
   * Only used when executionType is TASK_TRANSFORM_PREPARATION or
   * TASK_TRANSFORM.
   * </pre>
   *
   * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
   * @return The transform.
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GradleTransformExecution getTransform() {
    return transform_ == null ? com.google.wireless.android.sdk.stats.GradleTransformExecution.getDefaultInstance() : transform_;
  }
  /**
   * <pre>
   * More informations about the execution of TransformTasks.
   * Only used when executionType is TASK_TRANSFORM_PREPARATION or
   * TASK_TRANSFORM.
   * </pre>
   *
   * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GradleTransformExecutionOrBuilder getTransformOrBuilder() {
    return transform_ == null ? com.google.wireless.android.sdk.stats.GradleTransformExecution.getDefaultInstance() : transform_;
  }

  public static final int TASK_FIELD_NUMBER = 9;
  private com.google.wireless.android.sdk.stats.GradleTaskExecution task_;
  /**
   * <pre>
   * More informations about the execution of Tasks.
   * Only used when executionType is TASK_EXECUTION
   * </pre>
   *
   * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
   * @return Whether the task field is set.
   */
  @java.lang.Override
  public boolean hasTask() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * More informations about the execution of Tasks.
   * Only used when executionType is TASK_EXECUTION
   * </pre>
   *
   * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
   * @return The task.
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GradleTaskExecution getTask() {
    return task_ == null ? com.google.wireless.android.sdk.stats.GradleTaskExecution.getDefaultInstance() : task_;
  }
  /**
   * <pre>
   * More informations about the execution of Tasks.
   * Only used when executionType is TASK_EXECUTION
   * </pre>
   *
   * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GradleTaskExecutionOrBuilder getTaskOrBuilder() {
    return task_ == null ? com.google.wireless.android.sdk.stats.GradleTaskExecution.getDefaultInstance() : task_;
  }

  public static final int PROJECT_FIELD_NUMBER = 7;
  private long project_ = 0L;
  /**
   * <pre>
   * Session id of the GradleBuildProject that this span is part of.
   * The ID is not stable nor meaningful over multiple GradleBuildProfile.
   * See GradleBuildProfile.id
   * </pre>
   *
   * <code>optional int64 project = 7;</code>
   * @return Whether the project field is set.
   */
  @java.lang.Override
  public boolean hasProject() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Session id of the GradleBuildProject that this span is part of.
   * The ID is not stable nor meaningful over multiple GradleBuildProfile.
   * See GradleBuildProfile.id
   * </pre>
   *
   * <code>optional int64 project = 7;</code>
   * @return The project.
   */
  @java.lang.Override
  public long getProject() {
    return project_;
  }

  public static final int VARIANT_FIELD_NUMBER = 8;
  private long variant_ = 0L;
  /**
   * <pre>
   * Session id of the GradleBuildVariant that this span is part of.
   * The ID is not stable nor meaningful over multiple GradleBuildProfile.
   * See GradleBuildVariant.id
   * </pre>
   *
   * <code>optional int64 variant = 8;</code>
   * @return Whether the variant field is set.
   */
  @java.lang.Override
  public boolean hasVariant() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Session id of the GradleBuildVariant that this span is part of.
   * The ID is not stable nor meaningful over multiple GradleBuildProfile.
   * See GradleBuildVariant.id
   * </pre>
   *
   * <code>optional int64 variant = 8;</code>
   * @return The variant.
   */
  @java.lang.Override
  public long getVariant() {
    return variant_;
  }

  public static final int THREAD_ID_FIELD_NUMBER = 10;
  private long threadId_ = 0L;
  /**
   * <pre>
   * Thread that this execution occurs on.
   * Generated by sequentially numbering java threads that do work that is
   * recorded.
   * Will not be populated for async recorded events,
   * such as from the task execution listener.
   * </pre>
   *
   * <code>optional int64 thread_id = 10;</code>
   * @return Whether the threadId field is set.
   */
  @java.lang.Override
  public boolean hasThreadId() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Thread that this execution occurs on.
   * Generated by sequentially numbering java threads that do work that is
   * recorded.
   * Will not be populated for async recorded events,
   * such as from the task execution listener.
   * </pre>
   *
   * <code>optional int64 thread_id = 10;</code>
   * @return The threadId.
   */
  @java.lang.Override
  public long getThreadId() {
    return threadId_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt64(1, id_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt64(2, parentId_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt64(3, startTimeInMs_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeInt64(4, durationInMs_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeEnum(5, type_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeMessage(6, getTransform());
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeInt64(7, project_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeInt64(8, variant_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeMessage(9, getTask());
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeInt64(10, threadId_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, id_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, parentId_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, startTimeInMs_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, durationInMs_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, type_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTransform());
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, project_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, variant_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getTask());
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, threadId_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.GradleBuildProfileSpan)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.GradleBuildProfileSpan other = (com.google.wireless.android.sdk.stats.GradleBuildProfileSpan) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (getId()
          != other.getId()) return false;
    }
    if (hasParentId() != other.hasParentId()) return false;
    if (hasParentId()) {
      if (getParentId()
          != other.getParentId()) return false;
    }
    if (hasStartTimeInMs() != other.hasStartTimeInMs()) return false;
    if (hasStartTimeInMs()) {
      if (getStartTimeInMs()
          != other.getStartTimeInMs()) return false;
    }
    if (hasDurationInMs() != other.hasDurationInMs()) return false;
    if (hasDurationInMs()) {
      if (getDurationInMs()
          != other.getDurationInMs()) return false;
    }
    if (hasType() != other.hasType()) return false;
    if (hasType()) {
      if (type_ != other.type_) return false;
    }
    if (hasTransform() != other.hasTransform()) return false;
    if (hasTransform()) {
      if (!getTransform()
          .equals(other.getTransform())) return false;
    }
    if (hasTask() != other.hasTask()) return false;
    if (hasTask()) {
      if (!getTask()
          .equals(other.getTask())) return false;
    }
    if (hasProject() != other.hasProject()) return false;
    if (hasProject()) {
      if (getProject()
          != other.getProject()) return false;
    }
    if (hasVariant() != other.hasVariant()) return false;
    if (hasVariant()) {
      if (getVariant()
          != other.getVariant()) return false;
    }
    if (hasThreadId() != other.hasThreadId()) return false;
    if (hasThreadId()) {
      if (getThreadId()
          != other.getThreadId()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
    }
    if (hasParentId()) {
      hash = (37 * hash) + PARENT_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getParentId());
    }
    if (hasStartTimeInMs()) {
      hash = (37 * hash) + START_TIME_IN_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTimeInMs());
    }
    if (hasDurationInMs()) {
      hash = (37 * hash) + DURATION_IN_MS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDurationInMs());
    }
    if (hasType()) {
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
    }
    if (hasTransform()) {
      hash = (37 * hash) + TRANSFORM_FIELD_NUMBER;
      hash = (53 * hash) + getTransform().hashCode();
    }
    if (hasTask()) {
      hash = (37 * hash) + TASK_FIELD_NUMBER;
      hash = (53 * hash) + getTask().hashCode();
    }
    if (hasProject()) {
      hash = (37 * hash) + PROJECT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getProject());
    }
    if (hasVariant()) {
      hash = (37 * hash) + VARIANT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getVariant());
    }
    if (hasThreadId()) {
      hash = (37 * hash) + THREAD_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getThreadId());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.GradleBuildProfileSpan prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A single execution span from a build.
   * For example, a task execution or creation of some tasks for a variant.
   * </pre>
   *
   * Protobuf type {@code android_studio.GradleBuildProfileSpan}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.GradleBuildProfileSpan)
      com.google.wireless.android.sdk.stats.GradleBuildProfileSpanOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_GradleBuildProfileSpan_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_GradleBuildProfileSpan_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.class, com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTransformFieldBuilder();
        getTaskFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      id_ = 0L;
      parentId_ = 0L;
      startTimeInMs_ = 0L;
      durationInMs_ = 0L;
      type_ = 1;
      transform_ = null;
      if (transformBuilder_ != null) {
        transformBuilder_.dispose();
        transformBuilder_ = null;
      }
      task_ = null;
      if (taskBuilder_ != null) {
        taskBuilder_.dispose();
        taskBuilder_ = null;
      }
      project_ = 0L;
      variant_ = 0L;
      threadId_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_GradleBuildProfileSpan_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.GradleBuildProfileSpan getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.GradleBuildProfileSpan build() {
      com.google.wireless.android.sdk.stats.GradleBuildProfileSpan result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.GradleBuildProfileSpan buildPartial() {
      com.google.wireless.android.sdk.stats.GradleBuildProfileSpan result = new com.google.wireless.android.sdk.stats.GradleBuildProfileSpan(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.GradleBuildProfileSpan result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.id_ = id_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.parentId_ = parentId_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.startTimeInMs_ = startTimeInMs_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.durationInMs_ = durationInMs_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.type_ = type_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.transform_ = transformBuilder_ == null
            ? transform_
            : transformBuilder_.build();
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.task_ = taskBuilder_ == null
            ? task_
            : taskBuilder_.build();
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.project_ = project_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.variant_ = variant_;
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.threadId_ = threadId_;
        to_bitField0_ |= 0x00000200;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.GradleBuildProfileSpan) {
        return mergeFrom((com.google.wireless.android.sdk.stats.GradleBuildProfileSpan)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.GradleBuildProfileSpan other) {
      if (other == com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.getDefaultInstance()) return this;
      if (other.hasId()) {
        setId(other.getId());
      }
      if (other.hasParentId()) {
        setParentId(other.getParentId());
      }
      if (other.hasStartTimeInMs()) {
        setStartTimeInMs(other.getStartTimeInMs());
      }
      if (other.hasDurationInMs()) {
        setDurationInMs(other.getDurationInMs());
      }
      if (other.hasType()) {
        setType(other.getType());
      }
      if (other.hasTransform()) {
        mergeTransform(other.getTransform());
      }
      if (other.hasTask()) {
        mergeTask(other.getTask());
      }
      if (other.hasProject()) {
        setProject(other.getProject());
      }
      if (other.hasVariant()) {
        setVariant(other.getVariant());
      }
      if (other.hasThreadId()) {
        setThreadId(other.getThreadId());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              id_ = input.readInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              parentId_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              startTimeInMs_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              durationInMs_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType tmpValue =
                  com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(5, tmpRaw);
              } else {
                type_ = tmpRaw;
                bitField0_ |= 0x00000010;
              }
              break;
            } // case 40
            case 50: {
              input.readMessage(
                  getTransformFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 56: {
              project_ = input.readInt64();
              bitField0_ |= 0x00000080;
              break;
            } // case 56
            case 64: {
              variant_ = input.readInt64();
              bitField0_ |= 0x00000100;
              break;
            } // case 64
            case 74: {
              input.readMessage(
                  getTaskFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 74
            case 80: {
              threadId_ = input.readInt64();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long id_ ;
    /**
     * <pre>
     * Identifier for this span, created by sequentially allocating IDs to spans
     * as they start. Used only for the parent-child relationship of spans, to
     * show execution that is part of another span.
     * Not stable or meaningful across builds.
     * </pre>
     *
     * <code>optional int64 id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Identifier for this span, created by sequentially allocating IDs to spans
     * as they start. Used only for the parent-child relationship of spans, to
     * show execution that is part of another span.
     * Not stable or meaningful across builds.
     * </pre>
     *
     * <code>optional int64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }
    /**
     * <pre>
     * Identifier for this span, created by sequentially allocating IDs to spans
     * as they start. Used only for the parent-child relationship of spans, to
     * show execution that is part of another span.
     * Not stable or meaningful across builds.
     * </pre>
     *
     * <code>optional int64 id = 1;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(long value) {

      id_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Identifier for this span, created by sequentially allocating IDs to spans
     * as they start. Used only for the parent-child relationship of spans, to
     * show execution that is part of another span.
     * Not stable or meaningful across builds.
     * </pre>
     *
     * <code>optional int64 id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = 0L;
      onChanged();
      return this;
    }

    private long parentId_ ;
    /**
     * <pre>
     * For nested spans: the id for containing span.
     * See GradleBuildProfileSpan.id.
     * </pre>
     *
     * <code>optional int64 parent_id = 2;</code>
     * @return Whether the parentId field is set.
     */
    @java.lang.Override
    public boolean hasParentId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * For nested spans: the id for containing span.
     * See GradleBuildProfileSpan.id.
     * </pre>
     *
     * <code>optional int64 parent_id = 2;</code>
     * @return The parentId.
     */
    @java.lang.Override
    public long getParentId() {
      return parentId_;
    }
    /**
     * <pre>
     * For nested spans: the id for containing span.
     * See GradleBuildProfileSpan.id.
     * </pre>
     *
     * <code>optional int64 parent_id = 2;</code>
     * @param value The parentId to set.
     * @return This builder for chaining.
     */
    public Builder setParentId(long value) {

      parentId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For nested spans: the id for containing span.
     * See GradleBuildProfileSpan.id.
     * </pre>
     *
     * <code>optional int64 parent_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearParentId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      parentId_ = 0L;
      onChanged();
      return this;
    }

    private long startTimeInMs_ ;
    /**
     * <pre>
     * The start time of this event
     * </pre>
     *
     * <code>optional int64 start_time_in_ms = 3;</code>
     * @return Whether the startTimeInMs field is set.
     */
    @java.lang.Override
    public boolean hasStartTimeInMs() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The start time of this event
     * </pre>
     *
     * <code>optional int64 start_time_in_ms = 3;</code>
     * @return The startTimeInMs.
     */
    @java.lang.Override
    public long getStartTimeInMs() {
      return startTimeInMs_;
    }
    /**
     * <pre>
     * The start time of this event
     * </pre>
     *
     * <code>optional int64 start_time_in_ms = 3;</code>
     * @param value The startTimeInMs to set.
     * @return This builder for chaining.
     */
    public Builder setStartTimeInMs(long value) {

      startTimeInMs_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The start time of this event
     * </pre>
     *
     * <code>optional int64 start_time_in_ms = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartTimeInMs() {
      bitField0_ = (bitField0_ & ~0x00000004);
      startTimeInMs_ = 0L;
      onChanged();
      return this;
    }

    private long durationInMs_ ;
    /**
     * <pre>
     * The duration of this event. May be zero.
     * </pre>
     *
     * <code>optional int64 duration_in_ms = 4;</code>
     * @return Whether the durationInMs field is set.
     */
    @java.lang.Override
    public boolean hasDurationInMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The duration of this event. May be zero.
     * </pre>
     *
     * <code>optional int64 duration_in_ms = 4;</code>
     * @return The durationInMs.
     */
    @java.lang.Override
    public long getDurationInMs() {
      return durationInMs_;
    }
    /**
     * <pre>
     * The duration of this event. May be zero.
     * </pre>
     *
     * <code>optional int64 duration_in_ms = 4;</code>
     * @param value The durationInMs to set.
     * @return This builder for chaining.
     */
    public Builder setDurationInMs(long value) {

      durationInMs_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The duration of this event. May be zero.
     * </pre>
     *
     * <code>optional int64 duration_in_ms = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearDurationInMs() {
      bitField0_ = (bitField0_ & ~0x00000008);
      durationInMs_ = 0L;
      onChanged();
      return this;
    }

    private int type_ = 1;
    /**
     * <pre>
     * The type of event recorded
     * </pre>
     *
     * <code>optional .android_studio.GradleBuildProfileSpan.ExecutionType type = 5;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The type of event recorded
     * </pre>
     *
     * <code>optional .android_studio.GradleBuildProfileSpan.ExecutionType type = 5;</code>
     * @return The type.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType getType() {
      com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType result = com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType.forNumber(type_);
      return result == null ? com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType.SOME_RANDOM_PROCESSING : result;
    }
    /**
     * <pre>
     * The type of event recorded
     * </pre>
     *
     * <code>optional .android_studio.GradleBuildProfileSpan.ExecutionType type = 5;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(com.google.wireless.android.sdk.stats.GradleBuildProfileSpan.ExecutionType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of event recorded
     * </pre>
     *
     * <code>optional .android_studio.GradleBuildProfileSpan.ExecutionType type = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000010);
      type_ = 1;
      onChanged();
      return this;
    }

    private com.google.wireless.android.sdk.stats.GradleTransformExecution transform_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.GradleTransformExecution, com.google.wireless.android.sdk.stats.GradleTransformExecution.Builder, com.google.wireless.android.sdk.stats.GradleTransformExecutionOrBuilder> transformBuilder_;
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     * @return Whether the transform field is set.
     */
    public boolean hasTransform() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     * @return The transform.
     */
    public com.google.wireless.android.sdk.stats.GradleTransformExecution getTransform() {
      if (transformBuilder_ == null) {
        return transform_ == null ? com.google.wireless.android.sdk.stats.GradleTransformExecution.getDefaultInstance() : transform_;
      } else {
        return transformBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    public Builder setTransform(com.google.wireless.android.sdk.stats.GradleTransformExecution value) {
      if (transformBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transform_ = value;
      } else {
        transformBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    public Builder setTransform(
        com.google.wireless.android.sdk.stats.GradleTransformExecution.Builder builderForValue) {
      if (transformBuilder_ == null) {
        transform_ = builderForValue.build();
      } else {
        transformBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    public Builder mergeTransform(com.google.wireless.android.sdk.stats.GradleTransformExecution value) {
      if (transformBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          transform_ != null &&
          transform_ != com.google.wireless.android.sdk.stats.GradleTransformExecution.getDefaultInstance()) {
          getTransformBuilder().mergeFrom(value);
        } else {
          transform_ = value;
        }
      } else {
        transformBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    public Builder clearTransform() {
      bitField0_ = (bitField0_ & ~0x00000020);
      transform_ = null;
      if (transformBuilder_ != null) {
        transformBuilder_.dispose();
        transformBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.GradleTransformExecution.Builder getTransformBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getTransformFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.GradleTransformExecutionOrBuilder getTransformOrBuilder() {
      if (transformBuilder_ != null) {
        return transformBuilder_.getMessageOrBuilder();
      } else {
        return transform_ == null ?
            com.google.wireless.android.sdk.stats.GradleTransformExecution.getDefaultInstance() : transform_;
      }
    }
    /**
     * <pre>
     * More informations about the execution of TransformTasks.
     * Only used when executionType is TASK_TRANSFORM_PREPARATION or
     * TASK_TRANSFORM.
     * </pre>
     *
     * <code>optional .android_studio.GradleTransformExecution transform = 6 [lazy = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.GradleTransformExecution, com.google.wireless.android.sdk.stats.GradleTransformExecution.Builder, com.google.wireless.android.sdk.stats.GradleTransformExecutionOrBuilder> 
        getTransformFieldBuilder() {
      if (transformBuilder_ == null) {
        transformBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.wireless.android.sdk.stats.GradleTransformExecution, com.google.wireless.android.sdk.stats.GradleTransformExecution.Builder, com.google.wireless.android.sdk.stats.GradleTransformExecutionOrBuilder>(
                getTransform(),
                getParentForChildren(),
                isClean());
        transform_ = null;
      }
      return transformBuilder_;
    }

    private com.google.wireless.android.sdk.stats.GradleTaskExecution task_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.GradleTaskExecution, com.google.wireless.android.sdk.stats.GradleTaskExecution.Builder, com.google.wireless.android.sdk.stats.GradleTaskExecutionOrBuilder> taskBuilder_;
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     * @return Whether the task field is set.
     */
    public boolean hasTask() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     * @return The task.
     */
    public com.google.wireless.android.sdk.stats.GradleTaskExecution getTask() {
      if (taskBuilder_ == null) {
        return task_ == null ? com.google.wireless.android.sdk.stats.GradleTaskExecution.getDefaultInstance() : task_;
      } else {
        return taskBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    public Builder setTask(com.google.wireless.android.sdk.stats.GradleTaskExecution value) {
      if (taskBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        task_ = value;
      } else {
        taskBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    public Builder setTask(
        com.google.wireless.android.sdk.stats.GradleTaskExecution.Builder builderForValue) {
      if (taskBuilder_ == null) {
        task_ = builderForValue.build();
      } else {
        taskBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    public Builder mergeTask(com.google.wireless.android.sdk.stats.GradleTaskExecution value) {
      if (taskBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          task_ != null &&
          task_ != com.google.wireless.android.sdk.stats.GradleTaskExecution.getDefaultInstance()) {
          getTaskBuilder().mergeFrom(value);
        } else {
          task_ = value;
        }
      } else {
        taskBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    public Builder clearTask() {
      bitField0_ = (bitField0_ & ~0x00000040);
      task_ = null;
      if (taskBuilder_ != null) {
        taskBuilder_.dispose();
        taskBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.GradleTaskExecution.Builder getTaskBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getTaskFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.GradleTaskExecutionOrBuilder getTaskOrBuilder() {
      if (taskBuilder_ != null) {
        return taskBuilder_.getMessageOrBuilder();
      } else {
        return task_ == null ?
            com.google.wireless.android.sdk.stats.GradleTaskExecution.getDefaultInstance() : task_;
      }
    }
    /**
     * <pre>
     * More informations about the execution of Tasks.
     * Only used when executionType is TASK_EXECUTION
     * </pre>
     *
     * <code>optional .android_studio.GradleTaskExecution task = 9 [lazy = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.GradleTaskExecution, com.google.wireless.android.sdk.stats.GradleTaskExecution.Builder, com.google.wireless.android.sdk.stats.GradleTaskExecutionOrBuilder> 
        getTaskFieldBuilder() {
      if (taskBuilder_ == null) {
        taskBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.wireless.android.sdk.stats.GradleTaskExecution, com.google.wireless.android.sdk.stats.GradleTaskExecution.Builder, com.google.wireless.android.sdk.stats.GradleTaskExecutionOrBuilder>(
                getTask(),
                getParentForChildren(),
                isClean());
        task_ = null;
      }
      return taskBuilder_;
    }

    private long project_ ;
    /**
     * <pre>
     * Session id of the GradleBuildProject that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildProfile.id
     * </pre>
     *
     * <code>optional int64 project = 7;</code>
     * @return Whether the project field is set.
     */
    @java.lang.Override
    public boolean hasProject() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Session id of the GradleBuildProject that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildProfile.id
     * </pre>
     *
     * <code>optional int64 project = 7;</code>
     * @return The project.
     */
    @java.lang.Override
    public long getProject() {
      return project_;
    }
    /**
     * <pre>
     * Session id of the GradleBuildProject that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildProfile.id
     * </pre>
     *
     * <code>optional int64 project = 7;</code>
     * @param value The project to set.
     * @return This builder for chaining.
     */
    public Builder setProject(long value) {

      project_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Session id of the GradleBuildProject that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildProfile.id
     * </pre>
     *
     * <code>optional int64 project = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearProject() {
      bitField0_ = (bitField0_ & ~0x00000080);
      project_ = 0L;
      onChanged();
      return this;
    }

    private long variant_ ;
    /**
     * <pre>
     * Session id of the GradleBuildVariant that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildVariant.id
     * </pre>
     *
     * <code>optional int64 variant = 8;</code>
     * @return Whether the variant field is set.
     */
    @java.lang.Override
    public boolean hasVariant() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Session id of the GradleBuildVariant that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildVariant.id
     * </pre>
     *
     * <code>optional int64 variant = 8;</code>
     * @return The variant.
     */
    @java.lang.Override
    public long getVariant() {
      return variant_;
    }
    /**
     * <pre>
     * Session id of the GradleBuildVariant that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildVariant.id
     * </pre>
     *
     * <code>optional int64 variant = 8;</code>
     * @param value The variant to set.
     * @return This builder for chaining.
     */
    public Builder setVariant(long value) {

      variant_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Session id of the GradleBuildVariant that this span is part of.
     * The ID is not stable nor meaningful over multiple GradleBuildProfile.
     * See GradleBuildVariant.id
     * </pre>
     *
     * <code>optional int64 variant = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearVariant() {
      bitField0_ = (bitField0_ & ~0x00000100);
      variant_ = 0L;
      onChanged();
      return this;
    }

    private long threadId_ ;
    /**
     * <pre>
     * Thread that this execution occurs on.
     * Generated by sequentially numbering java threads that do work that is
     * recorded.
     * Will not be populated for async recorded events,
     * such as from the task execution listener.
     * </pre>
     *
     * <code>optional int64 thread_id = 10;</code>
     * @return Whether the threadId field is set.
     */
    @java.lang.Override
    public boolean hasThreadId() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Thread that this execution occurs on.
     * Generated by sequentially numbering java threads that do work that is
     * recorded.
     * Will not be populated for async recorded events,
     * such as from the task execution listener.
     * </pre>
     *
     * <code>optional int64 thread_id = 10;</code>
     * @return The threadId.
     */
    @java.lang.Override
    public long getThreadId() {
      return threadId_;
    }
    /**
     * <pre>
     * Thread that this execution occurs on.
     * Generated by sequentially numbering java threads that do work that is
     * recorded.
     * Will not be populated for async recorded events,
     * such as from the task execution listener.
     * </pre>
     *
     * <code>optional int64 thread_id = 10;</code>
     * @param value The threadId to set.
     * @return This builder for chaining.
     */
    public Builder setThreadId(long value) {

      threadId_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Thread that this execution occurs on.
     * Generated by sequentially numbering java threads that do work that is
     * recorded.
     * Will not be populated for async recorded events,
     * such as from the task execution listener.
     * </pre>
     *
     * <code>optional int64 thread_id = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearThreadId() {
      bitField0_ = (bitField0_ & ~0x00000200);
      threadId_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.GradleBuildProfileSpan)
  }

  // @@protoc_insertion_point(class_scope:android_studio.GradleBuildProfileSpan)
  private static final com.google.wireless.android.sdk.stats.GradleBuildProfileSpan DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.GradleBuildProfileSpan();
  }

  public static com.google.wireless.android.sdk.stats.GradleBuildProfileSpan getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<GradleBuildProfileSpan>
      PARSER = new com.google.protobuf.AbstractParser<GradleBuildProfileSpan>() {
    @java.lang.Override
    public GradleBuildProfileSpan parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<GradleBuildProfileSpan> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GradleBuildProfileSpan> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GradleBuildProfileSpan getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

