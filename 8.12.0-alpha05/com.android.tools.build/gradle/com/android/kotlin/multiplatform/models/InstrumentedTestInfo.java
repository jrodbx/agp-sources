// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kotlin_multiplatform_android_models.proto

package com.android.kotlin.multiplatform.models;

/**
 * <pre>
 * The info of the instrumented test component of the android kotlin multiplatform target.
 * </pre>
 *
 * Protobuf type {@code InstrumentedTestInfo}
 */
public final class InstrumentedTestInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:InstrumentedTestInfo)
    InstrumentedTestInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InstrumentedTestInfo.newBuilder() to construct.
  private InstrumentedTestInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InstrumentedTestInfo() {
    namespace_ = "";
    testInstrumentationRunner_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InstrumentedTestInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_InstrumentedTestInfo_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetTestInstrumentationRunnerArguments();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_InstrumentedTestInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.android.kotlin.multiplatform.models.InstrumentedTestInfo.class, com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder.class);
  }

  private int bitField0_;
  public static final int NAMESPACE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object namespace_ = "";
  /**
   * <code>optional string namespace = 1;</code>
   * @return Whether the namespace field is set.
   */
  @java.lang.Override
  public boolean hasNamespace() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional string namespace = 1;</code>
   * @return The namespace.
   */
  @java.lang.Override
  public java.lang.String getNamespace() {
    java.lang.Object ref = namespace_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      namespace_ = s;
      return s;
    }
  }
  /**
   * <code>optional string namespace = 1;</code>
   * @return The bytes for namespace.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNamespaceBytes() {
    java.lang.Object ref = namespace_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      namespace_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEST_INSTRUMENTATION_RUNNER_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object testInstrumentationRunner_ = "";
  /**
   * <code>optional string test_instrumentation_runner = 2;</code>
   * @return Whether the testInstrumentationRunner field is set.
   */
  @java.lang.Override
  public boolean hasTestInstrumentationRunner() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>optional string test_instrumentation_runner = 2;</code>
   * @return The testInstrumentationRunner.
   */
  @java.lang.Override
  public java.lang.String getTestInstrumentationRunner() {
    java.lang.Object ref = testInstrumentationRunner_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      testInstrumentationRunner_ = s;
      return s;
    }
  }
  /**
   * <code>optional string test_instrumentation_runner = 2;</code>
   * @return The bytes for testInstrumentationRunner.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTestInstrumentationRunnerBytes() {
    java.lang.Object ref = testInstrumentationRunner_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      testInstrumentationRunner_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEST_INSTRUMENTATION_RUNNER_ARGUMENTS_FIELD_NUMBER = 3;
  private static final class TestInstrumentationRunnerArgumentsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_InstrumentedTestInfo_TestInstrumentationRunnerArgumentsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> testInstrumentationRunnerArguments_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetTestInstrumentationRunnerArguments() {
    if (testInstrumentationRunnerArguments_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          TestInstrumentationRunnerArgumentsDefaultEntryHolder.defaultEntry);
    }
    return testInstrumentationRunnerArguments_;
  }
  public int getTestInstrumentationRunnerArgumentsCount() {
    return internalGetTestInstrumentationRunnerArguments().getMap().size();
  }
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  @java.lang.Override
  public boolean containsTestInstrumentationRunnerArguments(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetTestInstrumentationRunnerArguments().getMap().containsKey(key);
  }
  /**
   * Use {@link #getTestInstrumentationRunnerArgumentsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() {
    return getTestInstrumentationRunnerArgumentsMap();
  }
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArgumentsMap() {
    return internalGetTestInstrumentationRunnerArguments().getMap();
  }
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  @java.lang.Override
  public /* nullable */
java.lang.String getTestInstrumentationRunnerArgumentsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTestInstrumentationRunnerArguments().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  @java.lang.Override
  public java.lang.String getTestInstrumentationRunnerArgumentsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTestInstrumentationRunnerArguments().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int SIGNING_CONFIG_FIELD_NUMBER = 4;
  private com.android.builder.model.proto.ide.SigningConfig signingConfig_;
  /**
   * <pre>
   * The signing config used to sign the test apk.
   * </pre>
   *
   * <code>optional .SigningConfig signing_config = 4;</code>
   * @return Whether the signingConfig field is set.
   */
  @java.lang.Override
  public boolean hasSigningConfig() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The signing config used to sign the test apk.
   * </pre>
   *
   * <code>optional .SigningConfig signing_config = 4;</code>
   * @return The signingConfig.
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.SigningConfig getSigningConfig() {
    return signingConfig_ == null ? com.android.builder.model.proto.ide.SigningConfig.getDefaultInstance() : signingConfig_;
  }
  /**
   * <pre>
   * The signing config used to sign the test apk.
   * </pre>
   *
   * <code>optional .SigningConfig signing_config = 4;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.SigningConfigOrBuilder getSigningConfigOrBuilder() {
    return signingConfig_ == null ? com.android.builder.model.proto.ide.SigningConfig.getDefaultInstance() : signingConfig_;
  }

  public static final int ASSEMBLE_TASK_OUTPUT_LISTING_FILE_FIELD_NUMBER = 5;
  private com.android.builder.model.proto.ide.File assembleTaskOutputListingFile_;
  /**
   * <pre>
   * Returns the absolute path for the listing file that will get updated after each build. The
   * model file will contain deployment related information like applicationId, list of APKs.
   * </pre>
   *
   * <code>optional .File assemble_task_output_listing_file = 5;</code>
   * @return Whether the assembleTaskOutputListingFile field is set.
   */
  @java.lang.Override
  public boolean hasAssembleTaskOutputListingFile() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Returns the absolute path for the listing file that will get updated after each build. The
   * model file will contain deployment related information like applicationId, list of APKs.
   * </pre>
   *
   * <code>optional .File assemble_task_output_listing_file = 5;</code>
   * @return The assembleTaskOutputListingFile.
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.File getAssembleTaskOutputListingFile() {
    return assembleTaskOutputListingFile_ == null ? com.android.builder.model.proto.ide.File.getDefaultInstance() : assembleTaskOutputListingFile_;
  }
  /**
   * <pre>
   * Returns the absolute path for the listing file that will get updated after each build. The
   * model file will contain deployment related information like applicationId, list of APKs.
   * </pre>
   *
   * <code>optional .File assemble_task_output_listing_file = 5;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.FileOrBuilder getAssembleTaskOutputListingFileOrBuilder() {
    return assembleTaskOutputListingFile_ == null ? com.android.builder.model.proto.ide.File.getDefaultInstance() : assembleTaskOutputListingFile_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, namespace_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, testInstrumentationRunner_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetTestInstrumentationRunnerArguments(),
        TestInstrumentationRunnerArgumentsDefaultEntryHolder.defaultEntry,
        3);
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(4, getSigningConfig());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(5, getAssembleTaskOutputListingFile());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, namespace_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, testInstrumentationRunner_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetTestInstrumentationRunnerArguments().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      testInstrumentationRunnerArguments__ = TestInstrumentationRunnerArgumentsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, testInstrumentationRunnerArguments__);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getSigningConfig());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getAssembleTaskOutputListingFile());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.android.kotlin.multiplatform.models.InstrumentedTestInfo)) {
      return super.equals(obj);
    }
    com.android.kotlin.multiplatform.models.InstrumentedTestInfo other = (com.android.kotlin.multiplatform.models.InstrumentedTestInfo) obj;

    if (hasNamespace() != other.hasNamespace()) return false;
    if (hasNamespace()) {
      if (!getNamespace()
          .equals(other.getNamespace())) return false;
    }
    if (hasTestInstrumentationRunner() != other.hasTestInstrumentationRunner()) return false;
    if (hasTestInstrumentationRunner()) {
      if (!getTestInstrumentationRunner()
          .equals(other.getTestInstrumentationRunner())) return false;
    }
    if (!internalGetTestInstrumentationRunnerArguments().equals(
        other.internalGetTestInstrumentationRunnerArguments())) return false;
    if (hasSigningConfig() != other.hasSigningConfig()) return false;
    if (hasSigningConfig()) {
      if (!getSigningConfig()
          .equals(other.getSigningConfig())) return false;
    }
    if (hasAssembleTaskOutputListingFile() != other.hasAssembleTaskOutputListingFile()) return false;
    if (hasAssembleTaskOutputListingFile()) {
      if (!getAssembleTaskOutputListingFile()
          .equals(other.getAssembleTaskOutputListingFile())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNamespace()) {
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
    }
    if (hasTestInstrumentationRunner()) {
      hash = (37 * hash) + TEST_INSTRUMENTATION_RUNNER_FIELD_NUMBER;
      hash = (53 * hash) + getTestInstrumentationRunner().hashCode();
    }
    if (!internalGetTestInstrumentationRunnerArguments().getMap().isEmpty()) {
      hash = (37 * hash) + TEST_INSTRUMENTATION_RUNNER_ARGUMENTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetTestInstrumentationRunnerArguments().hashCode();
    }
    if (hasSigningConfig()) {
      hash = (37 * hash) + SIGNING_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getSigningConfig().hashCode();
    }
    if (hasAssembleTaskOutputListingFile()) {
      hash = (37 * hash) + ASSEMBLE_TASK_OUTPUT_LISTING_FILE_FIELD_NUMBER;
      hash = (53 * hash) + getAssembleTaskOutputListingFile().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.android.kotlin.multiplatform.models.InstrumentedTestInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The info of the instrumented test component of the android kotlin multiplatform target.
   * </pre>
   *
   * Protobuf type {@code InstrumentedTestInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:InstrumentedTestInfo)
      com.android.kotlin.multiplatform.models.InstrumentedTestInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_InstrumentedTestInfo_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetTestInstrumentationRunnerArguments();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableTestInstrumentationRunnerArguments();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_InstrumentedTestInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.kotlin.multiplatform.models.InstrumentedTestInfo.class, com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder.class);
    }

    // Construct using com.android.kotlin.multiplatform.models.InstrumentedTestInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSigningConfigFieldBuilder();
        getAssembleTaskOutputListingFileFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      namespace_ = "";
      testInstrumentationRunner_ = "";
      internalGetMutableTestInstrumentationRunnerArguments().clear();
      signingConfig_ = null;
      if (signingConfigBuilder_ != null) {
        signingConfigBuilder_.dispose();
        signingConfigBuilder_ = null;
      }
      assembleTaskOutputListingFile_ = null;
      if (assembleTaskOutputListingFileBuilder_ != null) {
        assembleTaskOutputListingFileBuilder_.dispose();
        assembleTaskOutputListingFileBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_InstrumentedTestInfo_descriptor;
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.InstrumentedTestInfo getDefaultInstanceForType() {
      return com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.InstrumentedTestInfo build() {
      com.android.kotlin.multiplatform.models.InstrumentedTestInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.InstrumentedTestInfo buildPartial() {
      com.android.kotlin.multiplatform.models.InstrumentedTestInfo result = new com.android.kotlin.multiplatform.models.InstrumentedTestInfo(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.android.kotlin.multiplatform.models.InstrumentedTestInfo result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.namespace_ = namespace_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.testInstrumentationRunner_ = testInstrumentationRunner_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.testInstrumentationRunnerArguments_ = internalGetTestInstrumentationRunnerArguments();
        result.testInstrumentationRunnerArguments_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.signingConfig_ = signingConfigBuilder_ == null
            ? signingConfig_
            : signingConfigBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.assembleTaskOutputListingFile_ = assembleTaskOutputListingFileBuilder_ == null
            ? assembleTaskOutputListingFile_
            : assembleTaskOutputListingFileBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.android.kotlin.multiplatform.models.InstrumentedTestInfo) {
        return mergeFrom((com.android.kotlin.multiplatform.models.InstrumentedTestInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.android.kotlin.multiplatform.models.InstrumentedTestInfo other) {
      if (other == com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance()) return this;
      if (other.hasNamespace()) {
        namespace_ = other.namespace_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasTestInstrumentationRunner()) {
        testInstrumentationRunner_ = other.testInstrumentationRunner_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      internalGetMutableTestInstrumentationRunnerArguments().mergeFrom(
          other.internalGetTestInstrumentationRunnerArguments());
      bitField0_ |= 0x00000004;
      if (other.hasSigningConfig()) {
        mergeSigningConfig(other.getSigningConfig());
      }
      if (other.hasAssembleTaskOutputListingFile()) {
        mergeAssembleTaskOutputListingFile(other.getAssembleTaskOutputListingFile());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              namespace_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              testInstrumentationRunner_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              testInstrumentationRunnerArguments__ = input.readMessage(
                  TestInstrumentationRunnerArgumentsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableTestInstrumentationRunnerArguments().getMutableMap().put(
                  testInstrumentationRunnerArguments__.getKey(), testInstrumentationRunnerArguments__.getValue());
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getSigningConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getAssembleTaskOutputListingFileFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object namespace_ = "";
    /**
     * <code>optional string namespace = 1;</code>
     * @return Whether the namespace field is set.
     */
    public boolean hasNamespace() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @return The namespace.
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @return The bytes for namespace.
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @param value The namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespace(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      namespace_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNamespace() {
      namespace_ = getDefaultInstance().getNamespace();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @param value The bytes for namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      namespace_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object testInstrumentationRunner_ = "";
    /**
     * <code>optional string test_instrumentation_runner = 2;</code>
     * @return Whether the testInstrumentationRunner field is set.
     */
    public boolean hasTestInstrumentationRunner() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional string test_instrumentation_runner = 2;</code>
     * @return The testInstrumentationRunner.
     */
    public java.lang.String getTestInstrumentationRunner() {
      java.lang.Object ref = testInstrumentationRunner_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        testInstrumentationRunner_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string test_instrumentation_runner = 2;</code>
     * @return The bytes for testInstrumentationRunner.
     */
    public com.google.protobuf.ByteString
        getTestInstrumentationRunnerBytes() {
      java.lang.Object ref = testInstrumentationRunner_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        testInstrumentationRunner_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string test_instrumentation_runner = 2;</code>
     * @param value The testInstrumentationRunner to set.
     * @return This builder for chaining.
     */
    public Builder setTestInstrumentationRunner(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      testInstrumentationRunner_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>optional string test_instrumentation_runner = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTestInstrumentationRunner() {
      testInstrumentationRunner_ = getDefaultInstance().getTestInstrumentationRunner();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>optional string test_instrumentation_runner = 2;</code>
     * @param value The bytes for testInstrumentationRunner to set.
     * @return This builder for chaining.
     */
    public Builder setTestInstrumentationRunnerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      testInstrumentationRunner_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> testInstrumentationRunnerArguments_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetTestInstrumentationRunnerArguments() {
      if (testInstrumentationRunnerArguments_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TestInstrumentationRunnerArgumentsDefaultEntryHolder.defaultEntry);
      }
      return testInstrumentationRunnerArguments_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableTestInstrumentationRunnerArguments() {
      if (testInstrumentationRunnerArguments_ == null) {
        testInstrumentationRunnerArguments_ = com.google.protobuf.MapField.newMapField(
            TestInstrumentationRunnerArgumentsDefaultEntryHolder.defaultEntry);
      }
      if (!testInstrumentationRunnerArguments_.isMutable()) {
        testInstrumentationRunnerArguments_ = testInstrumentationRunnerArguments_.copy();
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return testInstrumentationRunnerArguments_;
    }
    public int getTestInstrumentationRunnerArgumentsCount() {
      return internalGetTestInstrumentationRunnerArguments().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    @java.lang.Override
    public boolean containsTestInstrumentationRunnerArguments(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTestInstrumentationRunnerArguments().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTestInstrumentationRunnerArgumentsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() {
      return getTestInstrumentationRunnerArgumentsMap();
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArgumentsMap() {
      return internalGetTestInstrumentationRunnerArguments().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getTestInstrumentationRunnerArgumentsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTestInstrumentationRunnerArguments().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getTestInstrumentationRunnerArgumentsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTestInstrumentationRunnerArguments().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearTestInstrumentationRunnerArguments() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableTestInstrumentationRunnerArguments().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    public Builder removeTestInstrumentationRunnerArguments(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableTestInstrumentationRunnerArguments().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
        getMutableTestInstrumentationRunnerArguments() {
      bitField0_ |= 0x00000004;
      return internalGetMutableTestInstrumentationRunnerArguments().getMutableMap();
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    public Builder putTestInstrumentationRunnerArguments(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableTestInstrumentationRunnerArguments().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
     */
    public Builder putAllTestInstrumentationRunnerArguments(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableTestInstrumentationRunnerArguments().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }

    private com.android.builder.model.proto.ide.SigningConfig signingConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.builder.model.proto.ide.SigningConfig, com.android.builder.model.proto.ide.SigningConfig.Builder, com.android.builder.model.proto.ide.SigningConfigOrBuilder> signingConfigBuilder_;
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     * @return Whether the signingConfig field is set.
     */
    public boolean hasSigningConfig() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     * @return The signingConfig.
     */
    public com.android.builder.model.proto.ide.SigningConfig getSigningConfig() {
      if (signingConfigBuilder_ == null) {
        return signingConfig_ == null ? com.android.builder.model.proto.ide.SigningConfig.getDefaultInstance() : signingConfig_;
      } else {
        return signingConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    public Builder setSigningConfig(com.android.builder.model.proto.ide.SigningConfig value) {
      if (signingConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        signingConfig_ = value;
      } else {
        signingConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    public Builder setSigningConfig(
        com.android.builder.model.proto.ide.SigningConfig.Builder builderForValue) {
      if (signingConfigBuilder_ == null) {
        signingConfig_ = builderForValue.build();
      } else {
        signingConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    public Builder mergeSigningConfig(com.android.builder.model.proto.ide.SigningConfig value) {
      if (signingConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          signingConfig_ != null &&
          signingConfig_ != com.android.builder.model.proto.ide.SigningConfig.getDefaultInstance()) {
          getSigningConfigBuilder().mergeFrom(value);
        } else {
          signingConfig_ = value;
        }
      } else {
        signingConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    public Builder clearSigningConfig() {
      bitField0_ = (bitField0_ & ~0x00000008);
      signingConfig_ = null;
      if (signingConfigBuilder_ != null) {
        signingConfigBuilder_.dispose();
        signingConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    public com.android.builder.model.proto.ide.SigningConfig.Builder getSigningConfigBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getSigningConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    public com.android.builder.model.proto.ide.SigningConfigOrBuilder getSigningConfigOrBuilder() {
      if (signingConfigBuilder_ != null) {
        return signingConfigBuilder_.getMessageOrBuilder();
      } else {
        return signingConfig_ == null ?
            com.android.builder.model.proto.ide.SigningConfig.getDefaultInstance() : signingConfig_;
      }
    }
    /**
     * <pre>
     * The signing config used to sign the test apk.
     * </pre>
     *
     * <code>optional .SigningConfig signing_config = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.builder.model.proto.ide.SigningConfig, com.android.builder.model.proto.ide.SigningConfig.Builder, com.android.builder.model.proto.ide.SigningConfigOrBuilder> 
        getSigningConfigFieldBuilder() {
      if (signingConfigBuilder_ == null) {
        signingConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.builder.model.proto.ide.SigningConfig, com.android.builder.model.proto.ide.SigningConfig.Builder, com.android.builder.model.proto.ide.SigningConfigOrBuilder>(
                getSigningConfig(),
                getParentForChildren(),
                isClean());
        signingConfig_ = null;
      }
      return signingConfigBuilder_;
    }

    private com.android.builder.model.proto.ide.File assembleTaskOutputListingFile_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder> assembleTaskOutputListingFileBuilder_;
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     * @return Whether the assembleTaskOutputListingFile field is set.
     */
    public boolean hasAssembleTaskOutputListingFile() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     * @return The assembleTaskOutputListingFile.
     */
    public com.android.builder.model.proto.ide.File getAssembleTaskOutputListingFile() {
      if (assembleTaskOutputListingFileBuilder_ == null) {
        return assembleTaskOutputListingFile_ == null ? com.android.builder.model.proto.ide.File.getDefaultInstance() : assembleTaskOutputListingFile_;
      } else {
        return assembleTaskOutputListingFileBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    public Builder setAssembleTaskOutputListingFile(com.android.builder.model.proto.ide.File value) {
      if (assembleTaskOutputListingFileBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        assembleTaskOutputListingFile_ = value;
      } else {
        assembleTaskOutputListingFileBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    public Builder setAssembleTaskOutputListingFile(
        com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (assembleTaskOutputListingFileBuilder_ == null) {
        assembleTaskOutputListingFile_ = builderForValue.build();
      } else {
        assembleTaskOutputListingFileBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    public Builder mergeAssembleTaskOutputListingFile(com.android.builder.model.proto.ide.File value) {
      if (assembleTaskOutputListingFileBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          assembleTaskOutputListingFile_ != null &&
          assembleTaskOutputListingFile_ != com.android.builder.model.proto.ide.File.getDefaultInstance()) {
          getAssembleTaskOutputListingFileBuilder().mergeFrom(value);
        } else {
          assembleTaskOutputListingFile_ = value;
        }
      } else {
        assembleTaskOutputListingFileBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    public Builder clearAssembleTaskOutputListingFile() {
      bitField0_ = (bitField0_ & ~0x00000010);
      assembleTaskOutputListingFile_ = null;
      if (assembleTaskOutputListingFileBuilder_ != null) {
        assembleTaskOutputListingFileBuilder_.dispose();
        assembleTaskOutputListingFileBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder getAssembleTaskOutputListingFileBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getAssembleTaskOutputListingFileFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    public com.android.builder.model.proto.ide.FileOrBuilder getAssembleTaskOutputListingFileOrBuilder() {
      if (assembleTaskOutputListingFileBuilder_ != null) {
        return assembleTaskOutputListingFileBuilder_.getMessageOrBuilder();
      } else {
        return assembleTaskOutputListingFile_ == null ?
            com.android.builder.model.proto.ide.File.getDefaultInstance() : assembleTaskOutputListingFile_;
      }
    }
    /**
     * <pre>
     * Returns the absolute path for the listing file that will get updated after each build. The
     * model file will contain deployment related information like applicationId, list of APKs.
     * </pre>
     *
     * <code>optional .File assemble_task_output_listing_file = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder> 
        getAssembleTaskOutputListingFileFieldBuilder() {
      if (assembleTaskOutputListingFileBuilder_ == null) {
        assembleTaskOutputListingFileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder>(
                getAssembleTaskOutputListingFile(),
                getParentForChildren(),
                isClean());
        assembleTaskOutputListingFile_ = null;
      }
      return assembleTaskOutputListingFileBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:InstrumentedTestInfo)
  }

  // @@protoc_insertion_point(class_scope:InstrumentedTestInfo)
  private static final com.android.kotlin.multiplatform.models.InstrumentedTestInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.android.kotlin.multiplatform.models.InstrumentedTestInfo();
  }

  public static com.android.kotlin.multiplatform.models.InstrumentedTestInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InstrumentedTestInfo>
      PARSER = new com.google.protobuf.AbstractParser<InstrumentedTestInfo>() {
    @java.lang.Override
    public InstrumentedTestInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<InstrumentedTestInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InstrumentedTestInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.android.kotlin.multiplatform.models.InstrumentedTestInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

