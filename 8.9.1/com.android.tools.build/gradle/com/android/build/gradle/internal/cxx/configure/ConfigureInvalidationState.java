// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cxx_configure.proto

package com.android.build.gradle.internal.cxx.configure;

/**
 * <pre>
 * Records information about the decision to re-run C++ configuration.
 * </pre>
 *
 * Protobuf type {@code ConfigureInvalidationState}
 */
public final class ConfigureInvalidationState extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ConfigureInvalidationState)
    ConfigureInvalidationStateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConfigureInvalidationState.newBuilder() to construct.
  private ConfigureInvalidationState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConfigureInvalidationState() {
    fingerPrintFile_ = "";
    inputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    requiredOutputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    optionalOutputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    hardConfigureFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    removedSinceFingerPrintsFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    addedSinceFingerPrintsFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    changesToFingerPrintFiles_ = java.util.Collections.emptyList();
    unchangedFingerPrintFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    configureType_ = 0;
    softConfigureReasons_ = java.util.Collections.emptyList();
    hardConfigureReasons_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConfigureInvalidationState();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.android.build.gradle.internal.cxx.configure.CxxConfigure.internal_static_ConfigureInvalidationState_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.android.build.gradle.internal.cxx.configure.CxxConfigure.internal_static_ConfigureInvalidationState_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.class, com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.Builder.class);
  }

  public static final int FORCE_CONFIGURE_FIELD_NUMBER = 1;
  private boolean forceConfigure_ = false;
  /**
   * <pre>
   * ------------------------------------------------------------------------
   * Inputs
   * ------------------------------------------------------------------------
   * Whether a forced-regeneration of C++ configuration phase was requested.
   * </pre>
   *
   * <code>bool force_configure = 1;</code>
   * @return The forceConfigure.
   */
  @java.lang.Override
  public boolean getForceConfigure() {
    return forceConfigure_;
  }

  public static final int FINGER_PRINT_FILE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object fingerPrintFile_ = "";
  /**
   * <pre>
   * File that contains finger print of files as they were after the last
   * configure phase.
   * </pre>
   *
   * <code>string finger_print_file = 2;</code>
   * @return The fingerPrintFile.
   */
  @java.lang.Override
  public java.lang.String getFingerPrintFile() {
    java.lang.Object ref = fingerPrintFile_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      fingerPrintFile_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * File that contains finger print of files as they were after the last
   * configure phase.
   * </pre>
   *
   * <code>string finger_print_file = 2;</code>
   * @return The bytes for fingerPrintFile.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFingerPrintFileBytes() {
    java.lang.Object ref = fingerPrintFile_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      fingerPrintFile_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INPUT_FILES_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList inputFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Inputs to the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string input_files = 3;</code>
   * @return A list containing the inputFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getInputFilesList() {
    return inputFiles_;
  }
  /**
   * <pre>
   * Inputs to the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string input_files = 3;</code>
   * @return The count of inputFiles.
   */
  public int getInputFilesCount() {
    return inputFiles_.size();
  }
  /**
   * <pre>
   * Inputs to the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string input_files = 3;</code>
   * @param index The index of the element to return.
   * @return The inputFiles at the given index.
   */
  public java.lang.String getInputFiles(int index) {
    return inputFiles_.get(index);
  }
  /**
   * <pre>
   * Inputs to the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string input_files = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the inputFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getInputFilesBytes(int index) {
    return inputFiles_.getByteString(index);
  }

  public static final int REQUIRED_OUTPUT_FILES_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList requiredOutputFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Required outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string required_output_files = 4;</code>
   * @return A list containing the requiredOutputFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getRequiredOutputFilesList() {
    return requiredOutputFiles_;
  }
  /**
   * <pre>
   * Required outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string required_output_files = 4;</code>
   * @return The count of requiredOutputFiles.
   */
  public int getRequiredOutputFilesCount() {
    return requiredOutputFiles_.size();
  }
  /**
   * <pre>
   * Required outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string required_output_files = 4;</code>
   * @param index The index of the element to return.
   * @return The requiredOutputFiles at the given index.
   */
  public java.lang.String getRequiredOutputFiles(int index) {
    return requiredOutputFiles_.get(index);
  }
  /**
   * <pre>
   * Required outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string required_output_files = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the requiredOutputFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getRequiredOutputFilesBytes(int index) {
    return requiredOutputFiles_.getByteString(index);
  }

  public static final int OPTIONAL_OUTPUT_FILES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList optionalOutputFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Optional outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string optional_output_files = 5;</code>
   * @return A list containing the optionalOutputFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getOptionalOutputFilesList() {
    return optionalOutputFiles_;
  }
  /**
   * <pre>
   * Optional outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string optional_output_files = 5;</code>
   * @return The count of optionalOutputFiles.
   */
  public int getOptionalOutputFilesCount() {
    return optionalOutputFiles_.size();
  }
  /**
   * <pre>
   * Optional outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string optional_output_files = 5;</code>
   * @param index The index of the element to return.
   * @return The optionalOutputFiles at the given index.
   */
  public java.lang.String getOptionalOutputFiles(int index) {
    return optionalOutputFiles_.get(index);
  }
  /**
   * <pre>
   * Optional outputs of the C++ configuration phase.
   * </pre>
   *
   * <code>repeated string optional_output_files = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the optionalOutputFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getOptionalOutputFilesBytes(int index) {
    return optionalOutputFiles_.getByteString(index);
  }

  public static final int HARD_CONFIGURE_FILES_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList hardConfigureFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Files that, when changed, will cause a complete re-run of C++
   * configuration starting with the deletion of the configuration folder.
   * </pre>
   *
   * <code>repeated string hard_configure_files = 6;</code>
   * @return A list containing the hardConfigureFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getHardConfigureFilesList() {
    return hardConfigureFiles_;
  }
  /**
   * <pre>
   * Files that, when changed, will cause a complete re-run of C++
   * configuration starting with the deletion of the configuration folder.
   * </pre>
   *
   * <code>repeated string hard_configure_files = 6;</code>
   * @return The count of hardConfigureFiles.
   */
  public int getHardConfigureFilesCount() {
    return hardConfigureFiles_.size();
  }
  /**
   * <pre>
   * Files that, when changed, will cause a complete re-run of C++
   * configuration starting with the deletion of the configuration folder.
   * </pre>
   *
   * <code>repeated string hard_configure_files = 6;</code>
   * @param index The index of the element to return.
   * @return The hardConfigureFiles at the given index.
   */
  public java.lang.String getHardConfigureFiles(int index) {
    return hardConfigureFiles_.get(index);
  }
  /**
   * <pre>
   * Files that, when changed, will cause a complete re-run of C++
   * configuration starting with the deletion of the configuration folder.
   * </pre>
   *
   * <code>repeated string hard_configure_files = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the hardConfigureFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getHardConfigureFilesBytes(int index) {
    return hardConfigureFiles_.getByteString(index);
  }

  public static final int FINGER_PRINT_FILE_EXISTED_FIELD_NUMBER = 7;
  private boolean fingerPrintFileExisted_ = false;
  /**
   * <pre>
   * ------------------------------------------------------------------------
   * Derived from inputs on local file system before configure
   * ------------------------------------------------------------------------
   * Whether the finger print file existed (and was valid).
   * </pre>
   *
   * <code>bool finger_print_file_existed = 7;</code>
   * @return The fingerPrintFileExisted.
   */
  @java.lang.Override
  public boolean getFingerPrintFileExisted() {
    return fingerPrintFileExisted_;
  }

  public static final int REMOVED_SINCE_FINGER_PRINTS_FILES_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList removedSinceFingerPrintsFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Files that were listed in fingerprints file last time but not this time.
   * </pre>
   *
   * <code>repeated string removed_since_finger_prints_files = 8;</code>
   * @return A list containing the removedSinceFingerPrintsFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getRemovedSinceFingerPrintsFilesList() {
    return removedSinceFingerPrintsFiles_;
  }
  /**
   * <pre>
   * Files that were listed in fingerprints file last time but not this time.
   * </pre>
   *
   * <code>repeated string removed_since_finger_prints_files = 8;</code>
   * @return The count of removedSinceFingerPrintsFiles.
   */
  public int getRemovedSinceFingerPrintsFilesCount() {
    return removedSinceFingerPrintsFiles_.size();
  }
  /**
   * <pre>
   * Files that were listed in fingerprints file last time but not this time.
   * </pre>
   *
   * <code>repeated string removed_since_finger_prints_files = 8;</code>
   * @param index The index of the element to return.
   * @return The removedSinceFingerPrintsFiles at the given index.
   */
  public java.lang.String getRemovedSinceFingerPrintsFiles(int index) {
    return removedSinceFingerPrintsFiles_.get(index);
  }
  /**
   * <pre>
   * Files that were listed in fingerprints file last time but not this time.
   * </pre>
   *
   * <code>repeated string removed_since_finger_prints_files = 8;</code>
   * @param index The index of the value to return.
   * @return The bytes of the removedSinceFingerPrintsFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getRemovedSinceFingerPrintsFilesBytes(int index) {
    return removedSinceFingerPrintsFiles_.getByteString(index);
  }

  public static final int ADDED_SINCE_FINGER_PRINTS_FILES_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList addedSinceFingerPrintsFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Files that were not listed in fingerprints file last time but are present
   * this time.
   * </pre>
   *
   * <code>repeated string added_since_finger_prints_files = 9;</code>
   * @return A list containing the addedSinceFingerPrintsFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getAddedSinceFingerPrintsFilesList() {
    return addedSinceFingerPrintsFiles_;
  }
  /**
   * <pre>
   * Files that were not listed in fingerprints file last time but are present
   * this time.
   * </pre>
   *
   * <code>repeated string added_since_finger_prints_files = 9;</code>
   * @return The count of addedSinceFingerPrintsFiles.
   */
  public int getAddedSinceFingerPrintsFilesCount() {
    return addedSinceFingerPrintsFiles_.size();
  }
  /**
   * <pre>
   * Files that were not listed in fingerprints file last time but are present
   * this time.
   * </pre>
   *
   * <code>repeated string added_since_finger_prints_files = 9;</code>
   * @param index The index of the element to return.
   * @return The addedSinceFingerPrintsFiles at the given index.
   */
  public java.lang.String getAddedSinceFingerPrintsFiles(int index) {
    return addedSinceFingerPrintsFiles_.get(index);
  }
  /**
   * <pre>
   * Files that were not listed in fingerprints file last time but are present
   * this time.
   * </pre>
   *
   * <code>repeated string added_since_finger_prints_files = 9;</code>
   * @param index The index of the value to return.
   * @return The bytes of the addedSinceFingerPrintsFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getAddedSinceFingerPrintsFilesBytes(int index) {
    return addedSinceFingerPrintsFiles_.getByteString(index);
  }

  public static final int CHANGES_TO_FINGER_PRINT_FILES_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> changesToFingerPrintFiles_;
  /**
   * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
   */
  @java.lang.Override
  public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> getChangesToFingerPrintFilesList() {
    return changesToFingerPrintFiles_;
  }
  /**
   * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
      getChangesToFingerPrintFilesOrBuilderList() {
    return changesToFingerPrintFiles_;
  }
  /**
   * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
   */
  @java.lang.Override
  public int getChangesToFingerPrintFilesCount() {
    return changesToFingerPrintFiles_.size();
  }
  /**
   * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
   */
  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ChangedFile getChangesToFingerPrintFiles(int index) {
    return changesToFingerPrintFiles_.get(index);
  }
  /**
   * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
   */
  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder getChangesToFingerPrintFilesOrBuilder(
      int index) {
    return changesToFingerPrintFiles_.get(index);
  }

  public static final int UNCHANGED_FINGER_PRINT_FILES_FIELD_NUMBER = 11;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList unchangedFingerPrintFiles_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <code>repeated string unchanged_finger_print_files = 11;</code>
   * @return A list containing the unchangedFingerPrintFiles.
   */
  public com.google.protobuf.ProtocolStringList
      getUnchangedFingerPrintFilesList() {
    return unchangedFingerPrintFiles_;
  }
  /**
   * <code>repeated string unchanged_finger_print_files = 11;</code>
   * @return The count of unchangedFingerPrintFiles.
   */
  public int getUnchangedFingerPrintFilesCount() {
    return unchangedFingerPrintFiles_.size();
  }
  /**
   * <code>repeated string unchanged_finger_print_files = 11;</code>
   * @param index The index of the element to return.
   * @return The unchangedFingerPrintFiles at the given index.
   */
  public java.lang.String getUnchangedFingerPrintFiles(int index) {
    return unchangedFingerPrintFiles_.get(index);
  }
  /**
   * <code>repeated string unchanged_finger_print_files = 11;</code>
   * @param index The index of the value to return.
   * @return The bytes of the unchangedFingerPrintFiles at the given index.
   */
  public com.google.protobuf.ByteString
      getUnchangedFingerPrintFilesBytes(int index) {
    return unchangedFingerPrintFiles_.getByteString(index);
  }

  public static final int CONFIGURE_TYPE_FIELD_NUMBER = 12;
  private int configureType_ = 0;
  /**
   * <pre>
   * ------------------------------------------------------------------------
   * Reasons for configure and whether that configure is hard (delete folder)
   * ------------------------------------------------------------------------
   * Whether to configure C/C++ and what type of configure it should be.
   * </pre>
   *
   * <code>.ConfigureType configure_type = 12;</code>
   * @return The enum numeric value on the wire for configureType.
   */
  @java.lang.Override public int getConfigureTypeValue() {
    return configureType_;
  }
  /**
   * <pre>
   * ------------------------------------------------------------------------
   * Reasons for configure and whether that configure is hard (delete folder)
   * ------------------------------------------------------------------------
   * Whether to configure C/C++ and what type of configure it should be.
   * </pre>
   *
   * <code>.ConfigureType configure_type = 12;</code>
   * @return The configureType.
   */
  @java.lang.Override public com.android.build.gradle.internal.cxx.configure.ConfigureType getConfigureType() {
    com.android.build.gradle.internal.cxx.configure.ConfigureType result = com.android.build.gradle.internal.cxx.configure.ConfigureType.forNumber(configureType_);
    return result == null ? com.android.build.gradle.internal.cxx.configure.ConfigureType.UNRECOGNIZED : result;
  }

  public static final int SOFT_CONFIGURE_REASONS_FIELD_NUMBER = 13;
  @SuppressWarnings("serial")
  private java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> softConfigureReasons_;
  /**
   * <pre>
   * List of reasons to rerun configure C++.
   * </pre>
   *
   * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
   */
  @java.lang.Override
  public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> getSoftConfigureReasonsList() {
    return softConfigureReasons_;
  }
  /**
   * <pre>
   * List of reasons to rerun configure C++.
   * </pre>
   *
   * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
      getSoftConfigureReasonsOrBuilderList() {
    return softConfigureReasons_;
  }
  /**
   * <pre>
   * List of reasons to rerun configure C++.
   * </pre>
   *
   * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
   */
  @java.lang.Override
  public int getSoftConfigureReasonsCount() {
    return softConfigureReasons_.size();
  }
  /**
   * <pre>
   * List of reasons to rerun configure C++.
   * </pre>
   *
   * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
   */
  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ChangedFile getSoftConfigureReasons(int index) {
    return softConfigureReasons_.get(index);
  }
  /**
   * <pre>
   * List of reasons to rerun configure C++.
   * </pre>
   *
   * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
   */
  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder getSoftConfigureReasonsOrBuilder(
      int index) {
    return softConfigureReasons_.get(index);
  }

  public static final int HARD_CONFIGURE_REASONS_FIELD_NUMBER = 14;
  @SuppressWarnings("serial")
  private java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> hardConfigureReasons_;
  /**
   * <pre>
   * List of reasons that it should be a hard configure.
   * </pre>
   *
   * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
   */
  @java.lang.Override
  public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> getHardConfigureReasonsList() {
    return hardConfigureReasons_;
  }
  /**
   * <pre>
   * List of reasons that it should be a hard configure.
   * </pre>
   *
   * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
      getHardConfigureReasonsOrBuilderList() {
    return hardConfigureReasons_;
  }
  /**
   * <pre>
   * List of reasons that it should be a hard configure.
   * </pre>
   *
   * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
   */
  @java.lang.Override
  public int getHardConfigureReasonsCount() {
    return hardConfigureReasons_.size();
  }
  /**
   * <pre>
   * List of reasons that it should be a hard configure.
   * </pre>
   *
   * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
   */
  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ChangedFile getHardConfigureReasons(int index) {
    return hardConfigureReasons_.get(index);
  }
  /**
   * <pre>
   * List of reasons that it should be a hard configure.
   * </pre>
   *
   * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
   */
  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder getHardConfigureReasonsOrBuilder(
      int index) {
    return hardConfigureReasons_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (forceConfigure_ != false) {
      output.writeBool(1, forceConfigure_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fingerPrintFile_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, fingerPrintFile_);
    }
    for (int i = 0; i < inputFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, inputFiles_.getRaw(i));
    }
    for (int i = 0; i < requiredOutputFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, requiredOutputFiles_.getRaw(i));
    }
    for (int i = 0; i < optionalOutputFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, optionalOutputFiles_.getRaw(i));
    }
    for (int i = 0; i < hardConfigureFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, hardConfigureFiles_.getRaw(i));
    }
    if (fingerPrintFileExisted_ != false) {
      output.writeBool(7, fingerPrintFileExisted_);
    }
    for (int i = 0; i < removedSinceFingerPrintsFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, removedSinceFingerPrintsFiles_.getRaw(i));
    }
    for (int i = 0; i < addedSinceFingerPrintsFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, addedSinceFingerPrintsFiles_.getRaw(i));
    }
    for (int i = 0; i < changesToFingerPrintFiles_.size(); i++) {
      output.writeMessage(10, changesToFingerPrintFiles_.get(i));
    }
    for (int i = 0; i < unchangedFingerPrintFiles_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, unchangedFingerPrintFiles_.getRaw(i));
    }
    if (configureType_ != com.android.build.gradle.internal.cxx.configure.ConfigureType.UNKNOWN_CONFIGURE_TYPE.getNumber()) {
      output.writeEnum(12, configureType_);
    }
    for (int i = 0; i < softConfigureReasons_.size(); i++) {
      output.writeMessage(13, softConfigureReasons_.get(i));
    }
    for (int i = 0; i < hardConfigureReasons_.size(); i++) {
      output.writeMessage(14, hardConfigureReasons_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (forceConfigure_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, forceConfigure_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(fingerPrintFile_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, fingerPrintFile_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < inputFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(inputFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getInputFilesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < requiredOutputFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(requiredOutputFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getRequiredOutputFilesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < optionalOutputFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(optionalOutputFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getOptionalOutputFilesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < hardConfigureFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(hardConfigureFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getHardConfigureFilesList().size();
    }
    if (fingerPrintFileExisted_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, fingerPrintFileExisted_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < removedSinceFingerPrintsFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(removedSinceFingerPrintsFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getRemovedSinceFingerPrintsFilesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < addedSinceFingerPrintsFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(addedSinceFingerPrintsFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getAddedSinceFingerPrintsFilesList().size();
    }
    for (int i = 0; i < changesToFingerPrintFiles_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, changesToFingerPrintFiles_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < unchangedFingerPrintFiles_.size(); i++) {
        dataSize += computeStringSizeNoTag(unchangedFingerPrintFiles_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getUnchangedFingerPrintFilesList().size();
    }
    if (configureType_ != com.android.build.gradle.internal.cxx.configure.ConfigureType.UNKNOWN_CONFIGURE_TYPE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(12, configureType_);
    }
    for (int i = 0; i < softConfigureReasons_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, softConfigureReasons_.get(i));
    }
    for (int i = 0; i < hardConfigureReasons_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, hardConfigureReasons_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState)) {
      return super.equals(obj);
    }
    com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState other = (com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState) obj;

    if (getForceConfigure()
        != other.getForceConfigure()) return false;
    if (!getFingerPrintFile()
        .equals(other.getFingerPrintFile())) return false;
    if (!getInputFilesList()
        .equals(other.getInputFilesList())) return false;
    if (!getRequiredOutputFilesList()
        .equals(other.getRequiredOutputFilesList())) return false;
    if (!getOptionalOutputFilesList()
        .equals(other.getOptionalOutputFilesList())) return false;
    if (!getHardConfigureFilesList()
        .equals(other.getHardConfigureFilesList())) return false;
    if (getFingerPrintFileExisted()
        != other.getFingerPrintFileExisted()) return false;
    if (!getRemovedSinceFingerPrintsFilesList()
        .equals(other.getRemovedSinceFingerPrintsFilesList())) return false;
    if (!getAddedSinceFingerPrintsFilesList()
        .equals(other.getAddedSinceFingerPrintsFilesList())) return false;
    if (!getChangesToFingerPrintFilesList()
        .equals(other.getChangesToFingerPrintFilesList())) return false;
    if (!getUnchangedFingerPrintFilesList()
        .equals(other.getUnchangedFingerPrintFilesList())) return false;
    if (configureType_ != other.configureType_) return false;
    if (!getSoftConfigureReasonsList()
        .equals(other.getSoftConfigureReasonsList())) return false;
    if (!getHardConfigureReasonsList()
        .equals(other.getHardConfigureReasonsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FORCE_CONFIGURE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getForceConfigure());
    hash = (37 * hash) + FINGER_PRINT_FILE_FIELD_NUMBER;
    hash = (53 * hash) + getFingerPrintFile().hashCode();
    if (getInputFilesCount() > 0) {
      hash = (37 * hash) + INPUT_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getInputFilesList().hashCode();
    }
    if (getRequiredOutputFilesCount() > 0) {
      hash = (37 * hash) + REQUIRED_OUTPUT_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getRequiredOutputFilesList().hashCode();
    }
    if (getOptionalOutputFilesCount() > 0) {
      hash = (37 * hash) + OPTIONAL_OUTPUT_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getOptionalOutputFilesList().hashCode();
    }
    if (getHardConfigureFilesCount() > 0) {
      hash = (37 * hash) + HARD_CONFIGURE_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getHardConfigureFilesList().hashCode();
    }
    hash = (37 * hash) + FINGER_PRINT_FILE_EXISTED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getFingerPrintFileExisted());
    if (getRemovedSinceFingerPrintsFilesCount() > 0) {
      hash = (37 * hash) + REMOVED_SINCE_FINGER_PRINTS_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getRemovedSinceFingerPrintsFilesList().hashCode();
    }
    if (getAddedSinceFingerPrintsFilesCount() > 0) {
      hash = (37 * hash) + ADDED_SINCE_FINGER_PRINTS_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getAddedSinceFingerPrintsFilesList().hashCode();
    }
    if (getChangesToFingerPrintFilesCount() > 0) {
      hash = (37 * hash) + CHANGES_TO_FINGER_PRINT_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getChangesToFingerPrintFilesList().hashCode();
    }
    if (getUnchangedFingerPrintFilesCount() > 0) {
      hash = (37 * hash) + UNCHANGED_FINGER_PRINT_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getUnchangedFingerPrintFilesList().hashCode();
    }
    hash = (37 * hash) + CONFIGURE_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + configureType_;
    if (getSoftConfigureReasonsCount() > 0) {
      hash = (37 * hash) + SOFT_CONFIGURE_REASONS_FIELD_NUMBER;
      hash = (53 * hash) + getSoftConfigureReasonsList().hashCode();
    }
    if (getHardConfigureReasonsCount() > 0) {
      hash = (37 * hash) + HARD_CONFIGURE_REASONS_FIELD_NUMBER;
      hash = (53 * hash) + getHardConfigureReasonsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Records information about the decision to re-run C++ configuration.
   * </pre>
   *
   * Protobuf type {@code ConfigureInvalidationState}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ConfigureInvalidationState)
      com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationStateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.build.gradle.internal.cxx.configure.CxxConfigure.internal_static_ConfigureInvalidationState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.build.gradle.internal.cxx.configure.CxxConfigure.internal_static_ConfigureInvalidationState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.class, com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.Builder.class);
    }

    // Construct using com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      forceConfigure_ = false;
      fingerPrintFile_ = "";
      inputFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      requiredOutputFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      optionalOutputFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      hardConfigureFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      fingerPrintFileExisted_ = false;
      removedSinceFingerPrintsFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      addedSinceFingerPrintsFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      if (changesToFingerPrintFilesBuilder_ == null) {
        changesToFingerPrintFiles_ = java.util.Collections.emptyList();
      } else {
        changesToFingerPrintFiles_ = null;
        changesToFingerPrintFilesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000200);
      unchangedFingerPrintFiles_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      configureType_ = 0;
      if (softConfigureReasonsBuilder_ == null) {
        softConfigureReasons_ = java.util.Collections.emptyList();
      } else {
        softConfigureReasons_ = null;
        softConfigureReasonsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00001000);
      if (hardConfigureReasonsBuilder_ == null) {
        hardConfigureReasons_ = java.util.Collections.emptyList();
      } else {
        hardConfigureReasons_ = null;
        hardConfigureReasonsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00002000);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.android.build.gradle.internal.cxx.configure.CxxConfigure.internal_static_ConfigureInvalidationState_descriptor;
    }

    @java.lang.Override
    public com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState getDefaultInstanceForType() {
      return com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.getDefaultInstance();
    }

    @java.lang.Override
    public com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState build() {
      com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState buildPartial() {
      com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState result = new com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState result) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0)) {
          changesToFingerPrintFiles_ = java.util.Collections.unmodifiableList(changesToFingerPrintFiles_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.changesToFingerPrintFiles_ = changesToFingerPrintFiles_;
      } else {
        result.changesToFingerPrintFiles_ = changesToFingerPrintFilesBuilder_.build();
      }
      if (softConfigureReasonsBuilder_ == null) {
        if (((bitField0_ & 0x00001000) != 0)) {
          softConfigureReasons_ = java.util.Collections.unmodifiableList(softConfigureReasons_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.softConfigureReasons_ = softConfigureReasons_;
      } else {
        result.softConfigureReasons_ = softConfigureReasonsBuilder_.build();
      }
      if (hardConfigureReasonsBuilder_ == null) {
        if (((bitField0_ & 0x00002000) != 0)) {
          hardConfigureReasons_ = java.util.Collections.unmodifiableList(hardConfigureReasons_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.hardConfigureReasons_ = hardConfigureReasons_;
      } else {
        result.hardConfigureReasons_ = hardConfigureReasonsBuilder_.build();
      }
    }

    private void buildPartial0(com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.forceConfigure_ = forceConfigure_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.fingerPrintFile_ = fingerPrintFile_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        inputFiles_.makeImmutable();
        result.inputFiles_ = inputFiles_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        requiredOutputFiles_.makeImmutable();
        result.requiredOutputFiles_ = requiredOutputFiles_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        optionalOutputFiles_.makeImmutable();
        result.optionalOutputFiles_ = optionalOutputFiles_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        hardConfigureFiles_.makeImmutable();
        result.hardConfigureFiles_ = hardConfigureFiles_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.fingerPrintFileExisted_ = fingerPrintFileExisted_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        removedSinceFingerPrintsFiles_.makeImmutable();
        result.removedSinceFingerPrintsFiles_ = removedSinceFingerPrintsFiles_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        addedSinceFingerPrintsFiles_.makeImmutable();
        result.addedSinceFingerPrintsFiles_ = addedSinceFingerPrintsFiles_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        unchangedFingerPrintFiles_.makeImmutable();
        result.unchangedFingerPrintFiles_ = unchangedFingerPrintFiles_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.configureType_ = configureType_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState) {
        return mergeFrom((com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState other) {
      if (other == com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState.getDefaultInstance()) return this;
      if (other.getForceConfigure() != false) {
        setForceConfigure(other.getForceConfigure());
      }
      if (!other.getFingerPrintFile().isEmpty()) {
        fingerPrintFile_ = other.fingerPrintFile_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.inputFiles_.isEmpty()) {
        if (inputFiles_.isEmpty()) {
          inputFiles_ = other.inputFiles_;
          bitField0_ |= 0x00000004;
        } else {
          ensureInputFilesIsMutable();
          inputFiles_.addAll(other.inputFiles_);
        }
        onChanged();
      }
      if (!other.requiredOutputFiles_.isEmpty()) {
        if (requiredOutputFiles_.isEmpty()) {
          requiredOutputFiles_ = other.requiredOutputFiles_;
          bitField0_ |= 0x00000008;
        } else {
          ensureRequiredOutputFilesIsMutable();
          requiredOutputFiles_.addAll(other.requiredOutputFiles_);
        }
        onChanged();
      }
      if (!other.optionalOutputFiles_.isEmpty()) {
        if (optionalOutputFiles_.isEmpty()) {
          optionalOutputFiles_ = other.optionalOutputFiles_;
          bitField0_ |= 0x00000010;
        } else {
          ensureOptionalOutputFilesIsMutable();
          optionalOutputFiles_.addAll(other.optionalOutputFiles_);
        }
        onChanged();
      }
      if (!other.hardConfigureFiles_.isEmpty()) {
        if (hardConfigureFiles_.isEmpty()) {
          hardConfigureFiles_ = other.hardConfigureFiles_;
          bitField0_ |= 0x00000020;
        } else {
          ensureHardConfigureFilesIsMutable();
          hardConfigureFiles_.addAll(other.hardConfigureFiles_);
        }
        onChanged();
      }
      if (other.getFingerPrintFileExisted() != false) {
        setFingerPrintFileExisted(other.getFingerPrintFileExisted());
      }
      if (!other.removedSinceFingerPrintsFiles_.isEmpty()) {
        if (removedSinceFingerPrintsFiles_.isEmpty()) {
          removedSinceFingerPrintsFiles_ = other.removedSinceFingerPrintsFiles_;
          bitField0_ |= 0x00000080;
        } else {
          ensureRemovedSinceFingerPrintsFilesIsMutable();
          removedSinceFingerPrintsFiles_.addAll(other.removedSinceFingerPrintsFiles_);
        }
        onChanged();
      }
      if (!other.addedSinceFingerPrintsFiles_.isEmpty()) {
        if (addedSinceFingerPrintsFiles_.isEmpty()) {
          addedSinceFingerPrintsFiles_ = other.addedSinceFingerPrintsFiles_;
          bitField0_ |= 0x00000100;
        } else {
          ensureAddedSinceFingerPrintsFilesIsMutable();
          addedSinceFingerPrintsFiles_.addAll(other.addedSinceFingerPrintsFiles_);
        }
        onChanged();
      }
      if (changesToFingerPrintFilesBuilder_ == null) {
        if (!other.changesToFingerPrintFiles_.isEmpty()) {
          if (changesToFingerPrintFiles_.isEmpty()) {
            changesToFingerPrintFiles_ = other.changesToFingerPrintFiles_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureChangesToFingerPrintFilesIsMutable();
            changesToFingerPrintFiles_.addAll(other.changesToFingerPrintFiles_);
          }
          onChanged();
        }
      } else {
        if (!other.changesToFingerPrintFiles_.isEmpty()) {
          if (changesToFingerPrintFilesBuilder_.isEmpty()) {
            changesToFingerPrintFilesBuilder_.dispose();
            changesToFingerPrintFilesBuilder_ = null;
            changesToFingerPrintFiles_ = other.changesToFingerPrintFiles_;
            bitField0_ = (bitField0_ & ~0x00000200);
            changesToFingerPrintFilesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getChangesToFingerPrintFilesFieldBuilder() : null;
          } else {
            changesToFingerPrintFilesBuilder_.addAllMessages(other.changesToFingerPrintFiles_);
          }
        }
      }
      if (!other.unchangedFingerPrintFiles_.isEmpty()) {
        if (unchangedFingerPrintFiles_.isEmpty()) {
          unchangedFingerPrintFiles_ = other.unchangedFingerPrintFiles_;
          bitField0_ |= 0x00000400;
        } else {
          ensureUnchangedFingerPrintFilesIsMutable();
          unchangedFingerPrintFiles_.addAll(other.unchangedFingerPrintFiles_);
        }
        onChanged();
      }
      if (other.configureType_ != 0) {
        setConfigureTypeValue(other.getConfigureTypeValue());
      }
      if (softConfigureReasonsBuilder_ == null) {
        if (!other.softConfigureReasons_.isEmpty()) {
          if (softConfigureReasons_.isEmpty()) {
            softConfigureReasons_ = other.softConfigureReasons_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureSoftConfigureReasonsIsMutable();
            softConfigureReasons_.addAll(other.softConfigureReasons_);
          }
          onChanged();
        }
      } else {
        if (!other.softConfigureReasons_.isEmpty()) {
          if (softConfigureReasonsBuilder_.isEmpty()) {
            softConfigureReasonsBuilder_.dispose();
            softConfigureReasonsBuilder_ = null;
            softConfigureReasons_ = other.softConfigureReasons_;
            bitField0_ = (bitField0_ & ~0x00001000);
            softConfigureReasonsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSoftConfigureReasonsFieldBuilder() : null;
          } else {
            softConfigureReasonsBuilder_.addAllMessages(other.softConfigureReasons_);
          }
        }
      }
      if (hardConfigureReasonsBuilder_ == null) {
        if (!other.hardConfigureReasons_.isEmpty()) {
          if (hardConfigureReasons_.isEmpty()) {
            hardConfigureReasons_ = other.hardConfigureReasons_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureHardConfigureReasonsIsMutable();
            hardConfigureReasons_.addAll(other.hardConfigureReasons_);
          }
          onChanged();
        }
      } else {
        if (!other.hardConfigureReasons_.isEmpty()) {
          if (hardConfigureReasonsBuilder_.isEmpty()) {
            hardConfigureReasonsBuilder_.dispose();
            hardConfigureReasonsBuilder_ = null;
            hardConfigureReasons_ = other.hardConfigureReasons_;
            bitField0_ = (bitField0_ & ~0x00002000);
            hardConfigureReasonsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHardConfigureReasonsFieldBuilder() : null;
          } else {
            hardConfigureReasonsBuilder_.addAllMessages(other.hardConfigureReasons_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              forceConfigure_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              fingerPrintFile_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureInputFilesIsMutable();
              inputFiles_.add(s);
              break;
            } // case 26
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureRequiredOutputFilesIsMutable();
              requiredOutputFiles_.add(s);
              break;
            } // case 34
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureOptionalOutputFilesIsMutable();
              optionalOutputFiles_.add(s);
              break;
            } // case 42
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureHardConfigureFilesIsMutable();
              hardConfigureFiles_.add(s);
              break;
            } // case 50
            case 56: {
              fingerPrintFileExisted_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureRemovedSinceFingerPrintsFilesIsMutable();
              removedSinceFingerPrintsFiles_.add(s);
              break;
            } // case 66
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureAddedSinceFingerPrintsFilesIsMutable();
              addedSinceFingerPrintsFiles_.add(s);
              break;
            } // case 74
            case 82: {
              com.android.build.gradle.internal.cxx.configure.ChangedFile m =
                  input.readMessage(
                      com.android.build.gradle.internal.cxx.configure.ChangedFile.parser(),
                      extensionRegistry);
              if (changesToFingerPrintFilesBuilder_ == null) {
                ensureChangesToFingerPrintFilesIsMutable();
                changesToFingerPrintFiles_.add(m);
              } else {
                changesToFingerPrintFilesBuilder_.addMessage(m);
              }
              break;
            } // case 82
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureUnchangedFingerPrintFilesIsMutable();
              unchangedFingerPrintFiles_.add(s);
              break;
            } // case 90
            case 96: {
              configureType_ = input.readEnum();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            case 106: {
              com.android.build.gradle.internal.cxx.configure.ChangedFile m =
                  input.readMessage(
                      com.android.build.gradle.internal.cxx.configure.ChangedFile.parser(),
                      extensionRegistry);
              if (softConfigureReasonsBuilder_ == null) {
                ensureSoftConfigureReasonsIsMutable();
                softConfigureReasons_.add(m);
              } else {
                softConfigureReasonsBuilder_.addMessage(m);
              }
              break;
            } // case 106
            case 114: {
              com.android.build.gradle.internal.cxx.configure.ChangedFile m =
                  input.readMessage(
                      com.android.build.gradle.internal.cxx.configure.ChangedFile.parser(),
                      extensionRegistry);
              if (hardConfigureReasonsBuilder_ == null) {
                ensureHardConfigureReasonsIsMutable();
                hardConfigureReasons_.add(m);
              } else {
                hardConfigureReasonsBuilder_.addMessage(m);
              }
              break;
            } // case 114
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean forceConfigure_ ;
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Inputs
     * ------------------------------------------------------------------------
     * Whether a forced-regeneration of C++ configuration phase was requested.
     * </pre>
     *
     * <code>bool force_configure = 1;</code>
     * @return The forceConfigure.
     */
    @java.lang.Override
    public boolean getForceConfigure() {
      return forceConfigure_;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Inputs
     * ------------------------------------------------------------------------
     * Whether a forced-regeneration of C++ configuration phase was requested.
     * </pre>
     *
     * <code>bool force_configure = 1;</code>
     * @param value The forceConfigure to set.
     * @return This builder for chaining.
     */
    public Builder setForceConfigure(boolean value) {

      forceConfigure_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Inputs
     * ------------------------------------------------------------------------
     * Whether a forced-regeneration of C++ configuration phase was requested.
     * </pre>
     *
     * <code>bool force_configure = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearForceConfigure() {
      bitField0_ = (bitField0_ & ~0x00000001);
      forceConfigure_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object fingerPrintFile_ = "";
    /**
     * <pre>
     * File that contains finger print of files as they were after the last
     * configure phase.
     * </pre>
     *
     * <code>string finger_print_file = 2;</code>
     * @return The fingerPrintFile.
     */
    public java.lang.String getFingerPrintFile() {
      java.lang.Object ref = fingerPrintFile_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fingerPrintFile_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * File that contains finger print of files as they were after the last
     * configure phase.
     * </pre>
     *
     * <code>string finger_print_file = 2;</code>
     * @return The bytes for fingerPrintFile.
     */
    public com.google.protobuf.ByteString
        getFingerPrintFileBytes() {
      java.lang.Object ref = fingerPrintFile_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fingerPrintFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * File that contains finger print of files as they were after the last
     * configure phase.
     * </pre>
     *
     * <code>string finger_print_file = 2;</code>
     * @param value The fingerPrintFile to set.
     * @return This builder for chaining.
     */
    public Builder setFingerPrintFile(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      fingerPrintFile_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * File that contains finger print of files as they were after the last
     * configure phase.
     * </pre>
     *
     * <code>string finger_print_file = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearFingerPrintFile() {
      fingerPrintFile_ = getDefaultInstance().getFingerPrintFile();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * File that contains finger print of files as they were after the last
     * configure phase.
     * </pre>
     *
     * <code>string finger_print_file = 2;</code>
     * @param value The bytes for fingerPrintFile to set.
     * @return This builder for chaining.
     */
    public Builder setFingerPrintFileBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      fingerPrintFile_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList inputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureInputFilesIsMutable() {
      if (!inputFiles_.isModifiable()) {
        inputFiles_ = new com.google.protobuf.LazyStringArrayList(inputFiles_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @return A list containing the inputFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getInputFilesList() {
      inputFiles_.makeImmutable();
      return inputFiles_;
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @return The count of inputFiles.
     */
    public int getInputFilesCount() {
      return inputFiles_.size();
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @param index The index of the element to return.
     * @return The inputFiles at the given index.
     */
    public java.lang.String getInputFiles(int index) {
      return inputFiles_.get(index);
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the inputFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getInputFilesBytes(int index) {
      return inputFiles_.getByteString(index);
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @param index The index to set the value at.
     * @param value The inputFiles to set.
     * @return This builder for chaining.
     */
    public Builder setInputFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureInputFilesIsMutable();
      inputFiles_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @param value The inputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addInputFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureInputFilesIsMutable();
      inputFiles_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @param values The inputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllInputFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureInputFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, inputFiles_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearInputFiles() {
      inputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Inputs to the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string input_files = 3;</code>
     * @param value The bytes of the inputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addInputFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureInputFilesIsMutable();
      inputFiles_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList requiredOutputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureRequiredOutputFilesIsMutable() {
      if (!requiredOutputFiles_.isModifiable()) {
        requiredOutputFiles_ = new com.google.protobuf.LazyStringArrayList(requiredOutputFiles_);
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @return A list containing the requiredOutputFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getRequiredOutputFilesList() {
      requiredOutputFiles_.makeImmutable();
      return requiredOutputFiles_;
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @return The count of requiredOutputFiles.
     */
    public int getRequiredOutputFilesCount() {
      return requiredOutputFiles_.size();
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @param index The index of the element to return.
     * @return The requiredOutputFiles at the given index.
     */
    public java.lang.String getRequiredOutputFiles(int index) {
      return requiredOutputFiles_.get(index);
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the requiredOutputFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getRequiredOutputFilesBytes(int index) {
      return requiredOutputFiles_.getByteString(index);
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @param index The index to set the value at.
     * @param value The requiredOutputFiles to set.
     * @return This builder for chaining.
     */
    public Builder setRequiredOutputFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureRequiredOutputFilesIsMutable();
      requiredOutputFiles_.set(index, value);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @param value The requiredOutputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addRequiredOutputFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureRequiredOutputFilesIsMutable();
      requiredOutputFiles_.add(value);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @param values The requiredOutputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllRequiredOutputFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureRequiredOutputFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, requiredOutputFiles_);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearRequiredOutputFiles() {
      requiredOutputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string required_output_files = 4;</code>
     * @param value The bytes of the requiredOutputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addRequiredOutputFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureRequiredOutputFilesIsMutable();
      requiredOutputFiles_.add(value);
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList optionalOutputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureOptionalOutputFilesIsMutable() {
      if (!optionalOutputFiles_.isModifiable()) {
        optionalOutputFiles_ = new com.google.protobuf.LazyStringArrayList(optionalOutputFiles_);
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @return A list containing the optionalOutputFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getOptionalOutputFilesList() {
      optionalOutputFiles_.makeImmutable();
      return optionalOutputFiles_;
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @return The count of optionalOutputFiles.
     */
    public int getOptionalOutputFilesCount() {
      return optionalOutputFiles_.size();
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @param index The index of the element to return.
     * @return The optionalOutputFiles at the given index.
     */
    public java.lang.String getOptionalOutputFiles(int index) {
      return optionalOutputFiles_.get(index);
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the optionalOutputFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getOptionalOutputFilesBytes(int index) {
      return optionalOutputFiles_.getByteString(index);
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @param index The index to set the value at.
     * @param value The optionalOutputFiles to set.
     * @return This builder for chaining.
     */
    public Builder setOptionalOutputFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureOptionalOutputFilesIsMutable();
      optionalOutputFiles_.set(index, value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @param value The optionalOutputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addOptionalOutputFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureOptionalOutputFilesIsMutable();
      optionalOutputFiles_.add(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @param values The optionalOutputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllOptionalOutputFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureOptionalOutputFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, optionalOutputFiles_);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearOptionalOutputFiles() {
      optionalOutputFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional outputs of the C++ configuration phase.
     * </pre>
     *
     * <code>repeated string optional_output_files = 5;</code>
     * @param value The bytes of the optionalOutputFiles to add.
     * @return This builder for chaining.
     */
    public Builder addOptionalOutputFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureOptionalOutputFilesIsMutable();
      optionalOutputFiles_.add(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList hardConfigureFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureHardConfigureFilesIsMutable() {
      if (!hardConfigureFiles_.isModifiable()) {
        hardConfigureFiles_ = new com.google.protobuf.LazyStringArrayList(hardConfigureFiles_);
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @return A list containing the hardConfigureFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getHardConfigureFilesList() {
      hardConfigureFiles_.makeImmutable();
      return hardConfigureFiles_;
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @return The count of hardConfigureFiles.
     */
    public int getHardConfigureFilesCount() {
      return hardConfigureFiles_.size();
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @param index The index of the element to return.
     * @return The hardConfigureFiles at the given index.
     */
    public java.lang.String getHardConfigureFiles(int index) {
      return hardConfigureFiles_.get(index);
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hardConfigureFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getHardConfigureFilesBytes(int index) {
      return hardConfigureFiles_.getByteString(index);
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @param index The index to set the value at.
     * @param value The hardConfigureFiles to set.
     * @return This builder for chaining.
     */
    public Builder setHardConfigureFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureHardConfigureFilesIsMutable();
      hardConfigureFiles_.set(index, value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @param value The hardConfigureFiles to add.
     * @return This builder for chaining.
     */
    public Builder addHardConfigureFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureHardConfigureFilesIsMutable();
      hardConfigureFiles_.add(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @param values The hardConfigureFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllHardConfigureFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureHardConfigureFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, hardConfigureFiles_);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearHardConfigureFiles() {
      hardConfigureFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000020);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that, when changed, will cause a complete re-run of C++
     * configuration starting with the deletion of the configuration folder.
     * </pre>
     *
     * <code>repeated string hard_configure_files = 6;</code>
     * @param value The bytes of the hardConfigureFiles to add.
     * @return This builder for chaining.
     */
    public Builder addHardConfigureFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureHardConfigureFilesIsMutable();
      hardConfigureFiles_.add(value);
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private boolean fingerPrintFileExisted_ ;
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Derived from inputs on local file system before configure
     * ------------------------------------------------------------------------
     * Whether the finger print file existed (and was valid).
     * </pre>
     *
     * <code>bool finger_print_file_existed = 7;</code>
     * @return The fingerPrintFileExisted.
     */
    @java.lang.Override
    public boolean getFingerPrintFileExisted() {
      return fingerPrintFileExisted_;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Derived from inputs on local file system before configure
     * ------------------------------------------------------------------------
     * Whether the finger print file existed (and was valid).
     * </pre>
     *
     * <code>bool finger_print_file_existed = 7;</code>
     * @param value The fingerPrintFileExisted to set.
     * @return This builder for chaining.
     */
    public Builder setFingerPrintFileExisted(boolean value) {

      fingerPrintFileExisted_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Derived from inputs on local file system before configure
     * ------------------------------------------------------------------------
     * Whether the finger print file existed (and was valid).
     * </pre>
     *
     * <code>bool finger_print_file_existed = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearFingerPrintFileExisted() {
      bitField0_ = (bitField0_ & ~0x00000040);
      fingerPrintFileExisted_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList removedSinceFingerPrintsFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureRemovedSinceFingerPrintsFilesIsMutable() {
      if (!removedSinceFingerPrintsFiles_.isModifiable()) {
        removedSinceFingerPrintsFiles_ = new com.google.protobuf.LazyStringArrayList(removedSinceFingerPrintsFiles_);
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @return A list containing the removedSinceFingerPrintsFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getRemovedSinceFingerPrintsFilesList() {
      removedSinceFingerPrintsFiles_.makeImmutable();
      return removedSinceFingerPrintsFiles_;
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @return The count of removedSinceFingerPrintsFiles.
     */
    public int getRemovedSinceFingerPrintsFilesCount() {
      return removedSinceFingerPrintsFiles_.size();
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @param index The index of the element to return.
     * @return The removedSinceFingerPrintsFiles at the given index.
     */
    public java.lang.String getRemovedSinceFingerPrintsFiles(int index) {
      return removedSinceFingerPrintsFiles_.get(index);
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the removedSinceFingerPrintsFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getRemovedSinceFingerPrintsFilesBytes(int index) {
      return removedSinceFingerPrintsFiles_.getByteString(index);
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @param index The index to set the value at.
     * @param value The removedSinceFingerPrintsFiles to set.
     * @return This builder for chaining.
     */
    public Builder setRemovedSinceFingerPrintsFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureRemovedSinceFingerPrintsFilesIsMutable();
      removedSinceFingerPrintsFiles_.set(index, value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @param value The removedSinceFingerPrintsFiles to add.
     * @return This builder for chaining.
     */
    public Builder addRemovedSinceFingerPrintsFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureRemovedSinceFingerPrintsFilesIsMutable();
      removedSinceFingerPrintsFiles_.add(value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @param values The removedSinceFingerPrintsFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllRemovedSinceFingerPrintsFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureRemovedSinceFingerPrintsFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, removedSinceFingerPrintsFiles_);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearRemovedSinceFingerPrintsFiles() {
      removedSinceFingerPrintsFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000080);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were listed in fingerprints file last time but not this time.
     * </pre>
     *
     * <code>repeated string removed_since_finger_prints_files = 8;</code>
     * @param value The bytes of the removedSinceFingerPrintsFiles to add.
     * @return This builder for chaining.
     */
    public Builder addRemovedSinceFingerPrintsFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureRemovedSinceFingerPrintsFilesIsMutable();
      removedSinceFingerPrintsFiles_.add(value);
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList addedSinceFingerPrintsFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureAddedSinceFingerPrintsFilesIsMutable() {
      if (!addedSinceFingerPrintsFiles_.isModifiable()) {
        addedSinceFingerPrintsFiles_ = new com.google.protobuf.LazyStringArrayList(addedSinceFingerPrintsFiles_);
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @return A list containing the addedSinceFingerPrintsFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getAddedSinceFingerPrintsFilesList() {
      addedSinceFingerPrintsFiles_.makeImmutable();
      return addedSinceFingerPrintsFiles_;
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @return The count of addedSinceFingerPrintsFiles.
     */
    public int getAddedSinceFingerPrintsFilesCount() {
      return addedSinceFingerPrintsFiles_.size();
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @param index The index of the element to return.
     * @return The addedSinceFingerPrintsFiles at the given index.
     */
    public java.lang.String getAddedSinceFingerPrintsFiles(int index) {
      return addedSinceFingerPrintsFiles_.get(index);
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @param index The index of the value to return.
     * @return The bytes of the addedSinceFingerPrintsFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getAddedSinceFingerPrintsFilesBytes(int index) {
      return addedSinceFingerPrintsFiles_.getByteString(index);
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @param index The index to set the value at.
     * @param value The addedSinceFingerPrintsFiles to set.
     * @return This builder for chaining.
     */
    public Builder setAddedSinceFingerPrintsFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureAddedSinceFingerPrintsFilesIsMutable();
      addedSinceFingerPrintsFiles_.set(index, value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @param value The addedSinceFingerPrintsFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAddedSinceFingerPrintsFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureAddedSinceFingerPrintsFilesIsMutable();
      addedSinceFingerPrintsFiles_.add(value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @param values The addedSinceFingerPrintsFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllAddedSinceFingerPrintsFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureAddedSinceFingerPrintsFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, addedSinceFingerPrintsFiles_);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearAddedSinceFingerPrintsFiles() {
      addedSinceFingerPrintsFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Files that were not listed in fingerprints file last time but are present
     * this time.
     * </pre>
     *
     * <code>repeated string added_since_finger_prints_files = 9;</code>
     * @param value The bytes of the addedSinceFingerPrintsFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAddedSinceFingerPrintsFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureAddedSinceFingerPrintsFilesIsMutable();
      addedSinceFingerPrintsFiles_.add(value);
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    private java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> changesToFingerPrintFiles_ =
      java.util.Collections.emptyList();
    private void ensureChangesToFingerPrintFilesIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        changesToFingerPrintFiles_ = new java.util.ArrayList<com.android.build.gradle.internal.cxx.configure.ChangedFile>(changesToFingerPrintFiles_);
        bitField0_ |= 0x00000200;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> changesToFingerPrintFilesBuilder_;

    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> getChangesToFingerPrintFilesList() {
      if (changesToFingerPrintFilesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(changesToFingerPrintFiles_);
      } else {
        return changesToFingerPrintFilesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public int getChangesToFingerPrintFilesCount() {
      if (changesToFingerPrintFilesBuilder_ == null) {
        return changesToFingerPrintFiles_.size();
      } else {
        return changesToFingerPrintFilesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile getChangesToFingerPrintFiles(int index) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        return changesToFingerPrintFiles_.get(index);
      } else {
        return changesToFingerPrintFilesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder setChangesToFingerPrintFiles(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.set(index, value);
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder setChangesToFingerPrintFiles(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.set(index, builderForValue.build());
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder addChangesToFingerPrintFiles(com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.add(value);
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder addChangesToFingerPrintFiles(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.add(index, value);
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder addChangesToFingerPrintFiles(
        com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.add(builderForValue.build());
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder addChangesToFingerPrintFiles(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.add(index, builderForValue.build());
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder addAllChangesToFingerPrintFiles(
        java.lang.Iterable<? extends com.android.build.gradle.internal.cxx.configure.ChangedFile> values) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        ensureChangesToFingerPrintFilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, changesToFingerPrintFiles_);
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder clearChangesToFingerPrintFiles() {
      if (changesToFingerPrintFilesBuilder_ == null) {
        changesToFingerPrintFiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public Builder removeChangesToFingerPrintFiles(int index) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        ensureChangesToFingerPrintFilesIsMutable();
        changesToFingerPrintFiles_.remove(index);
        onChanged();
      } else {
        changesToFingerPrintFilesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder getChangesToFingerPrintFilesBuilder(
        int index) {
      return getChangesToFingerPrintFilesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder getChangesToFingerPrintFilesOrBuilder(
        int index) {
      if (changesToFingerPrintFilesBuilder_ == null) {
        return changesToFingerPrintFiles_.get(index);  } else {
        return changesToFingerPrintFilesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public java.util.List<? extends com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
         getChangesToFingerPrintFilesOrBuilderList() {
      if (changesToFingerPrintFilesBuilder_ != null) {
        return changesToFingerPrintFilesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(changesToFingerPrintFiles_);
      }
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder addChangesToFingerPrintFilesBuilder() {
      return getChangesToFingerPrintFilesFieldBuilder().addBuilder(
          com.android.build.gradle.internal.cxx.configure.ChangedFile.getDefaultInstance());
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder addChangesToFingerPrintFilesBuilder(
        int index) {
      return getChangesToFingerPrintFilesFieldBuilder().addBuilder(
          index, com.android.build.gradle.internal.cxx.configure.ChangedFile.getDefaultInstance());
    }
    /**
     * <code>repeated .ChangedFile changes_to_finger_print_files = 10;</code>
     */
    public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder> 
         getChangesToFingerPrintFilesBuilderList() {
      return getChangesToFingerPrintFilesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
        getChangesToFingerPrintFilesFieldBuilder() {
      if (changesToFingerPrintFilesBuilder_ == null) {
        changesToFingerPrintFilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder>(
                changesToFingerPrintFiles_,
                ((bitField0_ & 0x00000200) != 0),
                getParentForChildren(),
                isClean());
        changesToFingerPrintFiles_ = null;
      }
      return changesToFingerPrintFilesBuilder_;
    }

    private com.google.protobuf.LazyStringArrayList unchangedFingerPrintFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureUnchangedFingerPrintFilesIsMutable() {
      if (!unchangedFingerPrintFiles_.isModifiable()) {
        unchangedFingerPrintFiles_ = new com.google.protobuf.LazyStringArrayList(unchangedFingerPrintFiles_);
      }
      bitField0_ |= 0x00000400;
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @return A list containing the unchangedFingerPrintFiles.
     */
    public com.google.protobuf.ProtocolStringList
        getUnchangedFingerPrintFilesList() {
      unchangedFingerPrintFiles_.makeImmutable();
      return unchangedFingerPrintFiles_;
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @return The count of unchangedFingerPrintFiles.
     */
    public int getUnchangedFingerPrintFilesCount() {
      return unchangedFingerPrintFiles_.size();
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @param index The index of the element to return.
     * @return The unchangedFingerPrintFiles at the given index.
     */
    public java.lang.String getUnchangedFingerPrintFiles(int index) {
      return unchangedFingerPrintFiles_.get(index);
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @param index The index of the value to return.
     * @return The bytes of the unchangedFingerPrintFiles at the given index.
     */
    public com.google.protobuf.ByteString
        getUnchangedFingerPrintFilesBytes(int index) {
      return unchangedFingerPrintFiles_.getByteString(index);
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @param index The index to set the value at.
     * @param value The unchangedFingerPrintFiles to set.
     * @return This builder for chaining.
     */
    public Builder setUnchangedFingerPrintFiles(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureUnchangedFingerPrintFilesIsMutable();
      unchangedFingerPrintFiles_.set(index, value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @param value The unchangedFingerPrintFiles to add.
     * @return This builder for chaining.
     */
    public Builder addUnchangedFingerPrintFiles(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureUnchangedFingerPrintFilesIsMutable();
      unchangedFingerPrintFiles_.add(value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @param values The unchangedFingerPrintFiles to add.
     * @return This builder for chaining.
     */
    public Builder addAllUnchangedFingerPrintFiles(
        java.lang.Iterable<java.lang.String> values) {
      ensureUnchangedFingerPrintFilesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, unchangedFingerPrintFiles_);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnchangedFingerPrintFiles() {
      unchangedFingerPrintFiles_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000400);;
      onChanged();
      return this;
    }
    /**
     * <code>repeated string unchanged_finger_print_files = 11;</code>
     * @param value The bytes of the unchangedFingerPrintFiles to add.
     * @return This builder for chaining.
     */
    public Builder addUnchangedFingerPrintFilesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureUnchangedFingerPrintFilesIsMutable();
      unchangedFingerPrintFiles_.add(value);
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }

    private int configureType_ = 0;
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Reasons for configure and whether that configure is hard (delete folder)
     * ------------------------------------------------------------------------
     * Whether to configure C/C++ and what type of configure it should be.
     * </pre>
     *
     * <code>.ConfigureType configure_type = 12;</code>
     * @return The enum numeric value on the wire for configureType.
     */
    @java.lang.Override public int getConfigureTypeValue() {
      return configureType_;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Reasons for configure and whether that configure is hard (delete folder)
     * ------------------------------------------------------------------------
     * Whether to configure C/C++ and what type of configure it should be.
     * </pre>
     *
     * <code>.ConfigureType configure_type = 12;</code>
     * @param value The enum numeric value on the wire for configureType to set.
     * @return This builder for chaining.
     */
    public Builder setConfigureTypeValue(int value) {
      configureType_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Reasons for configure and whether that configure is hard (delete folder)
     * ------------------------------------------------------------------------
     * Whether to configure C/C++ and what type of configure it should be.
     * </pre>
     *
     * <code>.ConfigureType configure_type = 12;</code>
     * @return The configureType.
     */
    @java.lang.Override
    public com.android.build.gradle.internal.cxx.configure.ConfigureType getConfigureType() {
      com.android.build.gradle.internal.cxx.configure.ConfigureType result = com.android.build.gradle.internal.cxx.configure.ConfigureType.forNumber(configureType_);
      return result == null ? com.android.build.gradle.internal.cxx.configure.ConfigureType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Reasons for configure and whether that configure is hard (delete folder)
     * ------------------------------------------------------------------------
     * Whether to configure C/C++ and what type of configure it should be.
     * </pre>
     *
     * <code>.ConfigureType configure_type = 12;</code>
     * @param value The configureType to set.
     * @return This builder for chaining.
     */
    public Builder setConfigureType(com.android.build.gradle.internal.cxx.configure.ConfigureType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000800;
      configureType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ------------------------------------------------------------------------
     * Reasons for configure and whether that configure is hard (delete folder)
     * ------------------------------------------------------------------------
     * Whether to configure C/C++ and what type of configure it should be.
     * </pre>
     *
     * <code>.ConfigureType configure_type = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearConfigureType() {
      bitField0_ = (bitField0_ & ~0x00000800);
      configureType_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> softConfigureReasons_ =
      java.util.Collections.emptyList();
    private void ensureSoftConfigureReasonsIsMutable() {
      if (!((bitField0_ & 0x00001000) != 0)) {
        softConfigureReasons_ = new java.util.ArrayList<com.android.build.gradle.internal.cxx.configure.ChangedFile>(softConfigureReasons_);
        bitField0_ |= 0x00001000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> softConfigureReasonsBuilder_;

    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> getSoftConfigureReasonsList() {
      if (softConfigureReasonsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(softConfigureReasons_);
      } else {
        return softConfigureReasonsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public int getSoftConfigureReasonsCount() {
      if (softConfigureReasonsBuilder_ == null) {
        return softConfigureReasons_.size();
      } else {
        return softConfigureReasonsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile getSoftConfigureReasons(int index) {
      if (softConfigureReasonsBuilder_ == null) {
        return softConfigureReasons_.get(index);
      } else {
        return softConfigureReasonsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder setSoftConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (softConfigureReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.set(index, value);
        onChanged();
      } else {
        softConfigureReasonsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder setSoftConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (softConfigureReasonsBuilder_ == null) {
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.set(index, builderForValue.build());
        onChanged();
      } else {
        softConfigureReasonsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder addSoftConfigureReasons(com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (softConfigureReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.add(value);
        onChanged();
      } else {
        softConfigureReasonsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder addSoftConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (softConfigureReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.add(index, value);
        onChanged();
      } else {
        softConfigureReasonsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder addSoftConfigureReasons(
        com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (softConfigureReasonsBuilder_ == null) {
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.add(builderForValue.build());
        onChanged();
      } else {
        softConfigureReasonsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder addSoftConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (softConfigureReasonsBuilder_ == null) {
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.add(index, builderForValue.build());
        onChanged();
      } else {
        softConfigureReasonsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder addAllSoftConfigureReasons(
        java.lang.Iterable<? extends com.android.build.gradle.internal.cxx.configure.ChangedFile> values) {
      if (softConfigureReasonsBuilder_ == null) {
        ensureSoftConfigureReasonsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, softConfigureReasons_);
        onChanged();
      } else {
        softConfigureReasonsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder clearSoftConfigureReasons() {
      if (softConfigureReasonsBuilder_ == null) {
        softConfigureReasons_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
      } else {
        softConfigureReasonsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public Builder removeSoftConfigureReasons(int index) {
      if (softConfigureReasonsBuilder_ == null) {
        ensureSoftConfigureReasonsIsMutable();
        softConfigureReasons_.remove(index);
        onChanged();
      } else {
        softConfigureReasonsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder getSoftConfigureReasonsBuilder(
        int index) {
      return getSoftConfigureReasonsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder getSoftConfigureReasonsOrBuilder(
        int index) {
      if (softConfigureReasonsBuilder_ == null) {
        return softConfigureReasons_.get(index);  } else {
        return softConfigureReasonsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public java.util.List<? extends com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
         getSoftConfigureReasonsOrBuilderList() {
      if (softConfigureReasonsBuilder_ != null) {
        return softConfigureReasonsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(softConfigureReasons_);
      }
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder addSoftConfigureReasonsBuilder() {
      return getSoftConfigureReasonsFieldBuilder().addBuilder(
          com.android.build.gradle.internal.cxx.configure.ChangedFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder addSoftConfigureReasonsBuilder(
        int index) {
      return getSoftConfigureReasonsFieldBuilder().addBuilder(
          index, com.android.build.gradle.internal.cxx.configure.ChangedFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of reasons to rerun configure C++.
     * </pre>
     *
     * <code>repeated .ChangedFile soft_configure_reasons = 13;</code>
     */
    public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder> 
         getSoftConfigureReasonsBuilderList() {
      return getSoftConfigureReasonsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
        getSoftConfigureReasonsFieldBuilder() {
      if (softConfigureReasonsBuilder_ == null) {
        softConfigureReasonsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder>(
                softConfigureReasons_,
                ((bitField0_ & 0x00001000) != 0),
                getParentForChildren(),
                isClean());
        softConfigureReasons_ = null;
      }
      return softConfigureReasonsBuilder_;
    }

    private java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> hardConfigureReasons_ =
      java.util.Collections.emptyList();
    private void ensureHardConfigureReasonsIsMutable() {
      if (!((bitField0_ & 0x00002000) != 0)) {
        hardConfigureReasons_ = new java.util.ArrayList<com.android.build.gradle.internal.cxx.configure.ChangedFile>(hardConfigureReasons_);
        bitField0_ |= 0x00002000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> hardConfigureReasonsBuilder_;

    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile> getHardConfigureReasonsList() {
      if (hardConfigureReasonsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(hardConfigureReasons_);
      } else {
        return hardConfigureReasonsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public int getHardConfigureReasonsCount() {
      if (hardConfigureReasonsBuilder_ == null) {
        return hardConfigureReasons_.size();
      } else {
        return hardConfigureReasonsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile getHardConfigureReasons(int index) {
      if (hardConfigureReasonsBuilder_ == null) {
        return hardConfigureReasons_.get(index);
      } else {
        return hardConfigureReasonsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder setHardConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (hardConfigureReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.set(index, value);
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder setHardConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (hardConfigureReasonsBuilder_ == null) {
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.set(index, builderForValue.build());
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder addHardConfigureReasons(com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (hardConfigureReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.add(value);
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder addHardConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile value) {
      if (hardConfigureReasonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.add(index, value);
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder addHardConfigureReasons(
        com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (hardConfigureReasonsBuilder_ == null) {
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.add(builderForValue.build());
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder addHardConfigureReasons(
        int index, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder builderForValue) {
      if (hardConfigureReasonsBuilder_ == null) {
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.add(index, builderForValue.build());
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder addAllHardConfigureReasons(
        java.lang.Iterable<? extends com.android.build.gradle.internal.cxx.configure.ChangedFile> values) {
      if (hardConfigureReasonsBuilder_ == null) {
        ensureHardConfigureReasonsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hardConfigureReasons_);
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder clearHardConfigureReasons() {
      if (hardConfigureReasonsBuilder_ == null) {
        hardConfigureReasons_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public Builder removeHardConfigureReasons(int index) {
      if (hardConfigureReasonsBuilder_ == null) {
        ensureHardConfigureReasonsIsMutable();
        hardConfigureReasons_.remove(index);
        onChanged();
      } else {
        hardConfigureReasonsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder getHardConfigureReasonsBuilder(
        int index) {
      return getHardConfigureReasonsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder getHardConfigureReasonsOrBuilder(
        int index) {
      if (hardConfigureReasonsBuilder_ == null) {
        return hardConfigureReasons_.get(index);  } else {
        return hardConfigureReasonsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public java.util.List<? extends com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
         getHardConfigureReasonsOrBuilderList() {
      if (hardConfigureReasonsBuilder_ != null) {
        return hardConfigureReasonsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(hardConfigureReasons_);
      }
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder addHardConfigureReasonsBuilder() {
      return getHardConfigureReasonsFieldBuilder().addBuilder(
          com.android.build.gradle.internal.cxx.configure.ChangedFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder addHardConfigureReasonsBuilder(
        int index) {
      return getHardConfigureReasonsFieldBuilder().addBuilder(
          index, com.android.build.gradle.internal.cxx.configure.ChangedFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of reasons that it should be a hard configure.
     * </pre>
     *
     * <code>repeated .ChangedFile hard_configure_reasons = 14;</code>
     */
    public java.util.List<com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder> 
         getHardConfigureReasonsBuilderList() {
      return getHardConfigureReasonsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder> 
        getHardConfigureReasonsFieldBuilder() {
      if (hardConfigureReasonsBuilder_ == null) {
        hardConfigureReasonsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.build.gradle.internal.cxx.configure.ChangedFile, com.android.build.gradle.internal.cxx.configure.ChangedFile.Builder, com.android.build.gradle.internal.cxx.configure.ChangedFileOrBuilder>(
                hardConfigureReasons_,
                ((bitField0_ & 0x00002000) != 0),
                getParentForChildren(),
                isClean());
        hardConfigureReasons_ = null;
      }
      return hardConfigureReasonsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ConfigureInvalidationState)
  }

  // @@protoc_insertion_point(class_scope:ConfigureInvalidationState)
  private static final com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState();
  }

  public static com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConfigureInvalidationState>
      PARSER = new com.google.protobuf.AbstractParser<ConfigureInvalidationState>() {
    @java.lang.Override
    public ConfigureInvalidationState parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConfigureInvalidationState> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConfigureInvalidationState> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.android.build.gradle.internal.cxx.configure.ConfigureInvalidationState getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

