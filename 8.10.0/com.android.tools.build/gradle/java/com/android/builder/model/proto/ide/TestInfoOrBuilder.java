// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ide_models.proto

package com.android.builder.model.proto.ide;

public interface TestInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:TestInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional bool animations_disabled = 1;</code>
   * @return Whether the animationsDisabled field is set.
   */
  boolean hasAnimationsDisabled();
  /**
   * <code>optional bool animations_disabled = 1;</code>
   * @return The animationsDisabled.
   */
  boolean getAnimationsDisabled();

  /**
   * <code>optional .TestInfo.Execution execution = 2;</code>
   * @return Whether the execution field is set.
   */
  boolean hasExecution();
  /**
   * <code>optional .TestInfo.Execution execution = 2;</code>
   * @return The enum numeric value on the wire for execution.
   */
  int getExecutionValue();
  /**
   * <code>optional .TestInfo.Execution execution = 2;</code>
   * @return The execution.
   */
  com.android.builder.model.proto.ide.TestInfo.Execution getExecution();

  /**
   * <pre>
   * Returns a list of additional APKs that need to installed on the device for this artifact to
   * work correctly.
   * For test artifacts, these will be "buddy APKs" from the `androidTestUtil`
   * configuration.
   * </pre>
   *
   * <code>repeated .File additional_runtime_apks = 3;</code>
   */
  java.util.List<com.android.builder.model.proto.ide.File> 
      getAdditionalRuntimeApksList();
  /**
   * <pre>
   * Returns a list of additional APKs that need to installed on the device for this artifact to
   * work correctly.
   * For test artifacts, these will be "buddy APKs" from the `androidTestUtil`
   * configuration.
   * </pre>
   *
   * <code>repeated .File additional_runtime_apks = 3;</code>
   */
  com.android.builder.model.proto.ide.File getAdditionalRuntimeApks(int index);
  /**
   * <pre>
   * Returns a list of additional APKs that need to installed on the device for this artifact to
   * work correctly.
   * For test artifacts, these will be "buddy APKs" from the `androidTestUtil`
   * configuration.
   * </pre>
   *
   * <code>repeated .File additional_runtime_apks = 3;</code>
   */
  int getAdditionalRuntimeApksCount();
  /**
   * <pre>
   * Returns a list of additional APKs that need to installed on the device for this artifact to
   * work correctly.
   * For test artifacts, these will be "buddy APKs" from the `androidTestUtil`
   * configuration.
   * </pre>
   *
   * <code>repeated .File additional_runtime_apks = 3;</code>
   */
  java.util.List<? extends com.android.builder.model.proto.ide.FileOrBuilder> 
      getAdditionalRuntimeApksOrBuilderList();
  /**
   * <pre>
   * Returns a list of additional APKs that need to installed on the device for this artifact to
   * work correctly.
   * For test artifacts, these will be "buddy APKs" from the `androidTestUtil`
   * configuration.
   * </pre>
   *
   * <code>repeated .File additional_runtime_apks = 3;</code>
   */
  com.android.builder.model.proto.ide.FileOrBuilder getAdditionalRuntimeApksOrBuilder(
      int index);

  /**
   * <pre>
   * Returns the name of the task used to run instrumented tests or null if the variant is not a
   * test variant.
   * </pre>
   *
   * <code>optional string instrumented_test_task_name = 4;</code>
   * @return Whether the instrumentedTestTaskName field is set.
   */
  boolean hasInstrumentedTestTaskName();
  /**
   * <pre>
   * Returns the name of the task used to run instrumented tests or null if the variant is not a
   * test variant.
   * </pre>
   *
   * <code>optional string instrumented_test_task_name = 4;</code>
   * @return The instrumentedTestTaskName.
   */
  java.lang.String getInstrumentedTestTaskName();
  /**
   * <pre>
   * Returns the name of the task used to run instrumented tests or null if the variant is not a
   * test variant.
   * </pre>
   *
   * <code>optional string instrumented_test_task_name = 4;</code>
   * @return The bytes for instrumentedTestTaskName.
   */
  com.google.protobuf.ByteString
      getInstrumentedTestTaskNameBytes();
}
