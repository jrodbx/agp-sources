// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ide_models.proto

package com.android.builder.model.proto.ide;

public interface ComponentInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ComponentInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The build type attribute of this component.
   * Null if the component does not have Android variants
   * </pre>
   *
   * <code>optional string build_type = 1;</code>
   * @return Whether the buildType field is set.
   */
  boolean hasBuildType();
  /**
   * <pre>
   * The build type attribute of this component.
   * Null if the component does not have Android variants
   * </pre>
   *
   * <code>optional string build_type = 1;</code>
   * @return The buildType.
   */
  java.lang.String getBuildType();
  /**
   * <pre>
   * The build type attribute of this component.
   * Null if the component does not have Android variants
   * </pre>
   *
   * <code>optional string build_type = 1;</code>
   * @return The bytes for buildType.
   */
  com.google.protobuf.ByteString
      getBuildTypeBytes();

  /**
   * <pre>
   * The product flavor attributes of this component, keyed by flavor dimension name.
   * May be empty if the component does not have Android product flavors.
   * </pre>
   *
   * <code>map&lt;string, string&gt; product_flavors = 2;</code>
   */
  int getProductFlavorsCount();
  /**
   * <pre>
   * The product flavor attributes of this component, keyed by flavor dimension name.
   * May be empty if the component does not have Android product flavors.
   * </pre>
   *
   * <code>map&lt;string, string&gt; product_flavors = 2;</code>
   */
  boolean containsProductFlavors(
      java.lang.String key);
  /**
   * Use {@link #getProductFlavorsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getProductFlavors();
  /**
   * <pre>
   * The product flavor attributes of this component, keyed by flavor dimension name.
   * May be empty if the component does not have Android product flavors.
   * </pre>
   *
   * <code>map&lt;string, string&gt; product_flavors = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getProductFlavorsMap();
  /**
   * <pre>
   * The product flavor attributes of this component, keyed by flavor dimension name.
   * May be empty if the component does not have Android product flavors.
   * </pre>
   *
   * <code>map&lt;string, string&gt; product_flavors = 2;</code>
   */
  /* nullable */
java.lang.String getProductFlavorsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * The product flavor attributes of this component, keyed by flavor dimension name.
   * May be empty if the component does not have Android product flavors.
   * </pre>
   *
   * <code>map&lt;string, string&gt; product_flavors = 2;</code>
   */
  java.lang.String getProductFlavorsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The list of attributes associated with the component.
   * Build types and product flavor attributes are handled explicitly in [buildType] and
   * [productFlavors], so they are not included here
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 3;</code>
   */
  int getAttributesCount();
  /**
   * <pre>
   * The list of attributes associated with the component.
   * Build types and product flavor attributes are handled explicitly in [buildType] and
   * [productFlavors], so they are not included here
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 3;</code>
   */
  boolean containsAttributes(
      java.lang.String key);
  /**
   * Use {@link #getAttributesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getAttributes();
  /**
   * <pre>
   * The list of attributes associated with the component.
   * Build types and product flavor attributes are handled explicitly in [buildType] and
   * [productFlavors], so they are not included here
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 3;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getAttributesMap();
  /**
   * <pre>
   * The list of attributes associated with the component.
   * Build types and product flavor attributes are handled explicitly in [buildType] and
   * [productFlavors], so they are not included here
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 3;</code>
   */
  /* nullable */
java.lang.String getAttributesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * The list of attributes associated with the component.
   * Build types and product flavor attributes are handled explicitly in [buildType] and
   * [productFlavors], so they are not included here
   * </pre>
   *
   * <code>map&lt;string, string&gt; attributes = 3;</code>
   */
  java.lang.String getAttributesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The list of capabilities associated with the component
   * </pre>
   *
   * <code>repeated string capabilities = 4;</code>
   * @return A list containing the capabilities.
   */
  java.util.List<java.lang.String>
      getCapabilitiesList();
  /**
   * <pre>
   * The list of capabilities associated with the component
   * </pre>
   *
   * <code>repeated string capabilities = 4;</code>
   * @return The count of capabilities.
   */
  int getCapabilitiesCount();
  /**
   * <pre>
   * The list of capabilities associated with the component
   * </pre>
   *
   * <code>repeated string capabilities = 4;</code>
   * @param index The index of the element to return.
   * @return The capabilities at the given index.
   */
  java.lang.String getCapabilities(int index);
  /**
   * <pre>
   * The list of capabilities associated with the component
   * </pre>
   *
   * <code>repeated string capabilities = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the capabilities at the given index.
   */
  com.google.protobuf.ByteString
      getCapabilitiesBytes(int index);

  /**
   * <pre>
   * Indicates whether this component (library or module) is a test fixtures component (i.e. has
   * a test fixtures capability).
   * </pre>
   *
   * <code>bool is_test_fixtures = 5;</code>
   * @return The isTestFixtures.
   */
  boolean getIsTestFixtures();
}
