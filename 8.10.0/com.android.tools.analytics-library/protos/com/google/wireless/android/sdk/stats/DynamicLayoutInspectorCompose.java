// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Session data for dynamic layout inspector (inspector v2) around the system
 * view toggle
 * </pre>
 *
 * Protobuf type {@code android_studio.DynamicLayoutInspectorCompose}
 */
public final class DynamicLayoutInspectorCompose extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.DynamicLayoutInspectorCompose)
    DynamicLayoutInspectorComposeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DynamicLayoutInspectorCompose.newBuilder() to construct.
  private DynamicLayoutInspectorCompose(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DynamicLayoutInspectorCompose() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DynamicLayoutInspectorCompose();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorCompose_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorCompose_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.class, com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.Builder.class);
  }

  private int bitField0_;
  public static final int KOTLIN_REFLECTION_AVAILABLE_FIELD_NUMBER = 1;
  private boolean kotlinReflectionAvailable_ = false;
  /**
   * <pre>
   * Is the kotlin reflection library included in the project
   * </pre>
   *
   * <code>optional bool kotlin_reflection_available = 1;</code>
   * @return Whether the kotlinReflectionAvailable field is set.
   */
  @java.lang.Override
  public boolean hasKotlinReflectionAvailable() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Is the kotlin reflection library included in the project
   * </pre>
   *
   * <code>optional bool kotlin_reflection_available = 1;</code>
   * @return The kotlinReflectionAvailable.
   */
  @java.lang.Override
  public boolean getKotlinReflectionAvailable() {
    return kotlinReflectionAvailable_;
  }

  public static final int IMAGE_CLICKS_FIELD_NUMBER = 2;
  private int imageClicks_ = 0;
  /**
   * <pre>
   * Number of times a compose node was selected in image
   * </pre>
   *
   * <code>optional uint32 image_clicks = 2;</code>
   * @return Whether the imageClicks field is set.
   */
  @java.lang.Override
  public boolean hasImageClicks() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Number of times a compose node was selected in image
   * </pre>
   *
   * <code>optional uint32 image_clicks = 2;</code>
   * @return The imageClicks.
   */
  @java.lang.Override
  public int getImageClicks() {
    return imageClicks_;
  }

  public static final int COMPONENT_TREE_CLICKS_FIELD_NUMBER = 3;
  private int componentTreeClicks_ = 0;
  /**
   * <pre>
   * Number of times a compose node was selected in the component tree
   * </pre>
   *
   * <code>optional uint32 component_tree_clicks = 3;</code>
   * @return Whether the componentTreeClicks field is set.
   */
  @java.lang.Override
  public boolean hasComponentTreeClicks() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Number of times a compose node was selected in the component tree
   * </pre>
   *
   * <code>optional uint32 component_tree_clicks = 3;</code>
   * @return The componentTreeClicks.
   */
  @java.lang.Override
  public int getComponentTreeClicks() {
    return componentTreeClicks_;
  }

  public static final int GO_TO_SOURCE_FROM_PROPERTY_VALUE_CLICKS_FIELD_NUMBER = 4;
  private int goToSourceFromPropertyValueClicks_ = 0;
  /**
   * <pre>
   * Number of times a link in the property value section was clicked
   * </pre>
   *
   * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
   * @return Whether the goToSourceFromPropertyValueClicks field is set.
   */
  @java.lang.Override
  public boolean hasGoToSourceFromPropertyValueClicks() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Number of times a link in the property value section was clicked
   * </pre>
   *
   * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
   * @return The goToSourceFromPropertyValueClicks.
   */
  @java.lang.Override
  public int getGoToSourceFromPropertyValueClicks() {
    return goToSourceFromPropertyValueClicks_;
  }

  public static final int MAX_RECOMPOSITION_COUNT_FIELD_NUMBER = 5;
  private int maxRecompositionCount_ = 0;
  /**
   * <pre>
   * The max recomposition count seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_count = 5;</code>
   * @return Whether the maxRecompositionCount field is set.
   */
  @java.lang.Override
  public boolean hasMaxRecompositionCount() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The max recomposition count seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_count = 5;</code>
   * @return The maxRecompositionCount.
   */
  @java.lang.Override
  public int getMaxRecompositionCount() {
    return maxRecompositionCount_;
  }

  public static final int MAX_RECOMPOSITION_SKIPS_FIELD_NUMBER = 6;
  private int maxRecompositionSkips_ = 0;
  /**
   * <pre>
   * The max recomposition skips seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_skips = 6;</code>
   * @return Whether the maxRecompositionSkips field is set.
   */
  @java.lang.Override
  public boolean hasMaxRecompositionSkips() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The max recomposition skips seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_skips = 6;</code>
   * @return The maxRecompositionSkips.
   */
  @java.lang.Override
  public int getMaxRecompositionSkips() {
    return maxRecompositionSkips_;
  }

  public static final int MAX_RECOMPOSITION_HIGHLIGHT_FIELD_NUMBER = 7;
  private float maxRecompositionHighlight_ = 0F;
  /**
   * <pre>
   * The max highlight amount seen in a session
   * </pre>
   *
   * <code>optional float max_recomposition_highlight = 7;</code>
   * @return Whether the maxRecompositionHighlight field is set.
   */
  @java.lang.Override
  public boolean hasMaxRecompositionHighlight() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * The max highlight amount seen in a session
   * </pre>
   *
   * <code>optional float max_recomposition_highlight = 7;</code>
   * @return The maxRecompositionHighlight.
   */
  @java.lang.Override
  public float getMaxRecompositionHighlight() {
    return maxRecompositionHighlight_;
  }

  public static final int RECOMPOSITION_RESET_CLICKS_FIELD_NUMBER = 8;
  private int recompositionResetClicks_ = 0;
  /**
   * <pre>
   * Number of times the recomposition counts were explicitly reset
   * </pre>
   *
   * <code>optional uint32 recomposition_reset_clicks = 8;</code>
   * @return Whether the recompositionResetClicks field is set.
   */
  @java.lang.Override
  public boolean hasRecompositionResetClicks() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Number of times the recomposition counts were explicitly reset
   * </pre>
   *
   * <code>optional uint32 recomposition_reset_clicks = 8;</code>
   * @return The recompositionResetClicks.
   */
  @java.lang.Override
  public int getRecompositionResetClicks() {
    return recompositionResetClicks_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COUNTS_ON_FIELD_NUMBER = 9;
  private int framesWithRecompositionCountsOn_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were shown
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_counts_on = 9;</code>
   * @return Whether the framesWithRecompositionCountsOn field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionCountsOn() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were shown
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_counts_on = 9;</code>
   * @return The framesWithRecompositionCountsOn.
   */
  @java.lang.Override
  public int getFramesWithRecompositionCountsOn() {
    return framesWithRecompositionCountsOn_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COLOR_RED_FIELD_NUMBER = 10;
  private int framesWithRecompositionColorRed_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in red
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_red = 10;</code>
   * @return Whether the framesWithRecompositionColorRed field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionColorRed() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in red
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_red = 10;</code>
   * @return The framesWithRecompositionColorRed.
   */
  @java.lang.Override
  public int getFramesWithRecompositionColorRed() {
    return framesWithRecompositionColorRed_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COLOR_BLUE_FIELD_NUMBER = 11;
  private int framesWithRecompositionColorBlue_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in blue
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_blue = 11;</code>
   * @return Whether the framesWithRecompositionColorBlue field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionColorBlue() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in blue
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_blue = 11;</code>
   * @return The framesWithRecompositionColorBlue.
   */
  @java.lang.Override
  public int getFramesWithRecompositionColorBlue() {
    return framesWithRecompositionColorBlue_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COLOR_GREEN_FIELD_NUMBER = 12;
  private int framesWithRecompositionColorGreen_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in green
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_green = 12;</code>
   * @return Whether the framesWithRecompositionColorGreen field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionColorGreen() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in green
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_green = 12;</code>
   * @return The framesWithRecompositionColorGreen.
   */
  @java.lang.Override
  public int getFramesWithRecompositionColorGreen() {
    return framesWithRecompositionColorGreen_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COLOR_YELLOW_FIELD_NUMBER = 13;
  private int framesWithRecompositionColorYellow_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in yellow
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_yellow = 13;</code>
   * @return Whether the framesWithRecompositionColorYellow field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionColorYellow() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in yellow
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_yellow = 13;</code>
   * @return The framesWithRecompositionColorYellow.
   */
  @java.lang.Override
  public int getFramesWithRecompositionColorYellow() {
    return framesWithRecompositionColorYellow_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COLOR_PURPLE_FIELD_NUMBER = 14;
  private int framesWithRecompositionColorPurple_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in purple
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_purple = 14;</code>
   * @return Whether the framesWithRecompositionColorPurple field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionColorPurple() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in purple
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_purple = 14;</code>
   * @return The framesWithRecompositionColorPurple.
   */
  @java.lang.Override
  public int getFramesWithRecompositionColorPurple() {
    return framesWithRecompositionColorPurple_;
  }

  public static final int FRAMES_WITH_RECOMPOSITION_COLOR_ORANGE_FIELD_NUMBER = 15;
  private int framesWithRecompositionColorOrange_ = 0;
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in orange
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_orange = 15;</code>
   * @return Whether the framesWithRecompositionColorOrange field is set.
   */
  @java.lang.Override
  public boolean hasFramesWithRecompositionColorOrange() {
    return ((bitField0_ & 0x00004000) != 0);
  }
  /**
   * <pre>
   * Number of frames received where the recomposition counts were in orange
   * </pre>
   *
   * <code>optional uint32 frames_with_recomposition_color_orange = 15;</code>
   * @return The framesWithRecompositionColorOrange.
   */
  @java.lang.Override
  public int getFramesWithRecompositionColorOrange() {
    return framesWithRecompositionColorOrange_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeBool(1, kotlinReflectionAvailable_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeUInt32(2, imageClicks_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeUInt32(3, componentTreeClicks_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeUInt32(4, goToSourceFromPropertyValueClicks_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeUInt32(5, maxRecompositionCount_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeUInt32(6, maxRecompositionSkips_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeFloat(7, maxRecompositionHighlight_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeUInt32(8, recompositionResetClicks_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeUInt32(9, framesWithRecompositionCountsOn_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeUInt32(10, framesWithRecompositionColorRed_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      output.writeUInt32(11, framesWithRecompositionColorBlue_);
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      output.writeUInt32(12, framesWithRecompositionColorGreen_);
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      output.writeUInt32(13, framesWithRecompositionColorYellow_);
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      output.writeUInt32(14, framesWithRecompositionColorPurple_);
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      output.writeUInt32(15, framesWithRecompositionColorOrange_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, kotlinReflectionAvailable_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, imageClicks_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, componentTreeClicks_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, goToSourceFromPropertyValueClicks_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, maxRecompositionCount_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(6, maxRecompositionSkips_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, maxRecompositionHighlight_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(8, recompositionResetClicks_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(9, framesWithRecompositionCountsOn_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, framesWithRecompositionColorRed_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, framesWithRecompositionColorBlue_);
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(12, framesWithRecompositionColorGreen_);
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(13, framesWithRecompositionColorYellow_);
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(14, framesWithRecompositionColorPurple_);
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(15, framesWithRecompositionColorOrange_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose other = (com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose) obj;

    if (hasKotlinReflectionAvailable() != other.hasKotlinReflectionAvailable()) return false;
    if (hasKotlinReflectionAvailable()) {
      if (getKotlinReflectionAvailable()
          != other.getKotlinReflectionAvailable()) return false;
    }
    if (hasImageClicks() != other.hasImageClicks()) return false;
    if (hasImageClicks()) {
      if (getImageClicks()
          != other.getImageClicks()) return false;
    }
    if (hasComponentTreeClicks() != other.hasComponentTreeClicks()) return false;
    if (hasComponentTreeClicks()) {
      if (getComponentTreeClicks()
          != other.getComponentTreeClicks()) return false;
    }
    if (hasGoToSourceFromPropertyValueClicks() != other.hasGoToSourceFromPropertyValueClicks()) return false;
    if (hasGoToSourceFromPropertyValueClicks()) {
      if (getGoToSourceFromPropertyValueClicks()
          != other.getGoToSourceFromPropertyValueClicks()) return false;
    }
    if (hasMaxRecompositionCount() != other.hasMaxRecompositionCount()) return false;
    if (hasMaxRecompositionCount()) {
      if (getMaxRecompositionCount()
          != other.getMaxRecompositionCount()) return false;
    }
    if (hasMaxRecompositionSkips() != other.hasMaxRecompositionSkips()) return false;
    if (hasMaxRecompositionSkips()) {
      if (getMaxRecompositionSkips()
          != other.getMaxRecompositionSkips()) return false;
    }
    if (hasMaxRecompositionHighlight() != other.hasMaxRecompositionHighlight()) return false;
    if (hasMaxRecompositionHighlight()) {
      if (java.lang.Float.floatToIntBits(getMaxRecompositionHighlight())
          != java.lang.Float.floatToIntBits(
              other.getMaxRecompositionHighlight())) return false;
    }
    if (hasRecompositionResetClicks() != other.hasRecompositionResetClicks()) return false;
    if (hasRecompositionResetClicks()) {
      if (getRecompositionResetClicks()
          != other.getRecompositionResetClicks()) return false;
    }
    if (hasFramesWithRecompositionCountsOn() != other.hasFramesWithRecompositionCountsOn()) return false;
    if (hasFramesWithRecompositionCountsOn()) {
      if (getFramesWithRecompositionCountsOn()
          != other.getFramesWithRecompositionCountsOn()) return false;
    }
    if (hasFramesWithRecompositionColorRed() != other.hasFramesWithRecompositionColorRed()) return false;
    if (hasFramesWithRecompositionColorRed()) {
      if (getFramesWithRecompositionColorRed()
          != other.getFramesWithRecompositionColorRed()) return false;
    }
    if (hasFramesWithRecompositionColorBlue() != other.hasFramesWithRecompositionColorBlue()) return false;
    if (hasFramesWithRecompositionColorBlue()) {
      if (getFramesWithRecompositionColorBlue()
          != other.getFramesWithRecompositionColorBlue()) return false;
    }
    if (hasFramesWithRecompositionColorGreen() != other.hasFramesWithRecompositionColorGreen()) return false;
    if (hasFramesWithRecompositionColorGreen()) {
      if (getFramesWithRecompositionColorGreen()
          != other.getFramesWithRecompositionColorGreen()) return false;
    }
    if (hasFramesWithRecompositionColorYellow() != other.hasFramesWithRecompositionColorYellow()) return false;
    if (hasFramesWithRecompositionColorYellow()) {
      if (getFramesWithRecompositionColorYellow()
          != other.getFramesWithRecompositionColorYellow()) return false;
    }
    if (hasFramesWithRecompositionColorPurple() != other.hasFramesWithRecompositionColorPurple()) return false;
    if (hasFramesWithRecompositionColorPurple()) {
      if (getFramesWithRecompositionColorPurple()
          != other.getFramesWithRecompositionColorPurple()) return false;
    }
    if (hasFramesWithRecompositionColorOrange() != other.hasFramesWithRecompositionColorOrange()) return false;
    if (hasFramesWithRecompositionColorOrange()) {
      if (getFramesWithRecompositionColorOrange()
          != other.getFramesWithRecompositionColorOrange()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasKotlinReflectionAvailable()) {
      hash = (37 * hash) + KOTLIN_REFLECTION_AVAILABLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getKotlinReflectionAvailable());
    }
    if (hasImageClicks()) {
      hash = (37 * hash) + IMAGE_CLICKS_FIELD_NUMBER;
      hash = (53 * hash) + getImageClicks();
    }
    if (hasComponentTreeClicks()) {
      hash = (37 * hash) + COMPONENT_TREE_CLICKS_FIELD_NUMBER;
      hash = (53 * hash) + getComponentTreeClicks();
    }
    if (hasGoToSourceFromPropertyValueClicks()) {
      hash = (37 * hash) + GO_TO_SOURCE_FROM_PROPERTY_VALUE_CLICKS_FIELD_NUMBER;
      hash = (53 * hash) + getGoToSourceFromPropertyValueClicks();
    }
    if (hasMaxRecompositionCount()) {
      hash = (37 * hash) + MAX_RECOMPOSITION_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxRecompositionCount();
    }
    if (hasMaxRecompositionSkips()) {
      hash = (37 * hash) + MAX_RECOMPOSITION_SKIPS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxRecompositionSkips();
    }
    if (hasMaxRecompositionHighlight()) {
      hash = (37 * hash) + MAX_RECOMPOSITION_HIGHLIGHT_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getMaxRecompositionHighlight());
    }
    if (hasRecompositionResetClicks()) {
      hash = (37 * hash) + RECOMPOSITION_RESET_CLICKS_FIELD_NUMBER;
      hash = (53 * hash) + getRecompositionResetClicks();
    }
    if (hasFramesWithRecompositionCountsOn()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COUNTS_ON_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionCountsOn();
    }
    if (hasFramesWithRecompositionColorRed()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COLOR_RED_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionColorRed();
    }
    if (hasFramesWithRecompositionColorBlue()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COLOR_BLUE_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionColorBlue();
    }
    if (hasFramesWithRecompositionColorGreen()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COLOR_GREEN_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionColorGreen();
    }
    if (hasFramesWithRecompositionColorYellow()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COLOR_YELLOW_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionColorYellow();
    }
    if (hasFramesWithRecompositionColorPurple()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COLOR_PURPLE_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionColorPurple();
    }
    if (hasFramesWithRecompositionColorOrange()) {
      hash = (37 * hash) + FRAMES_WITH_RECOMPOSITION_COLOR_ORANGE_FIELD_NUMBER;
      hash = (53 * hash) + getFramesWithRecompositionColorOrange();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Session data for dynamic layout inspector (inspector v2) around the system
   * view toggle
   * </pre>
   *
   * Protobuf type {@code android_studio.DynamicLayoutInspectorCompose}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.DynamicLayoutInspectorCompose)
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorComposeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorCompose_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorCompose_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.class, com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      kotlinReflectionAvailable_ = false;
      imageClicks_ = 0;
      componentTreeClicks_ = 0;
      goToSourceFromPropertyValueClicks_ = 0;
      maxRecompositionCount_ = 0;
      maxRecompositionSkips_ = 0;
      maxRecompositionHighlight_ = 0F;
      recompositionResetClicks_ = 0;
      framesWithRecompositionCountsOn_ = 0;
      framesWithRecompositionColorRed_ = 0;
      framesWithRecompositionColorBlue_ = 0;
      framesWithRecompositionColorGreen_ = 0;
      framesWithRecompositionColorYellow_ = 0;
      framesWithRecompositionColorPurple_ = 0;
      framesWithRecompositionColorOrange_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorCompose_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose build() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose buildPartial() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose result = new com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.kotlinReflectionAvailable_ = kotlinReflectionAvailable_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.imageClicks_ = imageClicks_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.componentTreeClicks_ = componentTreeClicks_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.goToSourceFromPropertyValueClicks_ = goToSourceFromPropertyValueClicks_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.maxRecompositionCount_ = maxRecompositionCount_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.maxRecompositionSkips_ = maxRecompositionSkips_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.maxRecompositionHighlight_ = maxRecompositionHighlight_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.recompositionResetClicks_ = recompositionResetClicks_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.framesWithRecompositionCountsOn_ = framesWithRecompositionCountsOn_;
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.framesWithRecompositionColorRed_ = framesWithRecompositionColorRed_;
        to_bitField0_ |= 0x00000200;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.framesWithRecompositionColorBlue_ = framesWithRecompositionColorBlue_;
        to_bitField0_ |= 0x00000400;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.framesWithRecompositionColorGreen_ = framesWithRecompositionColorGreen_;
        to_bitField0_ |= 0x00000800;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.framesWithRecompositionColorYellow_ = framesWithRecompositionColorYellow_;
        to_bitField0_ |= 0x00001000;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.framesWithRecompositionColorPurple_ = framesWithRecompositionColorPurple_;
        to_bitField0_ |= 0x00002000;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.framesWithRecompositionColorOrange_ = framesWithRecompositionColorOrange_;
        to_bitField0_ |= 0x00004000;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose) {
        return mergeFrom((com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose other) {
      if (other == com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose.getDefaultInstance()) return this;
      if (other.hasKotlinReflectionAvailable()) {
        setKotlinReflectionAvailable(other.getKotlinReflectionAvailable());
      }
      if (other.hasImageClicks()) {
        setImageClicks(other.getImageClicks());
      }
      if (other.hasComponentTreeClicks()) {
        setComponentTreeClicks(other.getComponentTreeClicks());
      }
      if (other.hasGoToSourceFromPropertyValueClicks()) {
        setGoToSourceFromPropertyValueClicks(other.getGoToSourceFromPropertyValueClicks());
      }
      if (other.hasMaxRecompositionCount()) {
        setMaxRecompositionCount(other.getMaxRecompositionCount());
      }
      if (other.hasMaxRecompositionSkips()) {
        setMaxRecompositionSkips(other.getMaxRecompositionSkips());
      }
      if (other.hasMaxRecompositionHighlight()) {
        setMaxRecompositionHighlight(other.getMaxRecompositionHighlight());
      }
      if (other.hasRecompositionResetClicks()) {
        setRecompositionResetClicks(other.getRecompositionResetClicks());
      }
      if (other.hasFramesWithRecompositionCountsOn()) {
        setFramesWithRecompositionCountsOn(other.getFramesWithRecompositionCountsOn());
      }
      if (other.hasFramesWithRecompositionColorRed()) {
        setFramesWithRecompositionColorRed(other.getFramesWithRecompositionColorRed());
      }
      if (other.hasFramesWithRecompositionColorBlue()) {
        setFramesWithRecompositionColorBlue(other.getFramesWithRecompositionColorBlue());
      }
      if (other.hasFramesWithRecompositionColorGreen()) {
        setFramesWithRecompositionColorGreen(other.getFramesWithRecompositionColorGreen());
      }
      if (other.hasFramesWithRecompositionColorYellow()) {
        setFramesWithRecompositionColorYellow(other.getFramesWithRecompositionColorYellow());
      }
      if (other.hasFramesWithRecompositionColorPurple()) {
        setFramesWithRecompositionColorPurple(other.getFramesWithRecompositionColorPurple());
      }
      if (other.hasFramesWithRecompositionColorOrange()) {
        setFramesWithRecompositionColorOrange(other.getFramesWithRecompositionColorOrange());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              kotlinReflectionAvailable_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              imageClicks_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              componentTreeClicks_ = input.readUInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              goToSourceFromPropertyValueClicks_ = input.readUInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              maxRecompositionCount_ = input.readUInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              maxRecompositionSkips_ = input.readUInt32();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 61: {
              maxRecompositionHighlight_ = input.readFloat();
              bitField0_ |= 0x00000040;
              break;
            } // case 61
            case 64: {
              recompositionResetClicks_ = input.readUInt32();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 72: {
              framesWithRecompositionCountsOn_ = input.readUInt32();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 80: {
              framesWithRecompositionColorRed_ = input.readUInt32();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            case 88: {
              framesWithRecompositionColorBlue_ = input.readUInt32();
              bitField0_ |= 0x00000400;
              break;
            } // case 88
            case 96: {
              framesWithRecompositionColorGreen_ = input.readUInt32();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            case 104: {
              framesWithRecompositionColorYellow_ = input.readUInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 104
            case 112: {
              framesWithRecompositionColorPurple_ = input.readUInt32();
              bitField0_ |= 0x00002000;
              break;
            } // case 112
            case 120: {
              framesWithRecompositionColorOrange_ = input.readUInt32();
              bitField0_ |= 0x00004000;
              break;
            } // case 120
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean kotlinReflectionAvailable_ ;
    /**
     * <pre>
     * Is the kotlin reflection library included in the project
     * </pre>
     *
     * <code>optional bool kotlin_reflection_available = 1;</code>
     * @return Whether the kotlinReflectionAvailable field is set.
     */
    @java.lang.Override
    public boolean hasKotlinReflectionAvailable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Is the kotlin reflection library included in the project
     * </pre>
     *
     * <code>optional bool kotlin_reflection_available = 1;</code>
     * @return The kotlinReflectionAvailable.
     */
    @java.lang.Override
    public boolean getKotlinReflectionAvailable() {
      return kotlinReflectionAvailable_;
    }
    /**
     * <pre>
     * Is the kotlin reflection library included in the project
     * </pre>
     *
     * <code>optional bool kotlin_reflection_available = 1;</code>
     * @param value The kotlinReflectionAvailable to set.
     * @return This builder for chaining.
     */
    public Builder setKotlinReflectionAvailable(boolean value) {

      kotlinReflectionAvailable_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Is the kotlin reflection library included in the project
     * </pre>
     *
     * <code>optional bool kotlin_reflection_available = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearKotlinReflectionAvailable() {
      bitField0_ = (bitField0_ & ~0x00000001);
      kotlinReflectionAvailable_ = false;
      onChanged();
      return this;
    }

    private int imageClicks_ ;
    /**
     * <pre>
     * Number of times a compose node was selected in image
     * </pre>
     *
     * <code>optional uint32 image_clicks = 2;</code>
     * @return Whether the imageClicks field is set.
     */
    @java.lang.Override
    public boolean hasImageClicks() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Number of times a compose node was selected in image
     * </pre>
     *
     * <code>optional uint32 image_clicks = 2;</code>
     * @return The imageClicks.
     */
    @java.lang.Override
    public int getImageClicks() {
      return imageClicks_;
    }
    /**
     * <pre>
     * Number of times a compose node was selected in image
     * </pre>
     *
     * <code>optional uint32 image_clicks = 2;</code>
     * @param value The imageClicks to set.
     * @return This builder for chaining.
     */
    public Builder setImageClicks(int value) {

      imageClicks_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of times a compose node was selected in image
     * </pre>
     *
     * <code>optional uint32 image_clicks = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearImageClicks() {
      bitField0_ = (bitField0_ & ~0x00000002);
      imageClicks_ = 0;
      onChanged();
      return this;
    }

    private int componentTreeClicks_ ;
    /**
     * <pre>
     * Number of times a compose node was selected in the component tree
     * </pre>
     *
     * <code>optional uint32 component_tree_clicks = 3;</code>
     * @return Whether the componentTreeClicks field is set.
     */
    @java.lang.Override
    public boolean hasComponentTreeClicks() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Number of times a compose node was selected in the component tree
     * </pre>
     *
     * <code>optional uint32 component_tree_clicks = 3;</code>
     * @return The componentTreeClicks.
     */
    @java.lang.Override
    public int getComponentTreeClicks() {
      return componentTreeClicks_;
    }
    /**
     * <pre>
     * Number of times a compose node was selected in the component tree
     * </pre>
     *
     * <code>optional uint32 component_tree_clicks = 3;</code>
     * @param value The componentTreeClicks to set.
     * @return This builder for chaining.
     */
    public Builder setComponentTreeClicks(int value) {

      componentTreeClicks_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of times a compose node was selected in the component tree
     * </pre>
     *
     * <code>optional uint32 component_tree_clicks = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearComponentTreeClicks() {
      bitField0_ = (bitField0_ & ~0x00000004);
      componentTreeClicks_ = 0;
      onChanged();
      return this;
    }

    private int goToSourceFromPropertyValueClicks_ ;
    /**
     * <pre>
     * Number of times a link in the property value section was clicked
     * </pre>
     *
     * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
     * @return Whether the goToSourceFromPropertyValueClicks field is set.
     */
    @java.lang.Override
    public boolean hasGoToSourceFromPropertyValueClicks() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Number of times a link in the property value section was clicked
     * </pre>
     *
     * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
     * @return The goToSourceFromPropertyValueClicks.
     */
    @java.lang.Override
    public int getGoToSourceFromPropertyValueClicks() {
      return goToSourceFromPropertyValueClicks_;
    }
    /**
     * <pre>
     * Number of times a link in the property value section was clicked
     * </pre>
     *
     * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
     * @param value The goToSourceFromPropertyValueClicks to set.
     * @return This builder for chaining.
     */
    public Builder setGoToSourceFromPropertyValueClicks(int value) {

      goToSourceFromPropertyValueClicks_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of times a link in the property value section was clicked
     * </pre>
     *
     * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearGoToSourceFromPropertyValueClicks() {
      bitField0_ = (bitField0_ & ~0x00000008);
      goToSourceFromPropertyValueClicks_ = 0;
      onChanged();
      return this;
    }

    private int maxRecompositionCount_ ;
    /**
     * <pre>
     * The max recomposition count seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_count = 5;</code>
     * @return Whether the maxRecompositionCount field is set.
     */
    @java.lang.Override
    public boolean hasMaxRecompositionCount() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The max recomposition count seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_count = 5;</code>
     * @return The maxRecompositionCount.
     */
    @java.lang.Override
    public int getMaxRecompositionCount() {
      return maxRecompositionCount_;
    }
    /**
     * <pre>
     * The max recomposition count seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_count = 5;</code>
     * @param value The maxRecompositionCount to set.
     * @return This builder for chaining.
     */
    public Builder setMaxRecompositionCount(int value) {

      maxRecompositionCount_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The max recomposition count seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_count = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxRecompositionCount() {
      bitField0_ = (bitField0_ & ~0x00000010);
      maxRecompositionCount_ = 0;
      onChanged();
      return this;
    }

    private int maxRecompositionSkips_ ;
    /**
     * <pre>
     * The max recomposition skips seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_skips = 6;</code>
     * @return Whether the maxRecompositionSkips field is set.
     */
    @java.lang.Override
    public boolean hasMaxRecompositionSkips() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The max recomposition skips seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_skips = 6;</code>
     * @return The maxRecompositionSkips.
     */
    @java.lang.Override
    public int getMaxRecompositionSkips() {
      return maxRecompositionSkips_;
    }
    /**
     * <pre>
     * The max recomposition skips seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_skips = 6;</code>
     * @param value The maxRecompositionSkips to set.
     * @return This builder for chaining.
     */
    public Builder setMaxRecompositionSkips(int value) {

      maxRecompositionSkips_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The max recomposition skips seen for a composable in a session
     * </pre>
     *
     * <code>optional uint32 max_recomposition_skips = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxRecompositionSkips() {
      bitField0_ = (bitField0_ & ~0x00000020);
      maxRecompositionSkips_ = 0;
      onChanged();
      return this;
    }

    private float maxRecompositionHighlight_ ;
    /**
     * <pre>
     * The max highlight amount seen in a session
     * </pre>
     *
     * <code>optional float max_recomposition_highlight = 7;</code>
     * @return Whether the maxRecompositionHighlight field is set.
     */
    @java.lang.Override
    public boolean hasMaxRecompositionHighlight() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * The max highlight amount seen in a session
     * </pre>
     *
     * <code>optional float max_recomposition_highlight = 7;</code>
     * @return The maxRecompositionHighlight.
     */
    @java.lang.Override
    public float getMaxRecompositionHighlight() {
      return maxRecompositionHighlight_;
    }
    /**
     * <pre>
     * The max highlight amount seen in a session
     * </pre>
     *
     * <code>optional float max_recomposition_highlight = 7;</code>
     * @param value The maxRecompositionHighlight to set.
     * @return This builder for chaining.
     */
    public Builder setMaxRecompositionHighlight(float value) {

      maxRecompositionHighlight_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The max highlight amount seen in a session
     * </pre>
     *
     * <code>optional float max_recomposition_highlight = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxRecompositionHighlight() {
      bitField0_ = (bitField0_ & ~0x00000040);
      maxRecompositionHighlight_ = 0F;
      onChanged();
      return this;
    }

    private int recompositionResetClicks_ ;
    /**
     * <pre>
     * Number of times the recomposition counts were explicitly reset
     * </pre>
     *
     * <code>optional uint32 recomposition_reset_clicks = 8;</code>
     * @return Whether the recompositionResetClicks field is set.
     */
    @java.lang.Override
    public boolean hasRecompositionResetClicks() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Number of times the recomposition counts were explicitly reset
     * </pre>
     *
     * <code>optional uint32 recomposition_reset_clicks = 8;</code>
     * @return The recompositionResetClicks.
     */
    @java.lang.Override
    public int getRecompositionResetClicks() {
      return recompositionResetClicks_;
    }
    /**
     * <pre>
     * Number of times the recomposition counts were explicitly reset
     * </pre>
     *
     * <code>optional uint32 recomposition_reset_clicks = 8;</code>
     * @param value The recompositionResetClicks to set.
     * @return This builder for chaining.
     */
    public Builder setRecompositionResetClicks(int value) {

      recompositionResetClicks_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of times the recomposition counts were explicitly reset
     * </pre>
     *
     * <code>optional uint32 recomposition_reset_clicks = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearRecompositionResetClicks() {
      bitField0_ = (bitField0_ & ~0x00000080);
      recompositionResetClicks_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionCountsOn_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were shown
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_counts_on = 9;</code>
     * @return Whether the framesWithRecompositionCountsOn field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionCountsOn() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were shown
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_counts_on = 9;</code>
     * @return The framesWithRecompositionCountsOn.
     */
    @java.lang.Override
    public int getFramesWithRecompositionCountsOn() {
      return framesWithRecompositionCountsOn_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were shown
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_counts_on = 9;</code>
     * @param value The framesWithRecompositionCountsOn to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionCountsOn(int value) {

      framesWithRecompositionCountsOn_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were shown
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_counts_on = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionCountsOn() {
      bitField0_ = (bitField0_ & ~0x00000100);
      framesWithRecompositionCountsOn_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionColorRed_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in red
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_red = 10;</code>
     * @return Whether the framesWithRecompositionColorRed field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionColorRed() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in red
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_red = 10;</code>
     * @return The framesWithRecompositionColorRed.
     */
    @java.lang.Override
    public int getFramesWithRecompositionColorRed() {
      return framesWithRecompositionColorRed_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in red
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_red = 10;</code>
     * @param value The framesWithRecompositionColorRed to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionColorRed(int value) {

      framesWithRecompositionColorRed_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in red
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_red = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionColorRed() {
      bitField0_ = (bitField0_ & ~0x00000200);
      framesWithRecompositionColorRed_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionColorBlue_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in blue
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_blue = 11;</code>
     * @return Whether the framesWithRecompositionColorBlue field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionColorBlue() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in blue
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_blue = 11;</code>
     * @return The framesWithRecompositionColorBlue.
     */
    @java.lang.Override
    public int getFramesWithRecompositionColorBlue() {
      return framesWithRecompositionColorBlue_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in blue
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_blue = 11;</code>
     * @param value The framesWithRecompositionColorBlue to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionColorBlue(int value) {

      framesWithRecompositionColorBlue_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in blue
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_blue = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionColorBlue() {
      bitField0_ = (bitField0_ & ~0x00000400);
      framesWithRecompositionColorBlue_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionColorGreen_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in green
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_green = 12;</code>
     * @return Whether the framesWithRecompositionColorGreen field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionColorGreen() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in green
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_green = 12;</code>
     * @return The framesWithRecompositionColorGreen.
     */
    @java.lang.Override
    public int getFramesWithRecompositionColorGreen() {
      return framesWithRecompositionColorGreen_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in green
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_green = 12;</code>
     * @param value The framesWithRecompositionColorGreen to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionColorGreen(int value) {

      framesWithRecompositionColorGreen_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in green
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_green = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionColorGreen() {
      bitField0_ = (bitField0_ & ~0x00000800);
      framesWithRecompositionColorGreen_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionColorYellow_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in yellow
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_yellow = 13;</code>
     * @return Whether the framesWithRecompositionColorYellow field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionColorYellow() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in yellow
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_yellow = 13;</code>
     * @return The framesWithRecompositionColorYellow.
     */
    @java.lang.Override
    public int getFramesWithRecompositionColorYellow() {
      return framesWithRecompositionColorYellow_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in yellow
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_yellow = 13;</code>
     * @param value The framesWithRecompositionColorYellow to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionColorYellow(int value) {

      framesWithRecompositionColorYellow_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in yellow
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_yellow = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionColorYellow() {
      bitField0_ = (bitField0_ & ~0x00001000);
      framesWithRecompositionColorYellow_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionColorPurple_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in purple
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_purple = 14;</code>
     * @return Whether the framesWithRecompositionColorPurple field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionColorPurple() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in purple
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_purple = 14;</code>
     * @return The framesWithRecompositionColorPurple.
     */
    @java.lang.Override
    public int getFramesWithRecompositionColorPurple() {
      return framesWithRecompositionColorPurple_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in purple
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_purple = 14;</code>
     * @param value The framesWithRecompositionColorPurple to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionColorPurple(int value) {

      framesWithRecompositionColorPurple_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in purple
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_purple = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionColorPurple() {
      bitField0_ = (bitField0_ & ~0x00002000);
      framesWithRecompositionColorPurple_ = 0;
      onChanged();
      return this;
    }

    private int framesWithRecompositionColorOrange_ ;
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in orange
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_orange = 15;</code>
     * @return Whether the framesWithRecompositionColorOrange field is set.
     */
    @java.lang.Override
    public boolean hasFramesWithRecompositionColorOrange() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in orange
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_orange = 15;</code>
     * @return The framesWithRecompositionColorOrange.
     */
    @java.lang.Override
    public int getFramesWithRecompositionColorOrange() {
      return framesWithRecompositionColorOrange_;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in orange
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_orange = 15;</code>
     * @param value The framesWithRecompositionColorOrange to set.
     * @return This builder for chaining.
     */
    public Builder setFramesWithRecompositionColorOrange(int value) {

      framesWithRecompositionColorOrange_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of frames received where the recomposition counts were in orange
     * </pre>
     *
     * <code>optional uint32 frames_with_recomposition_color_orange = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearFramesWithRecompositionColorOrange() {
      bitField0_ = (bitField0_ & ~0x00004000);
      framesWithRecompositionColorOrange_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.DynamicLayoutInspectorCompose)
  }

  // @@protoc_insertion_point(class_scope:android_studio.DynamicLayoutInspectorCompose)
  private static final com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose();
  }

  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<DynamicLayoutInspectorCompose>
      PARSER = new com.google.protobuf.AbstractParser<DynamicLayoutInspectorCompose>() {
    @java.lang.Override
    public DynamicLayoutInspectorCompose parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DynamicLayoutInspectorCompose> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DynamicLayoutInspectorCompose> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorCompose getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

