// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface AppLinksAssistantEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.AppLinksAssistantEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id for
   * counting projects using the assistant.
   * </pre>
   *
   * <code>optional string project_id = 1;</code>
   * @return Whether the projectId field is set.
   */
  boolean hasProjectId();
  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id for
   * counting projects using the assistant.
   * </pre>
   *
   * <code>optional string project_id = 1;</code>
   * @return The projectId.
   */
  java.lang.String getProjectId();
  /**
   * <pre>
   * Client-side salted (rotating every 28 days), sha256 of the project id for
   * counting projects using the assistant.
   * </pre>
   *
   * <code>optional string project_id = 1;</code>
   * @return The bytes for projectId.
   */
  com.google.protobuf.ByteString
      getProjectIdBytes();

  /**
   * <pre>
   * The app_id is the id for the user's android app
   * which's salted on client-side (rotating every 28 days) then sha256
   * so it is anonymized and is unique per user, but has a 1-N relation.
   * It's for counting apps using the assistant.
   * </pre>
   *
   * <code>optional string app_id = 2;</code>
   * @return Whether the appId field is set.
   */
  boolean hasAppId();
  /**
   * <pre>
   * The app_id is the id for the user's android app
   * which's salted on client-side (rotating every 28 days) then sha256
   * so it is anonymized and is unique per user, but has a 1-N relation.
   * It's for counting apps using the assistant.
   * </pre>
   *
   * <code>optional string app_id = 2;</code>
   * @return The appId.
   */
  java.lang.String getAppId();
  /**
   * <pre>
   * The app_id is the id for the user's android app
   * which's salted on client-side (rotating every 28 days) then sha256
   * so it is anonymized and is unique per user, but has a 1-N relation.
   * It's for counting apps using the assistant.
   * </pre>
   *
   * <code>optional string app_id = 2;</code>
   * @return The bytes for appId.
   */
  com.google.protobuf.ByteString
      getAppIdBytes();

  /**
   * <pre>
   * The UI element source of event.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.EventSource event_source = 3;</code>
   * @return Whether the eventSource field is set.
   */
  boolean hasEventSource();
  /**
   * <pre>
   * The UI element source of event.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.EventSource event_source = 3;</code>
   * @return The eventSource.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.EventSource getEventSource();

  /**
   * <pre>
   * The state of the event.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.EventState event_state = 4;</code>
   * @return Whether the eventState field is set.
   */
  boolean hasEventState();
  /**
   * <pre>
   * The state of the event.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.EventState event_state = 4;</code>
   * @return The eventState.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.EventState getEventState();

  /**
   * <pre>
   * To check if there exists app links in the project
   * before using app links assistant.
   * </pre>
   *
   * <code>optional bool existing_app_links = 5;</code>
   * @return Whether the existingAppLinks field is set.
   */
  boolean hasExistingAppLinks();
  /**
   * <pre>
   * To check if there exists app links in the project
   * before using app links assistant.
   * </pre>
   *
   * <code>optional bool existing_app_links = 5;</code>
   * @return The existingAppLinks.
   */
  boolean getExistingAppLinks();

  /**
   * <pre>
   * Duration time that app links assistant panel opens. Unit is nanoseconds.
   * </pre>
   *
   * <code>optional int64 assistant_panel_open_duration = 6;</code>
   * @return Whether the assistantPanelOpenDuration field is set.
   */
  boolean hasAssistantPanelOpenDuration();
  /**
   * <pre>
   * Duration time that app links assistant panel opens. Unit is nanoseconds.
   * </pre>
   *
   * <code>optional int64 assistant_panel_open_duration = 6;</code>
   * @return The assistantPanelOpenDuration.
   */
  long getAssistantPanelOpenDuration();

  /**
   * <pre>
   * Following three fields is for the new added app link.
   * Set when event_source = URL_MAPPING_APP_LINK_ADD_DIALOG
   * &amp;&amp; event_state = COMPLETED
   * Path type of new app link.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.PathType app_link_path_type = 7;</code>
   * @return Whether the appLinkPathType field is set.
   */
  boolean hasAppLinkPathType();
  /**
   * <pre>
   * Following three fields is for the new added app link.
   * Set when event_source = URL_MAPPING_APP_LINK_ADD_DIALOG
   * &amp;&amp; event_state = COMPLETED
   * Path type of new app link.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.PathType app_link_path_type = 7;</code>
   * @return The appLinkPathType.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.PathType getAppLinkPathType();

  /**
   * <pre>
   * Whether a new activity is linked by app link.
   * </pre>
   *
   * <code>optional bool new_activity_linked = 8;</code>
   * @return Whether the newActivityLinked field is set.
   */
  boolean hasNewActivityLinked();
  /**
   * <pre>
   * Whether a new activity is linked by app link.
   * </pre>
   *
   * <code>optional bool new_activity_linked = 8;</code>
   * @return The newActivityLinked.
   */
  boolean getNewActivityLinked();

  /**
   * <pre>
   * Whether a new host is linked by app link.
   * </pre>
   *
   * <code>optional bool new_host_linked = 9;</code>
   * @return Whether the newHostLinked field is set.
   */
  boolean hasNewHostLinked();
  /**
   * <pre>
   * Whether a new host is linked by app link.
   * </pre>
   *
   * <code>optional bool new_host_linked = 9;</code>
   * @return The newHostLinked.
   */
  boolean getNewHostLinked();

  /**
   * <pre>
   * the project id as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>optional string raw_project_id = 10;</code>
   * @return Whether the rawProjectId field is set.
   */
  boolean hasRawProjectId();
  /**
   * <pre>
   * the project id as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>optional string raw_project_id = 10;</code>
   * @return The rawProjectId.
   */
  java.lang.String getRawProjectId();
  /**
   * <pre>
   * the project id as used in the playstore, e.g.
   * 'com.google.android.apps.maps'. This is sensitive information and
   * thus restricted to "raw" sawmill access. This data is only available in
   * and for PWG approved scenarios.
   * </pre>
   *
   * <code>optional string raw_project_id = 10;</code>
   * @return The bytes for rawProjectId.
   */
  com.google.protobuf.ByteString
      getRawProjectIdBytes();

  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.ValidationSummary validation_summary = 11 [lazy = true];</code>
   * @return Whether the validationSummary field is set.
   */
  boolean hasValidationSummary();
  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.ValidationSummary validation_summary = 11 [lazy = true];</code>
   * @return The validationSummary.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.ValidationSummary getValidationSummary();
  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.ValidationSummary validation_summary = 11 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.ValidationSummaryOrBuilder getValidationSummaryOrBuilder();

  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.IntentFilterFix intent_filter_fix = 12 [lazy = true];</code>
   * @return Whether the intentFilterFix field is set.
   */
  boolean hasIntentFilterFix();
  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.IntentFilterFix intent_filter_fix = 12 [lazy = true];</code>
   * @return The intentFilterFix.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.IntentFilterFix getIntentFilterFix();
  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.IntentFilterFix intent_filter_fix = 12 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.IntentFilterFixOrBuilder getIntentFilterFixOrBuilder();

  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.LinkFilterOption link_filter_option = 13;</code>
   * @return Whether the linkFilterOption field is set.
   */
  boolean hasLinkFilterOption();
  /**
   * <code>optional .android_studio.AppLinksAssistantEvent.LinkFilterOption link_filter_option = 13;</code>
   * @return The linkFilterOption.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.LinkFilterOption getLinkFilterOption();

  /**
   * <pre>
   * The information of an interacted link collected for impact tracking.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.LinksRecord links_record = 14 [lazy = true];</code>
   * @return Whether the linksRecord field is set.
   */
  boolean hasLinksRecord();
  /**
   * <pre>
   * The information of an interacted link collected for impact tracking.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.LinksRecord links_record = 14 [lazy = true];</code>
   * @return The linksRecord.
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.LinksRecord getLinksRecord();
  /**
   * <pre>
   * The information of an interacted link collected for impact tracking.
   * </pre>
   *
   * <code>optional .android_studio.AppLinksAssistantEvent.LinksRecord links_record = 14 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AppLinksAssistantEvent.LinksRecordOrBuilder getLinksRecordOrBuilder();
}
