// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface CpuApiTracingMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.CpuApiTracingMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * True if using sampling; false if using instrumentation.
   * </pre>
   *
   * <code>optional bool use_sampling = 1;</code>
   * @return Whether the useSampling field is set.
   */
  boolean hasUseSampling();
  /**
   * <pre>
   * True if using sampling; false if using instrumentation.
   * </pre>
   *
   * <code>optional bool use_sampling = 1;</code>
   * @return The useSampling.
   */
  boolean getUseSampling();

  /**
   * <pre>
   * A trace path is given and not null (we don't log the path as it might
   * contain PII).
   * </pre>
   *
   * <code>optional bool arg_trace_path = 2;</code>
   * @return Whether the argTracePath field is set.
   */
  boolean hasArgTracePath();
  /**
   * <pre>
   * A trace path is given and not null (we don't log the path as it might
   * contain PII).
   * </pre>
   *
   * <code>optional bool arg_trace_path = 2;</code>
   * @return The argTracePath.
   */
  boolean getArgTracePath();

  /**
   * <pre>
   * Buffer size as a given API argument (-1 if unavailable).
   * </pre>
   *
   * <code>optional int32 arg_buffer_size = 3;</code>
   * @return Whether the argBufferSize field is set.
   */
  boolean hasArgBufferSize();
  /**
   * <pre>
   * Buffer size as a given API argument (-1 if unavailable).
   * </pre>
   *
   * <code>optional int32 arg_buffer_size = 3;</code>
   * @return The argBufferSize.
   */
  int getArgBufferSize();

  /**
   * <pre>
   * Flags as a given API argument (-1 if unavailable).
   * </pre>
   *
   * <code>optional int32 arg_flags = 4;</code>
   * @return Whether the argFlags field is set.
   */
  boolean hasArgFlags();
  /**
   * <pre>
   * Flags as a given API argument (-1 if unavailable).
   * </pre>
   *
   * <code>optional int32 arg_flags = 4;</code>
   * @return The argFlags.
   */
  int getArgFlags();

  /**
   * <pre>
   * Sampling interval as a given API argument (-1 if unavailable).
   * </pre>
   *
   * <code>optional int32 arg_interval_us = 5;</code>
   * @return Whether the argIntervalUs field is set.
   */
  boolean hasArgIntervalUs();
  /**
   * <pre>
   * Sampling interval as a given API argument (-1 if unavailable).
   * </pre>
   *
   * <code>optional int32 arg_interval_us = 5;</code>
   * @return The argIntervalUs.
   */
  int getArgIntervalUs();
}
