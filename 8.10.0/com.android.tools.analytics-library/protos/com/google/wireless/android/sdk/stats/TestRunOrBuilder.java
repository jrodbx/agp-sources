// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface TestRunOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.TestRun)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Describes how tests where invoked.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestInvocationType test_invocation_type = 1;</code>
   * @return Whether the testInvocationType field is set.
   */
  boolean hasTestInvocationType();
  /**
   * <pre>
   * Describes how tests where invoked.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestInvocationType test_invocation_type = 1;</code>
   * @return The testInvocationType.
   */
  com.google.wireless.android.sdk.stats.TestRun.TestInvocationType getTestInvocationType();

  /**
   * <pre>
   * Total number of tests that ran.
   * </pre>
   *
   * <code>optional int32 number_of_tests_executed = 2;</code>
   * @return Whether the numberOfTestsExecuted field is set.
   */
  boolean hasNumberOfTestsExecuted();
  /**
   * <pre>
   * Total number of tests that ran.
   * </pre>
   *
   * <code>optional int32 number_of_tests_executed = 2;</code>
   * @return The numberOfTestsExecuted.
   */
  int getNumberOfTestsExecuted();

  /**
   * <pre>
   * What kind of test is run.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestKind test_kind = 3;</code>
   * @return Whether the testKind field is set.
   */
  boolean hasTestKind();
  /**
   * <pre>
   * What kind of test is run.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestKind test_kind = 3;</code>
   * @return The testKind.
   */
  com.google.wireless.android.sdk.stats.TestRun.TestKind getTestKind();

  /**
   * <pre>
   * Whether the test run finished successfully (regardless of results) or
   * tooling error happened.
   * </pre>
   *
   * <code>optional bool crashed = 4;</code>
   * @return Whether the crashed field is set.
   */
  boolean hasCrashed();
  /**
   * <pre>
   * Whether the test run finished successfully (regardless of results) or
   * tooling error happened.
   * </pre>
   *
   * <code>optional bool crashed = 4;</code>
   * @return The crashed.
   */
  boolean getCrashed();

  /**
   * <pre>
   * Set when test_invocation_type = GRADLE or ANDROID_STUDIO_THROUGH_GRADLE
   * </pre>
   *
   * <code>optional string gradle_version = 5;</code>
   * @return Whether the gradleVersion field is set.
   */
  boolean hasGradleVersion();
  /**
   * <pre>
   * Set when test_invocation_type = GRADLE or ANDROID_STUDIO_THROUGH_GRADLE
   * </pre>
   *
   * <code>optional string gradle_version = 5;</code>
   * @return The gradleVersion.
   */
  java.lang.String getGradleVersion();
  /**
   * <pre>
   * Set when test_invocation_type = GRADLE or ANDROID_STUDIO_THROUGH_GRADLE
   * </pre>
   *
   * <code>optional string gradle_version = 5;</code>
   * @return The bytes for gradleVersion.
   */
  com.google.protobuf.ByteString
      getGradleVersionBytes();

  /**
   * <pre>
   * Did the user/project enable code coverage on this test run?
   * </pre>
   *
   * <code>optional bool code_coverage_enabled = 6;</code>
   * @return Whether the codeCoverageEnabled field is set.
   */
  boolean hasCodeCoverageEnabled();
  /**
   * <pre>
   * Did the user/project enable code coverage on this test run?
   * </pre>
   *
   * <code>optional bool code_coverage_enabled = 6;</code>
   * @return The codeCoverageEnabled.
   */
  boolean getCodeCoverageEnabled();

  /**
   * <pre>
   * Provides details on commonly used test libraries.
   * </pre>
   *
   * <code>optional .android_studio.TestLibraries test_libraries = 7 [lazy = true];</code>
   * @return Whether the testLibraries field is set.
   */
  boolean hasTestLibraries();
  /**
   * <pre>
   * Provides details on commonly used test libraries.
   * </pre>
   *
   * <code>optional .android_studio.TestLibraries test_libraries = 7 [lazy = true];</code>
   * @return The testLibraries.
   */
  com.google.wireless.android.sdk.stats.TestLibraries getTestLibraries();
  /**
   * <pre>
   * Provides details on commonly used test libraries.
   * </pre>
   *
   * <code>optional .android_studio.TestLibraries test_libraries = 7 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TestLibrariesOrBuilder getTestLibrariesOrBuilder();

  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestExecution test_execution = 8;</code>
   * @return Whether the testExecution field is set.
   */
  boolean hasTestExecution();
  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>optional .android_studio.TestRun.TestExecution test_execution = 8;</code>
   * @return The testExecution.
   */
  com.google.wireless.android.sdk.stats.TestRun.TestExecution getTestExecution();

  /**
   * <pre>
   * Whether the feature Automatic Snapshot on Test Failure is enabled.
   * Currently only set when test_invocation_type =
   * ANDROID_STUDIO_THROUGH_GRADLE.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.AutomaticSnapshotOnFailure automatic_snapshot_on_failure = 9 [lazy = true];</code>
   * @return Whether the automaticSnapshotOnFailure field is set.
   */
  boolean hasAutomaticSnapshotOnFailure();
  /**
   * <pre>
   * Whether the feature Automatic Snapshot on Test Failure is enabled.
   * Currently only set when test_invocation_type =
   * ANDROID_STUDIO_THROUGH_GRADLE.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.AutomaticSnapshotOnFailure automatic_snapshot_on_failure = 9 [lazy = true];</code>
   * @return The automaticSnapshotOnFailure.
   */
  com.google.wireless.android.sdk.stats.TestRun.AutomaticSnapshotOnFailure getAutomaticSnapshotOnFailure();
  /**
   * <pre>
   * Whether the feature Automatic Snapshot on Test Failure is enabled.
   * Currently only set when test_invocation_type =
   * ANDROID_STUDIO_THROUGH_GRADLE.
   * </pre>
   *
   * <code>optional .android_studio.TestRun.AutomaticSnapshotOnFailure automatic_snapshot_on_failure = 9 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TestRun.AutomaticSnapshotOnFailureOrBuilder getAutomaticSnapshotOnFailureOrBuilder();

  /**
   * <pre>
   * Only set when test_kind=PREVIEW_SCREENSHOT_TEST
   * </pre>
   *
   * <code>optional .android_studio.TestRun.PreviewScreenshotRun preview_screenshot_run = 10 [lazy = true];</code>
   * @return Whether the previewScreenshotRun field is set.
   */
  boolean hasPreviewScreenshotRun();
  /**
   * <pre>
   * Only set when test_kind=PREVIEW_SCREENSHOT_TEST
   * </pre>
   *
   * <code>optional .android_studio.TestRun.PreviewScreenshotRun preview_screenshot_run = 10 [lazy = true];</code>
   * @return The previewScreenshotRun.
   */
  com.google.wireless.android.sdk.stats.TestRun.PreviewScreenshotRun getPreviewScreenshotRun();
  /**
   * <pre>
   * Only set when test_kind=PREVIEW_SCREENSHOT_TEST
   * </pre>
   *
   * <code>optional .android_studio.TestRun.PreviewScreenshotRun preview_screenshot_run = 10 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.TestRun.PreviewScreenshotRunOrBuilder getPreviewScreenshotRunOrBuilder();

  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>repeated .android_studio.DeviceTestSpanProfile device_test_span_profiles = 11;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.DeviceTestSpanProfile> 
      getDeviceTestSpanProfilesList();
  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>repeated .android_studio.DeviceTestSpanProfile device_test_span_profiles = 11;</code>
   */
  com.google.wireless.android.sdk.stats.DeviceTestSpanProfile getDeviceTestSpanProfiles(int index);
  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>repeated .android_studio.DeviceTestSpanProfile device_test_span_profiles = 11;</code>
   */
  int getDeviceTestSpanProfilesCount();
  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>repeated .android_studio.DeviceTestSpanProfile device_test_span_profiles = 11;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.DeviceTestSpanProfileOrBuilder> 
      getDeviceTestSpanProfilesOrBuilderList();
  /**
   * <pre>
   * Only set when test_kind=INSTRUMENTATION_TEST
   * </pre>
   *
   * <code>repeated .android_studio.DeviceTestSpanProfile device_test_span_profiles = 11;</code>
   */
  com.google.wireless.android.sdk.stats.DeviceTestSpanProfileOrBuilder getDeviceTestSpanProfilesOrBuilder(
      int index);
}
