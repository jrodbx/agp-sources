// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/android_device_provider_ddmlib_config.proto

package com.android.tools.utp.plugins.deviceprovider.ddmlib.proto;

public final class AndroidDeviceProviderDdmlibConfigProto {
  private AndroidDeviceProviderDdmlibConfigProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DdmlibAndroidDeviceProviderConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Provides configuration values for the local android device provider.
     * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
     * </pre>
     *
     * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
     * @return Whether the localAndroidDeviceProviderConfig field is set.
     */
    boolean hasLocalAndroidDeviceProviderConfig();
    /**
     * <pre>
     * Provides configuration values for the local android device provider.
     * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
     * </pre>
     *
     * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
     * @return The localAndroidDeviceProviderConfig.
     */
    com.google.protobuf.Any getLocalAndroidDeviceProviderConfig();
    /**
     * <pre>
     * Provides configuration values for the local android device provider.
     * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
     * </pre>
     *
     * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
     */
    com.google.protobuf.AnyOrBuilder getLocalAndroidDeviceProviderConfigOrBuilder();

    /**
     * <pre>
     * DdmlibAndroidDeviceProvider uninstalls APKs on the device when an installation failure
     * occurs due to incompatible APKs such as INSTALL_FAILED_UPDATE_INCOMPATIBLE,
     * INCONSISTENT_CERTIFICATES, etc.
     * </pre>
     *
     * <code>bool uninstall_incompatible_apks = 2;</code>
     * @return The uninstallIncompatibleApks.
     */
    boolean getUninstallIncompatibleApks();
  }
  /**
   * <pre>
   * A configuration of DdmlibAndroidDeviceProvider plugin.
   * </pre>
   *
   * Protobuf type {@code com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig}
   */
  public static final class DdmlibAndroidDeviceProviderConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig)
      DdmlibAndroidDeviceProviderConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DdmlibAndroidDeviceProviderConfig.newBuilder() to construct.
    private DdmlibAndroidDeviceProviderConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DdmlibAndroidDeviceProviderConfig() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DdmlibAndroidDeviceProviderConfig();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.class, com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.Builder.class);
    }

    private int bitField0_;
    public static final int LOCAL_ANDROID_DEVICE_PROVIDER_CONFIG_FIELD_NUMBER = 1;
    private com.google.protobuf.Any localAndroidDeviceProviderConfig_;
    /**
     * <pre>
     * Provides configuration values for the local android device provider.
     * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
     * </pre>
     *
     * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
     * @return Whether the localAndroidDeviceProviderConfig field is set.
     */
    @java.lang.Override
    public boolean hasLocalAndroidDeviceProviderConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Provides configuration values for the local android device provider.
     * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
     * </pre>
     *
     * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
     * @return The localAndroidDeviceProviderConfig.
     */
    @java.lang.Override
    public com.google.protobuf.Any getLocalAndroidDeviceProviderConfig() {
      return localAndroidDeviceProviderConfig_ == null ? com.google.protobuf.Any.getDefaultInstance() : localAndroidDeviceProviderConfig_;
    }
    /**
     * <pre>
     * Provides configuration values for the local android device provider.
     * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
     * </pre>
     *
     * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.AnyOrBuilder getLocalAndroidDeviceProviderConfigOrBuilder() {
      return localAndroidDeviceProviderConfig_ == null ? com.google.protobuf.Any.getDefaultInstance() : localAndroidDeviceProviderConfig_;
    }

    public static final int UNINSTALL_INCOMPATIBLE_APKS_FIELD_NUMBER = 2;
    private boolean uninstallIncompatibleApks_ = false;
    /**
     * <pre>
     * DdmlibAndroidDeviceProvider uninstalls APKs on the device when an installation failure
     * occurs due to incompatible APKs such as INSTALL_FAILED_UPDATE_INCOMPATIBLE,
     * INCONSISTENT_CERTIFICATES, etc.
     * </pre>
     *
     * <code>bool uninstall_incompatible_apks = 2;</code>
     * @return The uninstallIncompatibleApks.
     */
    @java.lang.Override
    public boolean getUninstallIncompatibleApks() {
      return uninstallIncompatibleApks_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getLocalAndroidDeviceProviderConfig());
      }
      if (uninstallIncompatibleApks_ != false) {
        output.writeBool(2, uninstallIncompatibleApks_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getLocalAndroidDeviceProviderConfig());
      }
      if (uninstallIncompatibleApks_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, uninstallIncompatibleApks_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig)) {
        return super.equals(obj);
      }
      com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig other = (com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig) obj;

      if (hasLocalAndroidDeviceProviderConfig() != other.hasLocalAndroidDeviceProviderConfig()) return false;
      if (hasLocalAndroidDeviceProviderConfig()) {
        if (!getLocalAndroidDeviceProviderConfig()
            .equals(other.getLocalAndroidDeviceProviderConfig())) return false;
      }
      if (getUninstallIncompatibleApks()
          != other.getUninstallIncompatibleApks()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLocalAndroidDeviceProviderConfig()) {
        hash = (37 * hash) + LOCAL_ANDROID_DEVICE_PROVIDER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getLocalAndroidDeviceProviderConfig().hashCode();
      }
      hash = (37 * hash) + UNINSTALL_INCOMPATIBLE_APKS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUninstallIncompatibleApks());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A configuration of DdmlibAndroidDeviceProvider plugin.
     * </pre>
     *
     * Protobuf type {@code com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig)
        com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.class, com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.Builder.class);
      }

      // Construct using com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLocalAndroidDeviceProviderConfigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        localAndroidDeviceProviderConfig_ = null;
        if (localAndroidDeviceProviderConfigBuilder_ != null) {
          localAndroidDeviceProviderConfigBuilder_.dispose();
          localAndroidDeviceProviderConfigBuilder_ = null;
        }
        uninstallIncompatibleApks_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_descriptor;
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig getDefaultInstanceForType() {
        return com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig build() {
        com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig buildPartial() {
        com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig result = new com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.localAndroidDeviceProviderConfig_ = localAndroidDeviceProviderConfigBuilder_ == null
              ? localAndroidDeviceProviderConfig_
              : localAndroidDeviceProviderConfigBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.uninstallIncompatibleApks_ = uninstallIncompatibleApks_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig) {
          return mergeFrom((com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig other) {
        if (other == com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig.getDefaultInstance()) return this;
        if (other.hasLocalAndroidDeviceProviderConfig()) {
          mergeLocalAndroidDeviceProviderConfig(other.getLocalAndroidDeviceProviderConfig());
        }
        if (other.getUninstallIncompatibleApks() != false) {
          setUninstallIncompatibleApks(other.getUninstallIncompatibleApks());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getLocalAndroidDeviceProviderConfigFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                uninstallIncompatibleApks_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Any localAndroidDeviceProviderConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> localAndroidDeviceProviderConfigBuilder_;
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       * @return Whether the localAndroidDeviceProviderConfig field is set.
       */
      public boolean hasLocalAndroidDeviceProviderConfig() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       * @return The localAndroidDeviceProviderConfig.
       */
      public com.google.protobuf.Any getLocalAndroidDeviceProviderConfig() {
        if (localAndroidDeviceProviderConfigBuilder_ == null) {
          return localAndroidDeviceProviderConfig_ == null ? com.google.protobuf.Any.getDefaultInstance() : localAndroidDeviceProviderConfig_;
        } else {
          return localAndroidDeviceProviderConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      public Builder setLocalAndroidDeviceProviderConfig(com.google.protobuf.Any value) {
        if (localAndroidDeviceProviderConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          localAndroidDeviceProviderConfig_ = value;
        } else {
          localAndroidDeviceProviderConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      public Builder setLocalAndroidDeviceProviderConfig(
          com.google.protobuf.Any.Builder builderForValue) {
        if (localAndroidDeviceProviderConfigBuilder_ == null) {
          localAndroidDeviceProviderConfig_ = builderForValue.build();
        } else {
          localAndroidDeviceProviderConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      public Builder mergeLocalAndroidDeviceProviderConfig(com.google.protobuf.Any value) {
        if (localAndroidDeviceProviderConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            localAndroidDeviceProviderConfig_ != null &&
            localAndroidDeviceProviderConfig_ != com.google.protobuf.Any.getDefaultInstance()) {
            getLocalAndroidDeviceProviderConfigBuilder().mergeFrom(value);
          } else {
            localAndroidDeviceProviderConfig_ = value;
          }
        } else {
          localAndroidDeviceProviderConfigBuilder_.mergeFrom(value);
        }
        if (localAndroidDeviceProviderConfig_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      public Builder clearLocalAndroidDeviceProviderConfig() {
        bitField0_ = (bitField0_ & ~0x00000001);
        localAndroidDeviceProviderConfig_ = null;
        if (localAndroidDeviceProviderConfigBuilder_ != null) {
          localAndroidDeviceProviderConfigBuilder_.dispose();
          localAndroidDeviceProviderConfigBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      public com.google.protobuf.Any.Builder getLocalAndroidDeviceProviderConfigBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLocalAndroidDeviceProviderConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      public com.google.protobuf.AnyOrBuilder getLocalAndroidDeviceProviderConfigOrBuilder() {
        if (localAndroidDeviceProviderConfigBuilder_ != null) {
          return localAndroidDeviceProviderConfigBuilder_.getMessageOrBuilder();
        } else {
          return localAndroidDeviceProviderConfig_ == null ?
              com.google.protobuf.Any.getDefaultInstance() : localAndroidDeviceProviderConfig_;
        }
      }
      /**
       * <pre>
       * Provides configuration values for the local android device provider.
       * Message must be com.google.testing.platform.proto.api.config.LocalAndroidDeviceProviderProto.LocalAndroidDeviceProvider.
       * </pre>
       *
       * <code>.google.protobuf.Any local_android_device_provider_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getLocalAndroidDeviceProviderConfigFieldBuilder() {
        if (localAndroidDeviceProviderConfigBuilder_ == null) {
          localAndroidDeviceProviderConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  getLocalAndroidDeviceProviderConfig(),
                  getParentForChildren(),
                  isClean());
          localAndroidDeviceProviderConfig_ = null;
        }
        return localAndroidDeviceProviderConfigBuilder_;
      }

      private boolean uninstallIncompatibleApks_ ;
      /**
       * <pre>
       * DdmlibAndroidDeviceProvider uninstalls APKs on the device when an installation failure
       * occurs due to incompatible APKs such as INSTALL_FAILED_UPDATE_INCOMPATIBLE,
       * INCONSISTENT_CERTIFICATES, etc.
       * </pre>
       *
       * <code>bool uninstall_incompatible_apks = 2;</code>
       * @return The uninstallIncompatibleApks.
       */
      @java.lang.Override
      public boolean getUninstallIncompatibleApks() {
        return uninstallIncompatibleApks_;
      }
      /**
       * <pre>
       * DdmlibAndroidDeviceProvider uninstalls APKs on the device when an installation failure
       * occurs due to incompatible APKs such as INSTALL_FAILED_UPDATE_INCOMPATIBLE,
       * INCONSISTENT_CERTIFICATES, etc.
       * </pre>
       *
       * <code>bool uninstall_incompatible_apks = 2;</code>
       * @param value The uninstallIncompatibleApks to set.
       * @return This builder for chaining.
       */
      public Builder setUninstallIncompatibleApks(boolean value) {

        uninstallIncompatibleApks_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DdmlibAndroidDeviceProvider uninstalls APKs on the device when an installation failure
       * occurs due to incompatible APKs such as INSTALL_FAILED_UPDATE_INCOMPATIBLE,
       * INCONSISTENT_CERTIFICATES, etc.
       * </pre>
       *
       * <code>bool uninstall_incompatible_apks = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUninstallIncompatibleApks() {
        bitField0_ = (bitField0_ & ~0x00000002);
        uninstallIncompatibleApks_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig)
    }

    // @@protoc_insertion_point(class_scope:com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.DdmlibAndroidDeviceProviderConfig)
    private static final com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig();
    }

    public static com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DdmlibAndroidDeviceProviderConfig>
        PARSER = new com.google.protobuf.AbstractParser<DdmlibAndroidDeviceProviderConfig>() {
      @java.lang.Override
      public DdmlibAndroidDeviceProviderConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DdmlibAndroidDeviceProviderConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DdmlibAndroidDeviceProviderConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.tools.utp.plugins.deviceprovider.ddmlib.proto.AndroidDeviceProviderDdmlibConfigProto.DdmlibAndroidDeviceProviderConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:src/main/proto/android_device_provider" +
      "_ddmlib_config.proto\0229com.android.tools." +
      "utp.plugins.deviceprovider.ddmlib.proto\032" +
      "\031google/protobuf/any.proto\"\214\001\n!DdmlibAnd" +
      "roidDeviceProviderConfig\022B\n$local_androi" +
      "d_device_provider_config\030\001 \001(\0132\024.google." +
      "protobuf.Any\022#\n\033uninstall_incompatible_a" +
      "pks\030\002 \001(\010Bc\n9com.android.tools.utp.plugi" +
      "ns.deviceprovider.ddmlib.protoB&AndroidD" +
      "eviceProviderDdmlibConfigProtob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.AnyProto.getDescriptor(),
        });
    internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_tools_utp_plugins_deviceprovider_ddmlib_proto_DdmlibAndroidDeviceProviderConfig_descriptor,
        new java.lang.String[] { "LocalAndroidDeviceProviderConfig", "UninstallIncompatibleApks", });
    com.google.protobuf.AnyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
