// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Stats on Studio's performance
 * </pre>
 *
 * Protobuf type {@code android_studio.StudioPerformanceStats}
 */
public final class StudioPerformanceStats extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.StudioPerformanceStats)
    StudioPerformanceStatsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StudioPerformanceStats.newBuilder() to construct.
  private StudioPerformanceStats(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StudioPerformanceStats() {
    gcPauseInfo_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new StudioPerformanceStats();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioPerformanceStats_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioPerformanceStats_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.StudioPerformanceStats.class, com.google.wireless.android.sdk.stats.StudioPerformanceStats.Builder.class);
  }

  private int bitField0_;
  public static final int UI_FREEZE_TIME_MS_FIELD_NUMBER = 1;
  private int uiFreezeTimeMs_ = 0;
  /**
   * <pre>
   * Time for which the UI was blocked in milliseconds
   * </pre>
   *
   * <code>optional int32 ui_freeze_time_ms = 1;</code>
   * @return Whether the uiFreezeTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasUiFreezeTimeMs() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Time for which the UI was blocked in milliseconds
   * </pre>
   *
   * <code>optional int32 ui_freeze_time_ms = 1;</code>
   * @return The uiFreezeTimeMs.
   */
  @java.lang.Override
  public int getUiFreezeTimeMs() {
    return uiFreezeTimeMs_;
  }

  public static final int EVENT_SERVICE_TIME_MS_FIELD_NUMBER = 2;
  private com.google.wireless.android.sdk.stats.Histogram eventServiceTimeMs_;
  /**
   * <pre>
   * Distribution of times taken to process events in the main event loop,
   * in milliseconds. The number of samples is approximately equal to the
   * number of events handled, quantized by event_service_time_sample_period.
   * For example, if the 10-20ms bin contains 100 samples, it means that
   * approximately 100 events took between 10 and 20 milliseconds to process.
   * </pre>
   *
   * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
   * @return Whether the eventServiceTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasEventServiceTimeMs() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Distribution of times taken to process events in the main event loop,
   * in milliseconds. The number of samples is approximately equal to the
   * number of events handled, quantized by event_service_time_sample_period.
   * For example, if the 10-20ms bin contains 100 samples, it means that
   * approximately 100 events took between 10 and 20 milliseconds to process.
   * </pre>
   *
   * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
   * @return The eventServiceTimeMs.
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.Histogram getEventServiceTimeMs() {
    return eventServiceTimeMs_ == null ? com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : eventServiceTimeMs_;
  }
  /**
   * <pre>
   * Distribution of times taken to process events in the main event loop,
   * in milliseconds. The number of samples is approximately equal to the
   * number of events handled, quantized by event_service_time_sample_period.
   * For example, if the 10-20ms bin contains 100 samples, it means that
   * approximately 100 events took between 10 and 20 milliseconds to process.
   * </pre>
   *
   * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.HistogramOrBuilder getEventServiceTimeMsOrBuilder() {
    return eventServiceTimeMs_ == null ? com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : eventServiceTimeMs_;
  }

  public static final int EVENT_SERVICE_TIME_SAMPLE_PERIOD_FIELD_NUMBER = 3;
  private int eventServiceTimeSamplePeriod_ = 0;
  /**
   * <pre>
   * Sample period used to compute the event_service_time_ms histogram. For
   * example, if this is set to 10 then the service time was measured for
   * every 10th event, and each measurement counted for 10 samples in
   * the histogram. This is mainly intended for computing error bars
   * and is not needed for interpreting the histogram itself.
   * </pre>
   *
   * <code>optional int32 event_service_time_sample_period = 3;</code>
   * @return Whether the eventServiceTimeSamplePeriod field is set.
   */
  @java.lang.Override
  public boolean hasEventServiceTimeSamplePeriod() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Sample period used to compute the event_service_time_ms histogram. For
   * example, if this is set to 10 then the service time was measured for
   * every 10th event, and each measurement counted for 10 samples in
   * the histogram. This is mainly intended for computing error bars
   * and is not needed for interpreting the histogram itself.
   * </pre>
   *
   * <code>optional int32 event_service_time_sample_period = 3;</code>
   * @return The eventServiceTimeSamplePeriod.
   */
  @java.lang.Override
  public int getEventServiceTimeSamplePeriod() {
    return eventServiceTimeSamplePeriod_;
  }

  public static final int WRITE_LOCK_WAIT_TIME_MS_FIELD_NUMBER = 4;
  private com.google.wireless.android.sdk.stats.Histogram writeLockWaitTimeMs_;
  /**
   * <pre>
   * Histogram of wait times for the global write lock
   * </pre>
   *
   * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
   * @return Whether the writeLockWaitTimeMs field is set.
   */
  @java.lang.Override
  public boolean hasWriteLockWaitTimeMs() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Histogram of wait times for the global write lock
   * </pre>
   *
   * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
   * @return The writeLockWaitTimeMs.
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.Histogram getWriteLockWaitTimeMs() {
    return writeLockWaitTimeMs_ == null ? com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : writeLockWaitTimeMs_;
  }
  /**
   * <pre>
   * Histogram of wait times for the global write lock
   * </pre>
   *
   * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.HistogramOrBuilder getWriteLockWaitTimeMsOrBuilder() {
    return writeLockWaitTimeMs_ == null ? com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : writeLockWaitTimeMs_;
  }

  public static final int GC_PAUSE_INFO_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<com.google.wireless.android.sdk.stats.GcPauseInfo> gcPauseInfo_;
  /**
   * <pre>
   * Information about GC pause time distributions, one for each collector that
   * is active.
   * </pre>
   *
   * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.wireless.android.sdk.stats.GcPauseInfo> getGcPauseInfoList() {
    return gcPauseInfo_;
  }
  /**
   * <pre>
   * Information about GC pause time distributions, one for each collector that
   * is active.
   * </pre>
   *
   * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder> 
      getGcPauseInfoOrBuilderList() {
    return gcPauseInfo_;
  }
  /**
   * <pre>
   * Information about GC pause time distributions, one for each collector that
   * is active.
   * </pre>
   *
   * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
   */
  @java.lang.Override
  public int getGcPauseInfoCount() {
    return gcPauseInfo_.size();
  }
  /**
   * <pre>
   * Information about GC pause time distributions, one for each collector that
   * is active.
   * </pre>
   *
   * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GcPauseInfo getGcPauseInfo(int index) {
    return gcPauseInfo_.get(index);
  }
  /**
   * <pre>
   * Information about GC pause time distributions, one for each collector that
   * is active.
   * </pre>
   *
   * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder getGcPauseInfoOrBuilder(
      int index) {
    return gcPauseInfo_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt32(1, uiFreezeTimeMs_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getEventServiceTimeMs());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt32(3, eventServiceTimeSamplePeriod_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(4, getWriteLockWaitTimeMs());
    }
    for (int i = 0; i < gcPauseInfo_.size(); i++) {
      output.writeMessage(5, gcPauseInfo_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, uiFreezeTimeMs_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getEventServiceTimeMs());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, eventServiceTimeSamplePeriod_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getWriteLockWaitTimeMs());
    }
    for (int i = 0; i < gcPauseInfo_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, gcPauseInfo_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.StudioPerformanceStats)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.StudioPerformanceStats other = (com.google.wireless.android.sdk.stats.StudioPerformanceStats) obj;

    if (hasUiFreezeTimeMs() != other.hasUiFreezeTimeMs()) return false;
    if (hasUiFreezeTimeMs()) {
      if (getUiFreezeTimeMs()
          != other.getUiFreezeTimeMs()) return false;
    }
    if (hasEventServiceTimeMs() != other.hasEventServiceTimeMs()) return false;
    if (hasEventServiceTimeMs()) {
      if (!getEventServiceTimeMs()
          .equals(other.getEventServiceTimeMs())) return false;
    }
    if (hasEventServiceTimeSamplePeriod() != other.hasEventServiceTimeSamplePeriod()) return false;
    if (hasEventServiceTimeSamplePeriod()) {
      if (getEventServiceTimeSamplePeriod()
          != other.getEventServiceTimeSamplePeriod()) return false;
    }
    if (hasWriteLockWaitTimeMs() != other.hasWriteLockWaitTimeMs()) return false;
    if (hasWriteLockWaitTimeMs()) {
      if (!getWriteLockWaitTimeMs()
          .equals(other.getWriteLockWaitTimeMs())) return false;
    }
    if (!getGcPauseInfoList()
        .equals(other.getGcPauseInfoList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasUiFreezeTimeMs()) {
      hash = (37 * hash) + UI_FREEZE_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + getUiFreezeTimeMs();
    }
    if (hasEventServiceTimeMs()) {
      hash = (37 * hash) + EVENT_SERVICE_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + getEventServiceTimeMs().hashCode();
    }
    if (hasEventServiceTimeSamplePeriod()) {
      hash = (37 * hash) + EVENT_SERVICE_TIME_SAMPLE_PERIOD_FIELD_NUMBER;
      hash = (53 * hash) + getEventServiceTimeSamplePeriod();
    }
    if (hasWriteLockWaitTimeMs()) {
      hash = (37 * hash) + WRITE_LOCK_WAIT_TIME_MS_FIELD_NUMBER;
      hash = (53 * hash) + getWriteLockWaitTimeMs().hashCode();
    }
    if (getGcPauseInfoCount() > 0) {
      hash = (37 * hash) + GC_PAUSE_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getGcPauseInfoList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.StudioPerformanceStats prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Stats on Studio's performance
   * </pre>
   *
   * Protobuf type {@code android_studio.StudioPerformanceStats}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.StudioPerformanceStats)
      com.google.wireless.android.sdk.stats.StudioPerformanceStatsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioPerformanceStats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioPerformanceStats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.StudioPerformanceStats.class, com.google.wireless.android.sdk.stats.StudioPerformanceStats.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.StudioPerformanceStats.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getEventServiceTimeMsFieldBuilder();
        getWriteLockWaitTimeMsFieldBuilder();
        getGcPauseInfoFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      uiFreezeTimeMs_ = 0;
      eventServiceTimeMs_ = null;
      if (eventServiceTimeMsBuilder_ != null) {
        eventServiceTimeMsBuilder_.dispose();
        eventServiceTimeMsBuilder_ = null;
      }
      eventServiceTimeSamplePeriod_ = 0;
      writeLockWaitTimeMs_ = null;
      if (writeLockWaitTimeMsBuilder_ != null) {
        writeLockWaitTimeMsBuilder_.dispose();
        writeLockWaitTimeMsBuilder_ = null;
      }
      if (gcPauseInfoBuilder_ == null) {
        gcPauseInfo_ = java.util.Collections.emptyList();
      } else {
        gcPauseInfo_ = null;
        gcPauseInfoBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioPerformanceStats_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.StudioPerformanceStats getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.StudioPerformanceStats.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.StudioPerformanceStats build() {
      com.google.wireless.android.sdk.stats.StudioPerformanceStats result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.StudioPerformanceStats buildPartial() {
      com.google.wireless.android.sdk.stats.StudioPerformanceStats result = new com.google.wireless.android.sdk.stats.StudioPerformanceStats(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.wireless.android.sdk.stats.StudioPerformanceStats result) {
      if (gcPauseInfoBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          gcPauseInfo_ = java.util.Collections.unmodifiableList(gcPauseInfo_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.gcPauseInfo_ = gcPauseInfo_;
      } else {
        result.gcPauseInfo_ = gcPauseInfoBuilder_.build();
      }
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.StudioPerformanceStats result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.uiFreezeTimeMs_ = uiFreezeTimeMs_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.eventServiceTimeMs_ = eventServiceTimeMsBuilder_ == null
            ? eventServiceTimeMs_
            : eventServiceTimeMsBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.eventServiceTimeSamplePeriod_ = eventServiceTimeSamplePeriod_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.writeLockWaitTimeMs_ = writeLockWaitTimeMsBuilder_ == null
            ? writeLockWaitTimeMs_
            : writeLockWaitTimeMsBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.StudioPerformanceStats) {
        return mergeFrom((com.google.wireless.android.sdk.stats.StudioPerformanceStats)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.StudioPerformanceStats other) {
      if (other == com.google.wireless.android.sdk.stats.StudioPerformanceStats.getDefaultInstance()) return this;
      if (other.hasUiFreezeTimeMs()) {
        setUiFreezeTimeMs(other.getUiFreezeTimeMs());
      }
      if (other.hasEventServiceTimeMs()) {
        mergeEventServiceTimeMs(other.getEventServiceTimeMs());
      }
      if (other.hasEventServiceTimeSamplePeriod()) {
        setEventServiceTimeSamplePeriod(other.getEventServiceTimeSamplePeriod());
      }
      if (other.hasWriteLockWaitTimeMs()) {
        mergeWriteLockWaitTimeMs(other.getWriteLockWaitTimeMs());
      }
      if (gcPauseInfoBuilder_ == null) {
        if (!other.gcPauseInfo_.isEmpty()) {
          if (gcPauseInfo_.isEmpty()) {
            gcPauseInfo_ = other.gcPauseInfo_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureGcPauseInfoIsMutable();
            gcPauseInfo_.addAll(other.gcPauseInfo_);
          }
          onChanged();
        }
      } else {
        if (!other.gcPauseInfo_.isEmpty()) {
          if (gcPauseInfoBuilder_.isEmpty()) {
            gcPauseInfoBuilder_.dispose();
            gcPauseInfoBuilder_ = null;
            gcPauseInfo_ = other.gcPauseInfo_;
            bitField0_ = (bitField0_ & ~0x00000010);
            gcPauseInfoBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGcPauseInfoFieldBuilder() : null;
          } else {
            gcPauseInfoBuilder_.addAllMessages(other.gcPauseInfo_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              uiFreezeTimeMs_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getEventServiceTimeMsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              eventServiceTimeSamplePeriod_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              input.readMessage(
                  getWriteLockWaitTimeMsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              com.google.wireless.android.sdk.stats.GcPauseInfo m =
                  input.readMessage(
                      com.google.wireless.android.sdk.stats.GcPauseInfo.PARSER,
                      extensionRegistry);
              if (gcPauseInfoBuilder_ == null) {
                ensureGcPauseInfoIsMutable();
                gcPauseInfo_.add(m);
              } else {
                gcPauseInfoBuilder_.addMessage(m);
              }
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int uiFreezeTimeMs_ ;
    /**
     * <pre>
     * Time for which the UI was blocked in milliseconds
     * </pre>
     *
     * <code>optional int32 ui_freeze_time_ms = 1;</code>
     * @return Whether the uiFreezeTimeMs field is set.
     */
    @java.lang.Override
    public boolean hasUiFreezeTimeMs() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Time for which the UI was blocked in milliseconds
     * </pre>
     *
     * <code>optional int32 ui_freeze_time_ms = 1;</code>
     * @return The uiFreezeTimeMs.
     */
    @java.lang.Override
    public int getUiFreezeTimeMs() {
      return uiFreezeTimeMs_;
    }
    /**
     * <pre>
     * Time for which the UI was blocked in milliseconds
     * </pre>
     *
     * <code>optional int32 ui_freeze_time_ms = 1;</code>
     * @param value The uiFreezeTimeMs to set.
     * @return This builder for chaining.
     */
    public Builder setUiFreezeTimeMs(int value) {

      uiFreezeTimeMs_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Time for which the UI was blocked in milliseconds
     * </pre>
     *
     * <code>optional int32 ui_freeze_time_ms = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUiFreezeTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000001);
      uiFreezeTimeMs_ = 0;
      onChanged();
      return this;
    }

    private com.google.wireless.android.sdk.stats.Histogram eventServiceTimeMs_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.Histogram, com.google.wireless.android.sdk.stats.Histogram.Builder, com.google.wireless.android.sdk.stats.HistogramOrBuilder> eventServiceTimeMsBuilder_;
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     * @return Whether the eventServiceTimeMs field is set.
     */
    public boolean hasEventServiceTimeMs() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     * @return The eventServiceTimeMs.
     */
    public com.google.wireless.android.sdk.stats.Histogram getEventServiceTimeMs() {
      if (eventServiceTimeMsBuilder_ == null) {
        return eventServiceTimeMs_ == null ? com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : eventServiceTimeMs_;
      } else {
        return eventServiceTimeMsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    public Builder setEventServiceTimeMs(com.google.wireless.android.sdk.stats.Histogram value) {
      if (eventServiceTimeMsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        eventServiceTimeMs_ = value;
      } else {
        eventServiceTimeMsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    public Builder setEventServiceTimeMs(
        com.google.wireless.android.sdk.stats.Histogram.Builder builderForValue) {
      if (eventServiceTimeMsBuilder_ == null) {
        eventServiceTimeMs_ = builderForValue.build();
      } else {
        eventServiceTimeMsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    public Builder mergeEventServiceTimeMs(com.google.wireless.android.sdk.stats.Histogram value) {
      if (eventServiceTimeMsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          eventServiceTimeMs_ != null &&
          eventServiceTimeMs_ != com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance()) {
          getEventServiceTimeMsBuilder().mergeFrom(value);
        } else {
          eventServiceTimeMs_ = value;
        }
      } else {
        eventServiceTimeMsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    public Builder clearEventServiceTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000002);
      eventServiceTimeMs_ = null;
      if (eventServiceTimeMsBuilder_ != null) {
        eventServiceTimeMsBuilder_.dispose();
        eventServiceTimeMsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.Histogram.Builder getEventServiceTimeMsBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getEventServiceTimeMsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.HistogramOrBuilder getEventServiceTimeMsOrBuilder() {
      if (eventServiceTimeMsBuilder_ != null) {
        return eventServiceTimeMsBuilder_.getMessageOrBuilder();
      } else {
        return eventServiceTimeMs_ == null ?
            com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : eventServiceTimeMs_;
      }
    }
    /**
     * <pre>
     * Distribution of times taken to process events in the main event loop,
     * in milliseconds. The number of samples is approximately equal to the
     * number of events handled, quantized by event_service_time_sample_period.
     * For example, if the 10-20ms bin contains 100 samples, it means that
     * approximately 100 events took between 10 and 20 milliseconds to process.
     * </pre>
     *
     * <code>optional .android_studio.Histogram event_service_time_ms = 2 [lazy = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.Histogram, com.google.wireless.android.sdk.stats.Histogram.Builder, com.google.wireless.android.sdk.stats.HistogramOrBuilder> 
        getEventServiceTimeMsFieldBuilder() {
      if (eventServiceTimeMsBuilder_ == null) {
        eventServiceTimeMsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.wireless.android.sdk.stats.Histogram, com.google.wireless.android.sdk.stats.Histogram.Builder, com.google.wireless.android.sdk.stats.HistogramOrBuilder>(
                getEventServiceTimeMs(),
                getParentForChildren(),
                isClean());
        eventServiceTimeMs_ = null;
      }
      return eventServiceTimeMsBuilder_;
    }

    private int eventServiceTimeSamplePeriod_ ;
    /**
     * <pre>
     * Sample period used to compute the event_service_time_ms histogram. For
     * example, if this is set to 10 then the service time was measured for
     * every 10th event, and each measurement counted for 10 samples in
     * the histogram. This is mainly intended for computing error bars
     * and is not needed for interpreting the histogram itself.
     * </pre>
     *
     * <code>optional int32 event_service_time_sample_period = 3;</code>
     * @return Whether the eventServiceTimeSamplePeriod field is set.
     */
    @java.lang.Override
    public boolean hasEventServiceTimeSamplePeriod() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Sample period used to compute the event_service_time_ms histogram. For
     * example, if this is set to 10 then the service time was measured for
     * every 10th event, and each measurement counted for 10 samples in
     * the histogram. This is mainly intended for computing error bars
     * and is not needed for interpreting the histogram itself.
     * </pre>
     *
     * <code>optional int32 event_service_time_sample_period = 3;</code>
     * @return The eventServiceTimeSamplePeriod.
     */
    @java.lang.Override
    public int getEventServiceTimeSamplePeriod() {
      return eventServiceTimeSamplePeriod_;
    }
    /**
     * <pre>
     * Sample period used to compute the event_service_time_ms histogram. For
     * example, if this is set to 10 then the service time was measured for
     * every 10th event, and each measurement counted for 10 samples in
     * the histogram. This is mainly intended for computing error bars
     * and is not needed for interpreting the histogram itself.
     * </pre>
     *
     * <code>optional int32 event_service_time_sample_period = 3;</code>
     * @param value The eventServiceTimeSamplePeriod to set.
     * @return This builder for chaining.
     */
    public Builder setEventServiceTimeSamplePeriod(int value) {

      eventServiceTimeSamplePeriod_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sample period used to compute the event_service_time_ms histogram. For
     * example, if this is set to 10 then the service time was measured for
     * every 10th event, and each measurement counted for 10 samples in
     * the histogram. This is mainly intended for computing error bars
     * and is not needed for interpreting the histogram itself.
     * </pre>
     *
     * <code>optional int32 event_service_time_sample_period = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearEventServiceTimeSamplePeriod() {
      bitField0_ = (bitField0_ & ~0x00000004);
      eventServiceTimeSamplePeriod_ = 0;
      onChanged();
      return this;
    }

    private com.google.wireless.android.sdk.stats.Histogram writeLockWaitTimeMs_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.Histogram, com.google.wireless.android.sdk.stats.Histogram.Builder, com.google.wireless.android.sdk.stats.HistogramOrBuilder> writeLockWaitTimeMsBuilder_;
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     * @return Whether the writeLockWaitTimeMs field is set.
     */
    public boolean hasWriteLockWaitTimeMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     * @return The writeLockWaitTimeMs.
     */
    public com.google.wireless.android.sdk.stats.Histogram getWriteLockWaitTimeMs() {
      if (writeLockWaitTimeMsBuilder_ == null) {
        return writeLockWaitTimeMs_ == null ? com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : writeLockWaitTimeMs_;
      } else {
        return writeLockWaitTimeMsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    public Builder setWriteLockWaitTimeMs(com.google.wireless.android.sdk.stats.Histogram value) {
      if (writeLockWaitTimeMsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        writeLockWaitTimeMs_ = value;
      } else {
        writeLockWaitTimeMsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    public Builder setWriteLockWaitTimeMs(
        com.google.wireless.android.sdk.stats.Histogram.Builder builderForValue) {
      if (writeLockWaitTimeMsBuilder_ == null) {
        writeLockWaitTimeMs_ = builderForValue.build();
      } else {
        writeLockWaitTimeMsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    public Builder mergeWriteLockWaitTimeMs(com.google.wireless.android.sdk.stats.Histogram value) {
      if (writeLockWaitTimeMsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          writeLockWaitTimeMs_ != null &&
          writeLockWaitTimeMs_ != com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance()) {
          getWriteLockWaitTimeMsBuilder().mergeFrom(value);
        } else {
          writeLockWaitTimeMs_ = value;
        }
      } else {
        writeLockWaitTimeMsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    public Builder clearWriteLockWaitTimeMs() {
      bitField0_ = (bitField0_ & ~0x00000008);
      writeLockWaitTimeMs_ = null;
      if (writeLockWaitTimeMsBuilder_ != null) {
        writeLockWaitTimeMsBuilder_.dispose();
        writeLockWaitTimeMsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.Histogram.Builder getWriteLockWaitTimeMsBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getWriteLockWaitTimeMsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    public com.google.wireless.android.sdk.stats.HistogramOrBuilder getWriteLockWaitTimeMsOrBuilder() {
      if (writeLockWaitTimeMsBuilder_ != null) {
        return writeLockWaitTimeMsBuilder_.getMessageOrBuilder();
      } else {
        return writeLockWaitTimeMs_ == null ?
            com.google.wireless.android.sdk.stats.Histogram.getDefaultInstance() : writeLockWaitTimeMs_;
      }
    }
    /**
     * <pre>
     * Histogram of wait times for the global write lock
     * </pre>
     *
     * <code>optional .android_studio.Histogram write_lock_wait_time_ms = 4 [lazy = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.Histogram, com.google.wireless.android.sdk.stats.Histogram.Builder, com.google.wireless.android.sdk.stats.HistogramOrBuilder> 
        getWriteLockWaitTimeMsFieldBuilder() {
      if (writeLockWaitTimeMsBuilder_ == null) {
        writeLockWaitTimeMsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.wireless.android.sdk.stats.Histogram, com.google.wireless.android.sdk.stats.Histogram.Builder, com.google.wireless.android.sdk.stats.HistogramOrBuilder>(
                getWriteLockWaitTimeMs(),
                getParentForChildren(),
                isClean());
        writeLockWaitTimeMs_ = null;
      }
      return writeLockWaitTimeMsBuilder_;
    }

    private java.util.List<com.google.wireless.android.sdk.stats.GcPauseInfo> gcPauseInfo_ =
      java.util.Collections.emptyList();
    private void ensureGcPauseInfoIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        gcPauseInfo_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.GcPauseInfo>(gcPauseInfo_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.GcPauseInfo, com.google.wireless.android.sdk.stats.GcPauseInfo.Builder, com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder> gcPauseInfoBuilder_;

    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.GcPauseInfo> getGcPauseInfoList() {
      if (gcPauseInfoBuilder_ == null) {
        return java.util.Collections.unmodifiableList(gcPauseInfo_);
      } else {
        return gcPauseInfoBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public int getGcPauseInfoCount() {
      if (gcPauseInfoBuilder_ == null) {
        return gcPauseInfo_.size();
      } else {
        return gcPauseInfoBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public com.google.wireless.android.sdk.stats.GcPauseInfo getGcPauseInfo(int index) {
      if (gcPauseInfoBuilder_ == null) {
        return gcPauseInfo_.get(index);
      } else {
        return gcPauseInfoBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder setGcPauseInfo(
        int index, com.google.wireless.android.sdk.stats.GcPauseInfo value) {
      if (gcPauseInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.set(index, value);
        onChanged();
      } else {
        gcPauseInfoBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder setGcPauseInfo(
        int index, com.google.wireless.android.sdk.stats.GcPauseInfo.Builder builderForValue) {
      if (gcPauseInfoBuilder_ == null) {
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.set(index, builderForValue.build());
        onChanged();
      } else {
        gcPauseInfoBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder addGcPauseInfo(com.google.wireless.android.sdk.stats.GcPauseInfo value) {
      if (gcPauseInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.add(value);
        onChanged();
      } else {
        gcPauseInfoBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder addGcPauseInfo(
        int index, com.google.wireless.android.sdk.stats.GcPauseInfo value) {
      if (gcPauseInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.add(index, value);
        onChanged();
      } else {
        gcPauseInfoBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder addGcPauseInfo(
        com.google.wireless.android.sdk.stats.GcPauseInfo.Builder builderForValue) {
      if (gcPauseInfoBuilder_ == null) {
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.add(builderForValue.build());
        onChanged();
      } else {
        gcPauseInfoBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder addGcPauseInfo(
        int index, com.google.wireless.android.sdk.stats.GcPauseInfo.Builder builderForValue) {
      if (gcPauseInfoBuilder_ == null) {
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.add(index, builderForValue.build());
        onChanged();
      } else {
        gcPauseInfoBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder addAllGcPauseInfo(
        java.lang.Iterable<? extends com.google.wireless.android.sdk.stats.GcPauseInfo> values) {
      if (gcPauseInfoBuilder_ == null) {
        ensureGcPauseInfoIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, gcPauseInfo_);
        onChanged();
      } else {
        gcPauseInfoBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder clearGcPauseInfo() {
      if (gcPauseInfoBuilder_ == null) {
        gcPauseInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        gcPauseInfoBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public Builder removeGcPauseInfo(int index) {
      if (gcPauseInfoBuilder_ == null) {
        ensureGcPauseInfoIsMutable();
        gcPauseInfo_.remove(index);
        onChanged();
      } else {
        gcPauseInfoBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public com.google.wireless.android.sdk.stats.GcPauseInfo.Builder getGcPauseInfoBuilder(
        int index) {
      return getGcPauseInfoFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder getGcPauseInfoOrBuilder(
        int index) {
      if (gcPauseInfoBuilder_ == null) {
        return gcPauseInfo_.get(index);  } else {
        return gcPauseInfoBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public java.util.List<? extends com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder> 
         getGcPauseInfoOrBuilderList() {
      if (gcPauseInfoBuilder_ != null) {
        return gcPauseInfoBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(gcPauseInfo_);
      }
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public com.google.wireless.android.sdk.stats.GcPauseInfo.Builder addGcPauseInfoBuilder() {
      return getGcPauseInfoFieldBuilder().addBuilder(
          com.google.wireless.android.sdk.stats.GcPauseInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public com.google.wireless.android.sdk.stats.GcPauseInfo.Builder addGcPauseInfoBuilder(
        int index) {
      return getGcPauseInfoFieldBuilder().addBuilder(
          index, com.google.wireless.android.sdk.stats.GcPauseInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * Information about GC pause time distributions, one for each collector that
     * is active.
     * </pre>
     *
     * <code>repeated .android_studio.GcPauseInfo gc_pause_info = 5;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.GcPauseInfo.Builder> 
         getGcPauseInfoBuilderList() {
      return getGcPauseInfoFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.GcPauseInfo, com.google.wireless.android.sdk.stats.GcPauseInfo.Builder, com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder> 
        getGcPauseInfoFieldBuilder() {
      if (gcPauseInfoBuilder_ == null) {
        gcPauseInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.wireless.android.sdk.stats.GcPauseInfo, com.google.wireless.android.sdk.stats.GcPauseInfo.Builder, com.google.wireless.android.sdk.stats.GcPauseInfoOrBuilder>(
                gcPauseInfo_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        gcPauseInfo_ = null;
      }
      return gcPauseInfoBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.StudioPerformanceStats)
  }

  // @@protoc_insertion_point(class_scope:android_studio.StudioPerformanceStats)
  private static final com.google.wireless.android.sdk.stats.StudioPerformanceStats DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.StudioPerformanceStats();
  }

  public static com.google.wireless.android.sdk.stats.StudioPerformanceStats getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<StudioPerformanceStats>
      PARSER = new com.google.protobuf.AbstractParser<StudioPerformanceStats>() {
    @java.lang.Override
    public StudioPerformanceStats parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<StudioPerformanceStats> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StudioPerformanceStats> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.StudioPerformanceStats getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

