// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface PreviewRefreshEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.PreviewRefreshEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional .android_studio.PreviewRefreshEvent.PreviewType type = 1;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <code>optional .android_studio.PreviewRefreshEvent.PreviewType type = 1;</code>
   * @return The type.
   */
  com.google.wireless.android.sdk.stats.PreviewRefreshEvent.PreviewType getType();

  /**
   * <code>optional .android_studio.PreviewRefreshEvent.RefreshResult result = 2;</code>
   * @return Whether the result field is set.
   */
  boolean hasResult();
  /**
   * <code>optional .android_studio.PreviewRefreshEvent.RefreshResult result = 2;</code>
   * @return The result.
   */
  com.google.wireless.android.sdk.stats.PreviewRefreshEvent.RefreshResult getResult();

  /**
   * <pre>
   * The in queue time corresponds to the time that a refresh request waits
   * inside the queue of a RefreshManager before being processed or skipped
   * </pre>
   *
   * <code>optional int32 in_queue_time_millis = 3;</code>
   * @return Whether the inQueueTimeMillis field is set.
   */
  boolean hasInQueueTimeMillis();
  /**
   * <pre>
   * The in queue time corresponds to the time that a refresh request waits
   * inside the queue of a RefreshManager before being processed or skipped
   * </pre>
   *
   * <code>optional int32 in_queue_time_millis = 3;</code>
   * @return The inQueueTimeMillis.
   */
  int getInQueueTimeMillis();

  /**
   * <pre>
   * The refresh time starts when the refresh request is taken out of the
   * queue and starts to be processed and ends when the refresh process
   * finishes or gets cancelled.
   * </pre>
   *
   * <code>optional int32 refresh_time_millis = 4;</code>
   * @return Whether the refreshTimeMillis field is set.
   */
  boolean hasRefreshTimeMillis();
  /**
   * <pre>
   * The refresh time starts when the refresh request is taken out of the
   * queue and starts to be processed and ends when the refresh process
   * finishes or gets cancelled.
   * </pre>
   *
   * <code>optional int32 refresh_time_millis = 4;</code>
   * @return The refreshTimeMillis.
   */
  int getRefreshTimeMillis();

  /**
   * <pre>
   * The total number of previews not filtered out by the flows and present
   * in the panel at once
   * </pre>
   *
   * <code>optional int32 previews_count = 5;</code>
   * @return Whether the previewsCount field is set.
   */
  boolean hasPreviewsCount();
  /**
   * <pre>
   * The total number of previews not filtered out by the flows and present
   * in the panel at once
   * </pre>
   *
   * <code>optional int32 previews_count = 5;</code>
   * @return The previewsCount.
   */
  int getPreviewsCount();

  /**
   * <pre>
   * The number of previews out of previews_count that this refresh should
   * have refreshed
   * </pre>
   *
   * <code>optional int32 previews_to_refresh = 6;</code>
   * @return Whether the previewsToRefresh field is set.
   */
  boolean hasPreviewsToRefresh();
  /**
   * <pre>
   * The number of previews out of previews_count that this refresh should
   * have refreshed
   * </pre>
   *
   * <code>optional int32 previews_to_refresh = 6;</code>
   * @return The previewsToRefresh.
   */
  int getPreviewsToRefresh();

  /**
   * <pre>
   * Some information for each preview that was actually rendered
   * </pre>
   *
   * <code>repeated .android_studio.PreviewRefreshEvent.SinglePreviewRender preview_renders = 7;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.PreviewRefreshEvent.SinglePreviewRender> 
      getPreviewRendersList();
  /**
   * <pre>
   * Some information for each preview that was actually rendered
   * </pre>
   *
   * <code>repeated .android_studio.PreviewRefreshEvent.SinglePreviewRender preview_renders = 7;</code>
   */
  com.google.wireless.android.sdk.stats.PreviewRefreshEvent.SinglePreviewRender getPreviewRenders(int index);
  /**
   * <pre>
   * Some information for each preview that was actually rendered
   * </pre>
   *
   * <code>repeated .android_studio.PreviewRefreshEvent.SinglePreviewRender preview_renders = 7;</code>
   */
  int getPreviewRendersCount();
  /**
   * <pre>
   * Some information for each preview that was actually rendered
   * </pre>
   *
   * <code>repeated .android_studio.PreviewRefreshEvent.SinglePreviewRender preview_renders = 7;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.PreviewRefreshEvent.SinglePreviewRenderOrBuilder> 
      getPreviewRendersOrBuilderList();
  /**
   * <pre>
   * Some information for each preview that was actually rendered
   * </pre>
   *
   * <code>repeated .android_studio.PreviewRefreshEvent.SinglePreviewRender preview_renders = 7;</code>
   */
  com.google.wireless.android.sdk.stats.PreviewRefreshEvent.SinglePreviewRenderOrBuilder getPreviewRendersOrBuilder(
      int index);
}
