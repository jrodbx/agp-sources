// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/android_test_coverage_config.proto

package com.android.tools.utp.plugins.host.coverage.proto;

public final class AndroidTestCoverageConfigProto {
  private AndroidTestCoverageConfigProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AndroidTestCoverageConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A file path to a single coverage file.
     * Note: this mode must be used for HOST android test execution.
     * </pre>
     *
     * <code>string single_coverage_file = 1;</code>
     * @return Whether the singleCoverageFile field is set.
     */
    boolean hasSingleCoverageFile();
    /**
     * <pre>
     * A file path to a single coverage file.
     * Note: this mode must be used for HOST android test execution.
     * </pre>
     *
     * <code>string single_coverage_file = 1;</code>
     * @return The singleCoverageFile.
     */
    java.lang.String getSingleCoverageFile();
    /**
     * <pre>
     * A file path to a single coverage file.
     * Note: this mode must be used for HOST android test execution.
     * </pre>
     *
     * <code>string single_coverage_file = 1;</code>
     * @return The bytes for singleCoverageFile.
     */
    com.google.protobuf.ByteString
        getSingleCoverageFileBytes();

    /**
     * <pre>
     * A path to a directory that contains multiple coverage files.
     * Note: this mode must be used for Android test orchestrator.
     * </pre>
     *
     * <code>string multiple_coverage_files_in_directory = 2;</code>
     * @return Whether the multipleCoverageFilesInDirectory field is set.
     */
    boolean hasMultipleCoverageFilesInDirectory();
    /**
     * <pre>
     * A path to a directory that contains multiple coverage files.
     * Note: this mode must be used for Android test orchestrator.
     * </pre>
     *
     * <code>string multiple_coverage_files_in_directory = 2;</code>
     * @return The multipleCoverageFilesInDirectory.
     */
    java.lang.String getMultipleCoverageFilesInDirectory();
    /**
     * <pre>
     * A path to a directory that contains multiple coverage files.
     * Note: this mode must be used for Android test orchestrator.
     * </pre>
     *
     * <code>string multiple_coverage_files_in_directory = 2;</code>
     * @return The bytes for multipleCoverageFilesInDirectory.
     */
    com.google.protobuf.ByteString
        getMultipleCoverageFilesInDirectoryBytes();

    /**
     * <pre>
     * A package name to be used to copy test coverage files from a device
     * to a host machine. If this is empty, shell commands are executed
     * without wrapping with run-as command. You need to set this package
     * name if you use package private directory in a test coverage path.
     * </pre>
     *
     * <code>string run_as_package_name = 3;</code>
     * @return The runAsPackageName.
     */
    java.lang.String getRunAsPackageName();
    /**
     * <pre>
     * A package name to be used to copy test coverage files from a device
     * to a host machine. If this is empty, shell commands are executed
     * without wrapping with run-as command. You need to set this package
     * name if you use package private directory in a test coverage path.
     * </pre>
     *
     * <code>string run_as_package_name = 3;</code>
     * @return The bytes for runAsPackageName.
     */
    com.google.protobuf.ByteString
        getRunAsPackageNameBytes();

    /**
     * <pre>
     * A path to the output directory on a host machine.
     * </pre>
     *
     * <code>string output_directory_on_host = 4;</code>
     * @return The outputDirectoryOnHost.
     */
    java.lang.String getOutputDirectoryOnHost();
    /**
     * <pre>
     * A path to the output directory on a host machine.
     * </pre>
     *
     * <code>string output_directory_on_host = 4;</code>
     * @return The bytes for outputDirectoryOnHost.
     */
    com.google.protobuf.ByteString
        getOutputDirectoryOnHostBytes();

    /**
     * <pre>
     * Use the test storage service provided by the 'androidx.test.services'
     * package.
     * </pre>
     *
     * <code>bool use_test_storage_service = 5;</code>
     * @return The useTestStorageService.
     */
    boolean getUseTestStorageService();

    com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.TestCoveragePathOnDeviceCase getTestCoveragePathOnDeviceCase();
  }
  /**
   * <pre>
   * A configuration of AndroidTestCoverage plugin.
   * </pre>
   *
   * Protobuf type {@code com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig}
   */
  public static final class AndroidTestCoverageConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig)
      AndroidTestCoverageConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AndroidTestCoverageConfig.newBuilder() to construct.
    private AndroidTestCoverageConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AndroidTestCoverageConfig() {
      runAsPackageName_ = "";
      outputDirectoryOnHost_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AndroidTestCoverageConfig();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.class, com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.Builder.class);
    }

    private int testCoveragePathOnDeviceCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object testCoveragePathOnDevice_;
    public enum TestCoveragePathOnDeviceCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SINGLE_COVERAGE_FILE(1),
      MULTIPLE_COVERAGE_FILES_IN_DIRECTORY(2),
      TESTCOVERAGEPATHONDEVICE_NOT_SET(0);
      private final int value;
      private TestCoveragePathOnDeviceCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TestCoveragePathOnDeviceCase valueOf(int value) {
        return forNumber(value);
      }

      public static TestCoveragePathOnDeviceCase forNumber(int value) {
        switch (value) {
          case 1: return SINGLE_COVERAGE_FILE;
          case 2: return MULTIPLE_COVERAGE_FILES_IN_DIRECTORY;
          case 0: return TESTCOVERAGEPATHONDEVICE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TestCoveragePathOnDeviceCase
    getTestCoveragePathOnDeviceCase() {
      return TestCoveragePathOnDeviceCase.forNumber(
          testCoveragePathOnDeviceCase_);
    }

    public static final int SINGLE_COVERAGE_FILE_FIELD_NUMBER = 1;
    /**
     * <pre>
     * A file path to a single coverage file.
     * Note: this mode must be used for HOST android test execution.
     * </pre>
     *
     * <code>string single_coverage_file = 1;</code>
     * @return Whether the singleCoverageFile field is set.
     */
    public boolean hasSingleCoverageFile() {
      return testCoveragePathOnDeviceCase_ == 1;
    }
    /**
     * <pre>
     * A file path to a single coverage file.
     * Note: this mode must be used for HOST android test execution.
     * </pre>
     *
     * <code>string single_coverage_file = 1;</code>
     * @return The singleCoverageFile.
     */
    public java.lang.String getSingleCoverageFile() {
      java.lang.Object ref = "";
      if (testCoveragePathOnDeviceCase_ == 1) {
        ref = testCoveragePathOnDevice_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (testCoveragePathOnDeviceCase_ == 1) {
          testCoveragePathOnDevice_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A file path to a single coverage file.
     * Note: this mode must be used for HOST android test execution.
     * </pre>
     *
     * <code>string single_coverage_file = 1;</code>
     * @return The bytes for singleCoverageFile.
     */
    public com.google.protobuf.ByteString
        getSingleCoverageFileBytes() {
      java.lang.Object ref = "";
      if (testCoveragePathOnDeviceCase_ == 1) {
        ref = testCoveragePathOnDevice_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (testCoveragePathOnDeviceCase_ == 1) {
          testCoveragePathOnDevice_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MULTIPLE_COVERAGE_FILES_IN_DIRECTORY_FIELD_NUMBER = 2;
    /**
     * <pre>
     * A path to a directory that contains multiple coverage files.
     * Note: this mode must be used for Android test orchestrator.
     * </pre>
     *
     * <code>string multiple_coverage_files_in_directory = 2;</code>
     * @return Whether the multipleCoverageFilesInDirectory field is set.
     */
    public boolean hasMultipleCoverageFilesInDirectory() {
      return testCoveragePathOnDeviceCase_ == 2;
    }
    /**
     * <pre>
     * A path to a directory that contains multiple coverage files.
     * Note: this mode must be used for Android test orchestrator.
     * </pre>
     *
     * <code>string multiple_coverage_files_in_directory = 2;</code>
     * @return The multipleCoverageFilesInDirectory.
     */
    public java.lang.String getMultipleCoverageFilesInDirectory() {
      java.lang.Object ref = "";
      if (testCoveragePathOnDeviceCase_ == 2) {
        ref = testCoveragePathOnDevice_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (testCoveragePathOnDeviceCase_ == 2) {
          testCoveragePathOnDevice_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A path to a directory that contains multiple coverage files.
     * Note: this mode must be used for Android test orchestrator.
     * </pre>
     *
     * <code>string multiple_coverage_files_in_directory = 2;</code>
     * @return The bytes for multipleCoverageFilesInDirectory.
     */
    public com.google.protobuf.ByteString
        getMultipleCoverageFilesInDirectoryBytes() {
      java.lang.Object ref = "";
      if (testCoveragePathOnDeviceCase_ == 2) {
        ref = testCoveragePathOnDevice_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (testCoveragePathOnDeviceCase_ == 2) {
          testCoveragePathOnDevice_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RUN_AS_PACKAGE_NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object runAsPackageName_ = "";
    /**
     * <pre>
     * A package name to be used to copy test coverage files from a device
     * to a host machine. If this is empty, shell commands are executed
     * without wrapping with run-as command. You need to set this package
     * name if you use package private directory in a test coverage path.
     * </pre>
     *
     * <code>string run_as_package_name = 3;</code>
     * @return The runAsPackageName.
     */
    @java.lang.Override
    public java.lang.String getRunAsPackageName() {
      java.lang.Object ref = runAsPackageName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        runAsPackageName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A package name to be used to copy test coverage files from a device
     * to a host machine. If this is empty, shell commands are executed
     * without wrapping with run-as command. You need to set this package
     * name if you use package private directory in a test coverage path.
     * </pre>
     *
     * <code>string run_as_package_name = 3;</code>
     * @return The bytes for runAsPackageName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRunAsPackageNameBytes() {
      java.lang.Object ref = runAsPackageName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        runAsPackageName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_DIRECTORY_ON_HOST_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object outputDirectoryOnHost_ = "";
    /**
     * <pre>
     * A path to the output directory on a host machine.
     * </pre>
     *
     * <code>string output_directory_on_host = 4;</code>
     * @return The outputDirectoryOnHost.
     */
    @java.lang.Override
    public java.lang.String getOutputDirectoryOnHost() {
      java.lang.Object ref = outputDirectoryOnHost_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputDirectoryOnHost_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A path to the output directory on a host machine.
     * </pre>
     *
     * <code>string output_directory_on_host = 4;</code>
     * @return The bytes for outputDirectoryOnHost.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOutputDirectoryOnHostBytes() {
      java.lang.Object ref = outputDirectoryOnHost_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputDirectoryOnHost_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USE_TEST_STORAGE_SERVICE_FIELD_NUMBER = 5;
    private boolean useTestStorageService_ = false;
    /**
     * <pre>
     * Use the test storage service provided by the 'androidx.test.services'
     * package.
     * </pre>
     *
     * <code>bool use_test_storage_service = 5;</code>
     * @return The useTestStorageService.
     */
    @java.lang.Override
    public boolean getUseTestStorageService() {
      return useTestStorageService_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (testCoveragePathOnDeviceCase_ == 1) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, testCoveragePathOnDevice_);
      }
      if (testCoveragePathOnDeviceCase_ == 2) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, testCoveragePathOnDevice_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(runAsPackageName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, runAsPackageName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputDirectoryOnHost_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, outputDirectoryOnHost_);
      }
      if (useTestStorageService_ != false) {
        output.writeBool(5, useTestStorageService_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (testCoveragePathOnDeviceCase_ == 1) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, testCoveragePathOnDevice_);
      }
      if (testCoveragePathOnDeviceCase_ == 2) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, testCoveragePathOnDevice_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(runAsPackageName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, runAsPackageName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputDirectoryOnHost_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, outputDirectoryOnHost_);
      }
      if (useTestStorageService_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, useTestStorageService_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig)) {
        return super.equals(obj);
      }
      com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig other = (com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig) obj;

      if (!getRunAsPackageName()
          .equals(other.getRunAsPackageName())) return false;
      if (!getOutputDirectoryOnHost()
          .equals(other.getOutputDirectoryOnHost())) return false;
      if (getUseTestStorageService()
          != other.getUseTestStorageService()) return false;
      if (!getTestCoveragePathOnDeviceCase().equals(other.getTestCoveragePathOnDeviceCase())) return false;
      switch (testCoveragePathOnDeviceCase_) {
        case 1:
          if (!getSingleCoverageFile()
              .equals(other.getSingleCoverageFile())) return false;
          break;
        case 2:
          if (!getMultipleCoverageFilesInDirectory()
              .equals(other.getMultipleCoverageFilesInDirectory())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RUN_AS_PACKAGE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getRunAsPackageName().hashCode();
      hash = (37 * hash) + OUTPUT_DIRECTORY_ON_HOST_FIELD_NUMBER;
      hash = (53 * hash) + getOutputDirectoryOnHost().hashCode();
      hash = (37 * hash) + USE_TEST_STORAGE_SERVICE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseTestStorageService());
      switch (testCoveragePathOnDeviceCase_) {
        case 1:
          hash = (37 * hash) + SINGLE_COVERAGE_FILE_FIELD_NUMBER;
          hash = (53 * hash) + getSingleCoverageFile().hashCode();
          break;
        case 2:
          hash = (37 * hash) + MULTIPLE_COVERAGE_FILES_IN_DIRECTORY_FIELD_NUMBER;
          hash = (53 * hash) + getMultipleCoverageFilesInDirectory().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A configuration of AndroidTestCoverage plugin.
     * </pre>
     *
     * Protobuf type {@code com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig)
        com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.class, com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.Builder.class);
      }

      // Construct using com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        runAsPackageName_ = "";
        outputDirectoryOnHost_ = "";
        useTestStorageService_ = false;
        testCoveragePathOnDeviceCase_ = 0;
        testCoveragePathOnDevice_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_descriptor;
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig getDefaultInstanceForType() {
        return com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig build() {
        com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig buildPartial() {
        com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig result = new com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.runAsPackageName_ = runAsPackageName_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.outputDirectoryOnHost_ = outputDirectoryOnHost_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.useTestStorageService_ = useTestStorageService_;
        }
      }

      private void buildPartialOneofs(com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig result) {
        result.testCoveragePathOnDeviceCase_ = testCoveragePathOnDeviceCase_;
        result.testCoveragePathOnDevice_ = this.testCoveragePathOnDevice_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig) {
          return mergeFrom((com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig other) {
        if (other == com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig.getDefaultInstance()) return this;
        if (!other.getRunAsPackageName().isEmpty()) {
          runAsPackageName_ = other.runAsPackageName_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (!other.getOutputDirectoryOnHost().isEmpty()) {
          outputDirectoryOnHost_ = other.outputDirectoryOnHost_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.getUseTestStorageService() != false) {
          setUseTestStorageService(other.getUseTestStorageService());
        }
        switch (other.getTestCoveragePathOnDeviceCase()) {
          case SINGLE_COVERAGE_FILE: {
            testCoveragePathOnDeviceCase_ = 1;
            testCoveragePathOnDevice_ = other.testCoveragePathOnDevice_;
            onChanged();
            break;
          }
          case MULTIPLE_COVERAGE_FILES_IN_DIRECTORY: {
            testCoveragePathOnDeviceCase_ = 2;
            testCoveragePathOnDevice_ = other.testCoveragePathOnDevice_;
            onChanged();
            break;
          }
          case TESTCOVERAGEPATHONDEVICE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                testCoveragePathOnDeviceCase_ = 1;
                testCoveragePathOnDevice_ = s;
                break;
              } // case 10
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                testCoveragePathOnDeviceCase_ = 2;
                testCoveragePathOnDevice_ = s;
                break;
              } // case 18
              case 26: {
                runAsPackageName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                outputDirectoryOnHost_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                useTestStorageService_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int testCoveragePathOnDeviceCase_ = 0;
      private java.lang.Object testCoveragePathOnDevice_;
      public TestCoveragePathOnDeviceCase
          getTestCoveragePathOnDeviceCase() {
        return TestCoveragePathOnDeviceCase.forNumber(
            testCoveragePathOnDeviceCase_);
      }

      public Builder clearTestCoveragePathOnDevice() {
        testCoveragePathOnDeviceCase_ = 0;
        testCoveragePathOnDevice_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <pre>
       * A file path to a single coverage file.
       * Note: this mode must be used for HOST android test execution.
       * </pre>
       *
       * <code>string single_coverage_file = 1;</code>
       * @return Whether the singleCoverageFile field is set.
       */
      @java.lang.Override
      public boolean hasSingleCoverageFile() {
        return testCoveragePathOnDeviceCase_ == 1;
      }
      /**
       * <pre>
       * A file path to a single coverage file.
       * Note: this mode must be used for HOST android test execution.
       * </pre>
       *
       * <code>string single_coverage_file = 1;</code>
       * @return The singleCoverageFile.
       */
      @java.lang.Override
      public java.lang.String getSingleCoverageFile() {
        java.lang.Object ref = "";
        if (testCoveragePathOnDeviceCase_ == 1) {
          ref = testCoveragePathOnDevice_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (testCoveragePathOnDeviceCase_ == 1) {
            testCoveragePathOnDevice_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A file path to a single coverage file.
       * Note: this mode must be used for HOST android test execution.
       * </pre>
       *
       * <code>string single_coverage_file = 1;</code>
       * @return The bytes for singleCoverageFile.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSingleCoverageFileBytes() {
        java.lang.Object ref = "";
        if (testCoveragePathOnDeviceCase_ == 1) {
          ref = testCoveragePathOnDevice_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (testCoveragePathOnDeviceCase_ == 1) {
            testCoveragePathOnDevice_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A file path to a single coverage file.
       * Note: this mode must be used for HOST android test execution.
       * </pre>
       *
       * <code>string single_coverage_file = 1;</code>
       * @param value The singleCoverageFile to set.
       * @return This builder for chaining.
       */
      public Builder setSingleCoverageFile(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        testCoveragePathOnDeviceCase_ = 1;
        testCoveragePathOnDevice_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A file path to a single coverage file.
       * Note: this mode must be used for HOST android test execution.
       * </pre>
       *
       * <code>string single_coverage_file = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSingleCoverageFile() {
        if (testCoveragePathOnDeviceCase_ == 1) {
          testCoveragePathOnDeviceCase_ = 0;
          testCoveragePathOnDevice_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * A file path to a single coverage file.
       * Note: this mode must be used for HOST android test execution.
       * </pre>
       *
       * <code>string single_coverage_file = 1;</code>
       * @param value The bytes for singleCoverageFile to set.
       * @return This builder for chaining.
       */
      public Builder setSingleCoverageFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        testCoveragePathOnDeviceCase_ = 1;
        testCoveragePathOnDevice_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * A path to a directory that contains multiple coverage files.
       * Note: this mode must be used for Android test orchestrator.
       * </pre>
       *
       * <code>string multiple_coverage_files_in_directory = 2;</code>
       * @return Whether the multipleCoverageFilesInDirectory field is set.
       */
      @java.lang.Override
      public boolean hasMultipleCoverageFilesInDirectory() {
        return testCoveragePathOnDeviceCase_ == 2;
      }
      /**
       * <pre>
       * A path to a directory that contains multiple coverage files.
       * Note: this mode must be used for Android test orchestrator.
       * </pre>
       *
       * <code>string multiple_coverage_files_in_directory = 2;</code>
       * @return The multipleCoverageFilesInDirectory.
       */
      @java.lang.Override
      public java.lang.String getMultipleCoverageFilesInDirectory() {
        java.lang.Object ref = "";
        if (testCoveragePathOnDeviceCase_ == 2) {
          ref = testCoveragePathOnDevice_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (testCoveragePathOnDeviceCase_ == 2) {
            testCoveragePathOnDevice_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A path to a directory that contains multiple coverage files.
       * Note: this mode must be used for Android test orchestrator.
       * </pre>
       *
       * <code>string multiple_coverage_files_in_directory = 2;</code>
       * @return The bytes for multipleCoverageFilesInDirectory.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getMultipleCoverageFilesInDirectoryBytes() {
        java.lang.Object ref = "";
        if (testCoveragePathOnDeviceCase_ == 2) {
          ref = testCoveragePathOnDevice_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (testCoveragePathOnDeviceCase_ == 2) {
            testCoveragePathOnDevice_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A path to a directory that contains multiple coverage files.
       * Note: this mode must be used for Android test orchestrator.
       * </pre>
       *
       * <code>string multiple_coverage_files_in_directory = 2;</code>
       * @param value The multipleCoverageFilesInDirectory to set.
       * @return This builder for chaining.
       */
      public Builder setMultipleCoverageFilesInDirectory(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        testCoveragePathOnDeviceCase_ = 2;
        testCoveragePathOnDevice_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A path to a directory that contains multiple coverage files.
       * Note: this mode must be used for Android test orchestrator.
       * </pre>
       *
       * <code>string multiple_coverage_files_in_directory = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMultipleCoverageFilesInDirectory() {
        if (testCoveragePathOnDeviceCase_ == 2) {
          testCoveragePathOnDeviceCase_ = 0;
          testCoveragePathOnDevice_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * A path to a directory that contains multiple coverage files.
       * Note: this mode must be used for Android test orchestrator.
       * </pre>
       *
       * <code>string multiple_coverage_files_in_directory = 2;</code>
       * @param value The bytes for multipleCoverageFilesInDirectory to set.
       * @return This builder for chaining.
       */
      public Builder setMultipleCoverageFilesInDirectoryBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        testCoveragePathOnDeviceCase_ = 2;
        testCoveragePathOnDevice_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object runAsPackageName_ = "";
      /**
       * <pre>
       * A package name to be used to copy test coverage files from a device
       * to a host machine. If this is empty, shell commands are executed
       * without wrapping with run-as command. You need to set this package
       * name if you use package private directory in a test coverage path.
       * </pre>
       *
       * <code>string run_as_package_name = 3;</code>
       * @return The runAsPackageName.
       */
      public java.lang.String getRunAsPackageName() {
        java.lang.Object ref = runAsPackageName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          runAsPackageName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A package name to be used to copy test coverage files from a device
       * to a host machine. If this is empty, shell commands are executed
       * without wrapping with run-as command. You need to set this package
       * name if you use package private directory in a test coverage path.
       * </pre>
       *
       * <code>string run_as_package_name = 3;</code>
       * @return The bytes for runAsPackageName.
       */
      public com.google.protobuf.ByteString
          getRunAsPackageNameBytes() {
        java.lang.Object ref = runAsPackageName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          runAsPackageName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A package name to be used to copy test coverage files from a device
       * to a host machine. If this is empty, shell commands are executed
       * without wrapping with run-as command. You need to set this package
       * name if you use package private directory in a test coverage path.
       * </pre>
       *
       * <code>string run_as_package_name = 3;</code>
       * @param value The runAsPackageName to set.
       * @return This builder for chaining.
       */
      public Builder setRunAsPackageName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        runAsPackageName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A package name to be used to copy test coverage files from a device
       * to a host machine. If this is empty, shell commands are executed
       * without wrapping with run-as command. You need to set this package
       * name if you use package private directory in a test coverage path.
       * </pre>
       *
       * <code>string run_as_package_name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRunAsPackageName() {
        runAsPackageName_ = getDefaultInstance().getRunAsPackageName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A package name to be used to copy test coverage files from a device
       * to a host machine. If this is empty, shell commands are executed
       * without wrapping with run-as command. You need to set this package
       * name if you use package private directory in a test coverage path.
       * </pre>
       *
       * <code>string run_as_package_name = 3;</code>
       * @param value The bytes for runAsPackageName to set.
       * @return This builder for chaining.
       */
      public Builder setRunAsPackageNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        runAsPackageName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object outputDirectoryOnHost_ = "";
      /**
       * <pre>
       * A path to the output directory on a host machine.
       * </pre>
       *
       * <code>string output_directory_on_host = 4;</code>
       * @return The outputDirectoryOnHost.
       */
      public java.lang.String getOutputDirectoryOnHost() {
        java.lang.Object ref = outputDirectoryOnHost_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          outputDirectoryOnHost_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A path to the output directory on a host machine.
       * </pre>
       *
       * <code>string output_directory_on_host = 4;</code>
       * @return The bytes for outputDirectoryOnHost.
       */
      public com.google.protobuf.ByteString
          getOutputDirectoryOnHostBytes() {
        java.lang.Object ref = outputDirectoryOnHost_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outputDirectoryOnHost_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A path to the output directory on a host machine.
       * </pre>
       *
       * <code>string output_directory_on_host = 4;</code>
       * @param value The outputDirectoryOnHost to set.
       * @return This builder for chaining.
       */
      public Builder setOutputDirectoryOnHost(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        outputDirectoryOnHost_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A path to the output directory on a host machine.
       * </pre>
       *
       * <code>string output_directory_on_host = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputDirectoryOnHost() {
        outputDirectoryOnHost_ = getDefaultInstance().getOutputDirectoryOnHost();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A path to the output directory on a host machine.
       * </pre>
       *
       * <code>string output_directory_on_host = 4;</code>
       * @param value The bytes for outputDirectoryOnHost to set.
       * @return This builder for chaining.
       */
      public Builder setOutputDirectoryOnHostBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        outputDirectoryOnHost_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private boolean useTestStorageService_ ;
      /**
       * <pre>
       * Use the test storage service provided by the 'androidx.test.services'
       * package.
       * </pre>
       *
       * <code>bool use_test_storage_service = 5;</code>
       * @return The useTestStorageService.
       */
      @java.lang.Override
      public boolean getUseTestStorageService() {
        return useTestStorageService_;
      }
      /**
       * <pre>
       * Use the test storage service provided by the 'androidx.test.services'
       * package.
       * </pre>
       *
       * <code>bool use_test_storage_service = 5;</code>
       * @param value The useTestStorageService to set.
       * @return This builder for chaining.
       */
      public Builder setUseTestStorageService(boolean value) {

        useTestStorageService_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use the test storage service provided by the 'androidx.test.services'
       * package.
       * </pre>
       *
       * <code>bool use_test_storage_service = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUseTestStorageService() {
        bitField0_ = (bitField0_ & ~0x00000010);
        useTestStorageService_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig)
    }

    // @@protoc_insertion_point(class_scope:com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfig)
    private static final com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig();
    }

    public static com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AndroidTestCoverageConfig>
        PARSER = new com.google.protobuf.AbstractParser<AndroidTestCoverageConfig>() {
      @java.lang.Override
      public AndroidTestCoverageConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndroidTestCoverageConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndroidTestCoverageConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.tools.utp.plugins.host.coverage.proto.AndroidTestCoverageConfigProto.AndroidTestCoverageConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1src/main/proto/android_test_coverage_c" +
      "onfig.proto\0221com.android.tools.utp.plugi" +
      "ns.host.coverage.proto\"\354\001\n\031AndroidTestCo" +
      "verageConfig\022\036\n\024single_coverage_file\030\001 \001" +
      "(\tH\000\022.\n$multiple_coverage_files_in_direc" +
      "tory\030\002 \001(\tH\000\022\033\n\023run_as_package_name\030\003 \001(" +
      "\t\022 \n\030output_directory_on_host\030\004 \001(\t\022 \n\030u" +
      "se_test_storage_service\030\005 \001(\010B\036\n\034test_co" +
      "verage_path_on_deviceBS\n1com.android.too" +
      "ls.utp.plugins.host.coverage.protoB\036Andr" +
      "oidTestCoverageConfigProtob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_tools_utp_plugins_host_coverage_proto_AndroidTestCoverageConfig_descriptor,
        new java.lang.String[] { "SingleCoverageFile", "MultipleCoverageFilesInDirectory", "RunAsPackageName", "OutputDirectoryOnHost", "UseTestStorageService", "TestCoveragePathOnDevice", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
