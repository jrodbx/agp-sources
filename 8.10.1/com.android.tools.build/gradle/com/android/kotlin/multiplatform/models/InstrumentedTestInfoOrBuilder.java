// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kotlin_multiplatform_android_models.proto

package com.android.kotlin.multiplatform.models;

public interface InstrumentedTestInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:InstrumentedTestInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string namespace = 1;</code>
   * @return Whether the namespace field is set.
   */
  boolean hasNamespace();
  /**
   * <code>optional string namespace = 1;</code>
   * @return The namespace.
   */
  java.lang.String getNamespace();
  /**
   * <code>optional string namespace = 1;</code>
   * @return The bytes for namespace.
   */
  com.google.protobuf.ByteString
      getNamespaceBytes();

  /**
   * <code>optional string test_instrumentation_runner = 2;</code>
   * @return Whether the testInstrumentationRunner field is set.
   */
  boolean hasTestInstrumentationRunner();
  /**
   * <code>optional string test_instrumentation_runner = 2;</code>
   * @return The testInstrumentationRunner.
   */
  java.lang.String getTestInstrumentationRunner();
  /**
   * <code>optional string test_instrumentation_runner = 2;</code>
   * @return The bytes for testInstrumentationRunner.
   */
  com.google.protobuf.ByteString
      getTestInstrumentationRunnerBytes();

  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  int getTestInstrumentationRunnerArgumentsCount();
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  boolean containsTestInstrumentationRunnerArguments(
      java.lang.String key);
  /**
   * Use {@link #getTestInstrumentationRunnerArgumentsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getTestInstrumentationRunnerArguments();
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getTestInstrumentationRunnerArgumentsMap();
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  /* nullable */
java.lang.String getTestInstrumentationRunnerArgumentsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; test_instrumentation_runner_arguments = 3;</code>
   */
  java.lang.String getTestInstrumentationRunnerArgumentsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The signing config used to sign the test apk.
   * </pre>
   *
   * <code>optional .SigningConfig signing_config = 4;</code>
   * @return Whether the signingConfig field is set.
   */
  boolean hasSigningConfig();
  /**
   * <pre>
   * The signing config used to sign the test apk.
   * </pre>
   *
   * <code>optional .SigningConfig signing_config = 4;</code>
   * @return The signingConfig.
   */
  com.android.builder.model.proto.ide.SigningConfig getSigningConfig();
  /**
   * <pre>
   * The signing config used to sign the test apk.
   * </pre>
   *
   * <code>optional .SigningConfig signing_config = 4;</code>
   */
  com.android.builder.model.proto.ide.SigningConfigOrBuilder getSigningConfigOrBuilder();

  /**
   * <pre>
   * Returns the absolute path for the listing file that will get updated after each build. The
   * model file will contain deployment related information like applicationId, list of APKs.
   * </pre>
   *
   * <code>optional .File assemble_task_output_listing_file = 5;</code>
   * @return Whether the assembleTaskOutputListingFile field is set.
   */
  boolean hasAssembleTaskOutputListingFile();
  /**
   * <pre>
   * Returns the absolute path for the listing file that will get updated after each build. The
   * model file will contain deployment related information like applicationId, list of APKs.
   * </pre>
   *
   * <code>optional .File assemble_task_output_listing_file = 5;</code>
   * @return The assembleTaskOutputListingFile.
   */
  com.android.builder.model.proto.ide.File getAssembleTaskOutputListingFile();
  /**
   * <pre>
   * Returns the absolute path for the listing file that will get updated after each build. The
   * model file will contain deployment related information like applicationId, list of APKs.
   * </pre>
   *
   * <code>optional .File assemble_task_output_listing_file = 5;</code>
   */
  com.android.builder.model.proto.ide.FileOrBuilder getAssembleTaskOutputListingFileOrBuilder();
}
