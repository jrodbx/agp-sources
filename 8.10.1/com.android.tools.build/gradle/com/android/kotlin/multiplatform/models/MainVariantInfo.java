// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kotlin_multiplatform_android_models.proto

package com.android.kotlin.multiplatform.models;

/**
 * <pre>
 * The info of the main variant of the android kotlin multiplatform target.
 * </pre>
 *
 * Protobuf type {@code MainVariantInfo}
 */
public final class MainVariantInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:MainVariantInfo)
    MainVariantInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MainVariantInfo.newBuilder() to construct.
  private MainVariantInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MainVariantInfo() {
    namespace_ = "";
    compileSdkTarget_ = "";
    proguardFiles_ = java.util.Collections.emptyList();
    consumerProguardFiles_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MainVariantInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_MainVariantInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_MainVariantInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.android.kotlin.multiplatform.models.MainVariantInfo.class, com.android.kotlin.multiplatform.models.MainVariantInfo.Builder.class);
  }

  private int bitField0_;
  public static final int NAMESPACE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object namespace_ = "";
  /**
   * <code>optional string namespace = 1;</code>
   * @return Whether the namespace field is set.
   */
  @java.lang.Override
  public boolean hasNamespace() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional string namespace = 1;</code>
   * @return The namespace.
   */
  @java.lang.Override
  public java.lang.String getNamespace() {
    java.lang.Object ref = namespace_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      namespace_ = s;
      return s;
    }
  }
  /**
   * <code>optional string namespace = 1;</code>
   * @return The bytes for namespace.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNamespaceBytes() {
    java.lang.Object ref = namespace_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      namespace_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COMPILE_SDK_TARGET_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object compileSdkTarget_ = "";
  /**
   * <pre>
   * The compilation target as a string. This is the full extended target hash string.
   * </pre>
   *
   * <code>optional string compile_sdk_target = 2;</code>
   * @return Whether the compileSdkTarget field is set.
   */
  @java.lang.Override
  public boolean hasCompileSdkTarget() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The compilation target as a string. This is the full extended target hash string.
   * </pre>
   *
   * <code>optional string compile_sdk_target = 2;</code>
   * @return The compileSdkTarget.
   */
  @java.lang.Override
  public java.lang.String getCompileSdkTarget() {
    java.lang.Object ref = compileSdkTarget_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      compileSdkTarget_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The compilation target as a string. This is the full extended target hash string.
   * </pre>
   *
   * <code>optional string compile_sdk_target = 2;</code>
   * @return The bytes for compileSdkTarget.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCompileSdkTargetBytes() {
    java.lang.Object ref = compileSdkTarget_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      compileSdkTarget_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MIN_SDK_VERSION_FIELD_NUMBER = 3;
  private com.android.builder.model.proto.ide.AndroidVersion minSdkVersion_;
  /**
   * <pre>
   * The min SDK version of this artifact.
   * </pre>
   *
   * <code>optional .AndroidVersion min_sdk_version = 3;</code>
   * @return Whether the minSdkVersion field is set.
   */
  @java.lang.Override
  public boolean hasMinSdkVersion() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The min SDK version of this artifact.
   * </pre>
   *
   * <code>optional .AndroidVersion min_sdk_version = 3;</code>
   * @return The minSdkVersion.
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.AndroidVersion getMinSdkVersion() {
    return minSdkVersion_ == null ? com.android.builder.model.proto.ide.AndroidVersion.getDefaultInstance() : minSdkVersion_;
  }
  /**
   * <pre>
   * The min SDK version of this artifact.
   * </pre>
   *
   * <code>optional .AndroidVersion min_sdk_version = 3;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.AndroidVersionOrBuilder getMinSdkVersionOrBuilder() {
    return minSdkVersion_ == null ? com.android.builder.model.proto.ide.AndroidVersion.getDefaultInstance() : minSdkVersion_;
  }

  public static final int MAX_SDK_VERSION_FIELD_NUMBER = 4;
  private int maxSdkVersion_ = 0;
  /**
   * <pre>
   * The max SDK version of this artifact.
   * </pre>
   *
   * <code>optional int32 max_sdk_version = 4;</code>
   * @return Whether the maxSdkVersion field is set.
   */
  @java.lang.Override
  public boolean hasMaxSdkVersion() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The max SDK version of this artifact.
   * </pre>
   *
   * <code>optional int32 max_sdk_version = 4;</code>
   * @return The maxSdkVersion.
   */
  @java.lang.Override
  public int getMaxSdkVersion() {
    return maxSdkVersion_;
  }

  public static final int PROGUARD_FILES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<com.android.builder.model.proto.ide.File> proguardFiles_;
  /**
   * <pre>
   * Specifies the ProGuard configuration files that the plugin should use.
   * There are two ProGuard rules files that ship with the Android plugin and are used by
   * default:
   *   * proguard-android.txt
   *   * proguard-android-optimize.txt
   * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
   * except with optimizations enabled.
   * </pre>
   *
   * <code>repeated .File proguard_files = 5;</code>
   */
  @java.lang.Override
  public java.util.List<com.android.builder.model.proto.ide.File> getProguardFilesList() {
    return proguardFiles_;
  }
  /**
   * <pre>
   * Specifies the ProGuard configuration files that the plugin should use.
   * There are two ProGuard rules files that ship with the Android plugin and are used by
   * default:
   *   * proguard-android.txt
   *   * proguard-android-optimize.txt
   * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
   * except with optimizations enabled.
   * </pre>
   *
   * <code>repeated .File proguard_files = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.android.builder.model.proto.ide.FileOrBuilder> 
      getProguardFilesOrBuilderList() {
    return proguardFiles_;
  }
  /**
   * <pre>
   * Specifies the ProGuard configuration files that the plugin should use.
   * There are two ProGuard rules files that ship with the Android plugin and are used by
   * default:
   *   * proguard-android.txt
   *   * proguard-android-optimize.txt
   * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
   * except with optimizations enabled.
   * </pre>
   *
   * <code>repeated .File proguard_files = 5;</code>
   */
  @java.lang.Override
  public int getProguardFilesCount() {
    return proguardFiles_.size();
  }
  /**
   * <pre>
   * Specifies the ProGuard configuration files that the plugin should use.
   * There are two ProGuard rules files that ship with the Android plugin and are used by
   * default:
   *   * proguard-android.txt
   *   * proguard-android-optimize.txt
   * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
   * except with optimizations enabled.
   * </pre>
   *
   * <code>repeated .File proguard_files = 5;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.File getProguardFiles(int index) {
    return proguardFiles_.get(index);
  }
  /**
   * <pre>
   * Specifies the ProGuard configuration files that the plugin should use.
   * There are two ProGuard rules files that ship with the Android plugin and are used by
   * default:
   *   * proguard-android.txt
   *   * proguard-android-optimize.txt
   * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
   * except with optimizations enabled.
   * </pre>
   *
   * <code>repeated .File proguard_files = 5;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.FileOrBuilder getProguardFilesOrBuilder(
      int index) {
    return proguardFiles_.get(index);
  }

  public static final int CONSUMER_PROGUARD_FILES_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<com.android.builder.model.proto.ide.File> consumerProguardFiles_;
  /**
   * <pre>
   * The collection of proguard rule files for consumers of the library to use.
   * </pre>
   *
   * <code>repeated .File consumer_proguard_files = 6;</code>
   */
  @java.lang.Override
  public java.util.List<com.android.builder.model.proto.ide.File> getConsumerProguardFilesList() {
    return consumerProguardFiles_;
  }
  /**
   * <pre>
   * The collection of proguard rule files for consumers of the library to use.
   * </pre>
   *
   * <code>repeated .File consumer_proguard_files = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.android.builder.model.proto.ide.FileOrBuilder> 
      getConsumerProguardFilesOrBuilderList() {
    return consumerProguardFiles_;
  }
  /**
   * <pre>
   * The collection of proguard rule files for consumers of the library to use.
   * </pre>
   *
   * <code>repeated .File consumer_proguard_files = 6;</code>
   */
  @java.lang.Override
  public int getConsumerProguardFilesCount() {
    return consumerProguardFiles_.size();
  }
  /**
   * <pre>
   * The collection of proguard rule files for consumers of the library to use.
   * </pre>
   *
   * <code>repeated .File consumer_proguard_files = 6;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.File getConsumerProguardFiles(int index) {
    return consumerProguardFiles_.get(index);
  }
  /**
   * <pre>
   * The collection of proguard rule files for consumers of the library to use.
   * </pre>
   *
   * <code>repeated .File consumer_proguard_files = 6;</code>
   */
  @java.lang.Override
  public com.android.builder.model.proto.ide.FileOrBuilder getConsumerProguardFilesOrBuilder(
      int index) {
    return consumerProguardFiles_.get(index);
  }

  public static final int MINIFICATION_ENABLED_FIELD_NUMBER = 7;
  private boolean minificationEnabled_ = false;
  /**
   * <pre>
   * Whether code shrinking is enabled.
   * </pre>
   *
   * <code>optional bool minification_enabled = 7;</code>
   * @return Whether the minificationEnabled field is set.
   */
  @java.lang.Override
  public boolean hasMinificationEnabled() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Whether code shrinking is enabled.
   * </pre>
   *
   * <code>optional bool minification_enabled = 7;</code>
   * @return The minificationEnabled.
   */
  @java.lang.Override
  public boolean getMinificationEnabled() {
    return minificationEnabled_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, namespace_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, compileSdkTarget_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getMinSdkVersion());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeInt32(4, maxSdkVersion_);
    }
    for (int i = 0; i < proguardFiles_.size(); i++) {
      output.writeMessage(5, proguardFiles_.get(i));
    }
    for (int i = 0; i < consumerProguardFiles_.size(); i++) {
      output.writeMessage(6, consumerProguardFiles_.get(i));
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeBool(7, minificationEnabled_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, namespace_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, compileSdkTarget_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMinSdkVersion());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, maxSdkVersion_);
    }
    for (int i = 0; i < proguardFiles_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, proguardFiles_.get(i));
    }
    for (int i = 0; i < consumerProguardFiles_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, consumerProguardFiles_.get(i));
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, minificationEnabled_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.android.kotlin.multiplatform.models.MainVariantInfo)) {
      return super.equals(obj);
    }
    com.android.kotlin.multiplatform.models.MainVariantInfo other = (com.android.kotlin.multiplatform.models.MainVariantInfo) obj;

    if (hasNamespace() != other.hasNamespace()) return false;
    if (hasNamespace()) {
      if (!getNamespace()
          .equals(other.getNamespace())) return false;
    }
    if (hasCompileSdkTarget() != other.hasCompileSdkTarget()) return false;
    if (hasCompileSdkTarget()) {
      if (!getCompileSdkTarget()
          .equals(other.getCompileSdkTarget())) return false;
    }
    if (hasMinSdkVersion() != other.hasMinSdkVersion()) return false;
    if (hasMinSdkVersion()) {
      if (!getMinSdkVersion()
          .equals(other.getMinSdkVersion())) return false;
    }
    if (hasMaxSdkVersion() != other.hasMaxSdkVersion()) return false;
    if (hasMaxSdkVersion()) {
      if (getMaxSdkVersion()
          != other.getMaxSdkVersion()) return false;
    }
    if (!getProguardFilesList()
        .equals(other.getProguardFilesList())) return false;
    if (!getConsumerProguardFilesList()
        .equals(other.getConsumerProguardFilesList())) return false;
    if (hasMinificationEnabled() != other.hasMinificationEnabled()) return false;
    if (hasMinificationEnabled()) {
      if (getMinificationEnabled()
          != other.getMinificationEnabled()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNamespace()) {
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
    }
    if (hasCompileSdkTarget()) {
      hash = (37 * hash) + COMPILE_SDK_TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getCompileSdkTarget().hashCode();
    }
    if (hasMinSdkVersion()) {
      hash = (37 * hash) + MIN_SDK_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getMinSdkVersion().hashCode();
    }
    if (hasMaxSdkVersion()) {
      hash = (37 * hash) + MAX_SDK_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getMaxSdkVersion();
    }
    if (getProguardFilesCount() > 0) {
      hash = (37 * hash) + PROGUARD_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getProguardFilesList().hashCode();
    }
    if (getConsumerProguardFilesCount() > 0) {
      hash = (37 * hash) + CONSUMER_PROGUARD_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getConsumerProguardFilesList().hashCode();
    }
    if (hasMinificationEnabled()) {
      hash = (37 * hash) + MINIFICATION_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getMinificationEnabled());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.MainVariantInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.android.kotlin.multiplatform.models.MainVariantInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The info of the main variant of the android kotlin multiplatform target.
   * </pre>
   *
   * Protobuf type {@code MainVariantInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:MainVariantInfo)
      com.android.kotlin.multiplatform.models.MainVariantInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_MainVariantInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_MainVariantInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.kotlin.multiplatform.models.MainVariantInfo.class, com.android.kotlin.multiplatform.models.MainVariantInfo.Builder.class);
    }

    // Construct using com.android.kotlin.multiplatform.models.MainVariantInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMinSdkVersionFieldBuilder();
        getProguardFilesFieldBuilder();
        getConsumerProguardFilesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      namespace_ = "";
      compileSdkTarget_ = "";
      minSdkVersion_ = null;
      if (minSdkVersionBuilder_ != null) {
        minSdkVersionBuilder_.dispose();
        minSdkVersionBuilder_ = null;
      }
      maxSdkVersion_ = 0;
      if (proguardFilesBuilder_ == null) {
        proguardFiles_ = java.util.Collections.emptyList();
      } else {
        proguardFiles_ = null;
        proguardFilesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      if (consumerProguardFilesBuilder_ == null) {
        consumerProguardFiles_ = java.util.Collections.emptyList();
      } else {
        consumerProguardFiles_ = null;
        consumerProguardFilesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      minificationEnabled_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_MainVariantInfo_descriptor;
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.MainVariantInfo getDefaultInstanceForType() {
      return com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.MainVariantInfo build() {
      com.android.kotlin.multiplatform.models.MainVariantInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.MainVariantInfo buildPartial() {
      com.android.kotlin.multiplatform.models.MainVariantInfo result = new com.android.kotlin.multiplatform.models.MainVariantInfo(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.android.kotlin.multiplatform.models.MainVariantInfo result) {
      if (proguardFilesBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          proguardFiles_ = java.util.Collections.unmodifiableList(proguardFiles_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.proguardFiles_ = proguardFiles_;
      } else {
        result.proguardFiles_ = proguardFilesBuilder_.build();
      }
      if (consumerProguardFilesBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          consumerProguardFiles_ = java.util.Collections.unmodifiableList(consumerProguardFiles_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.consumerProguardFiles_ = consumerProguardFiles_;
      } else {
        result.consumerProguardFiles_ = consumerProguardFilesBuilder_.build();
      }
    }

    private void buildPartial0(com.android.kotlin.multiplatform.models.MainVariantInfo result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.namespace_ = namespace_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.compileSdkTarget_ = compileSdkTarget_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.minSdkVersion_ = minSdkVersionBuilder_ == null
            ? minSdkVersion_
            : minSdkVersionBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.maxSdkVersion_ = maxSdkVersion_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.minificationEnabled_ = minificationEnabled_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.android.kotlin.multiplatform.models.MainVariantInfo) {
        return mergeFrom((com.android.kotlin.multiplatform.models.MainVariantInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.android.kotlin.multiplatform.models.MainVariantInfo other) {
      if (other == com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance()) return this;
      if (other.hasNamespace()) {
        namespace_ = other.namespace_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasCompileSdkTarget()) {
        compileSdkTarget_ = other.compileSdkTarget_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasMinSdkVersion()) {
        mergeMinSdkVersion(other.getMinSdkVersion());
      }
      if (other.hasMaxSdkVersion()) {
        setMaxSdkVersion(other.getMaxSdkVersion());
      }
      if (proguardFilesBuilder_ == null) {
        if (!other.proguardFiles_.isEmpty()) {
          if (proguardFiles_.isEmpty()) {
            proguardFiles_ = other.proguardFiles_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureProguardFilesIsMutable();
            proguardFiles_.addAll(other.proguardFiles_);
          }
          onChanged();
        }
      } else {
        if (!other.proguardFiles_.isEmpty()) {
          if (proguardFilesBuilder_.isEmpty()) {
            proguardFilesBuilder_.dispose();
            proguardFilesBuilder_ = null;
            proguardFiles_ = other.proguardFiles_;
            bitField0_ = (bitField0_ & ~0x00000010);
            proguardFilesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProguardFilesFieldBuilder() : null;
          } else {
            proguardFilesBuilder_.addAllMessages(other.proguardFiles_);
          }
        }
      }
      if (consumerProguardFilesBuilder_ == null) {
        if (!other.consumerProguardFiles_.isEmpty()) {
          if (consumerProguardFiles_.isEmpty()) {
            consumerProguardFiles_ = other.consumerProguardFiles_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureConsumerProguardFilesIsMutable();
            consumerProguardFiles_.addAll(other.consumerProguardFiles_);
          }
          onChanged();
        }
      } else {
        if (!other.consumerProguardFiles_.isEmpty()) {
          if (consumerProguardFilesBuilder_.isEmpty()) {
            consumerProguardFilesBuilder_.dispose();
            consumerProguardFilesBuilder_ = null;
            consumerProguardFiles_ = other.consumerProguardFiles_;
            bitField0_ = (bitField0_ & ~0x00000020);
            consumerProguardFilesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getConsumerProguardFilesFieldBuilder() : null;
          } else {
            consumerProguardFilesBuilder_.addAllMessages(other.consumerProguardFiles_);
          }
        }
      }
      if (other.hasMinificationEnabled()) {
        setMinificationEnabled(other.getMinificationEnabled());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              namespace_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              compileSdkTarget_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getMinSdkVersionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 32: {
              maxSdkVersion_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              com.android.builder.model.proto.ide.File m =
                  input.readMessage(
                      com.android.builder.model.proto.ide.File.parser(),
                      extensionRegistry);
              if (proguardFilesBuilder_ == null) {
                ensureProguardFilesIsMutable();
                proguardFiles_.add(m);
              } else {
                proguardFilesBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              com.android.builder.model.proto.ide.File m =
                  input.readMessage(
                      com.android.builder.model.proto.ide.File.parser(),
                      extensionRegistry);
              if (consumerProguardFilesBuilder_ == null) {
                ensureConsumerProguardFilesIsMutable();
                consumerProguardFiles_.add(m);
              } else {
                consumerProguardFilesBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 56: {
              minificationEnabled_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object namespace_ = "";
    /**
     * <code>optional string namespace = 1;</code>
     * @return Whether the namespace field is set.
     */
    public boolean hasNamespace() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @return The namespace.
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @return The bytes for namespace.
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @param value The namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespace(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      namespace_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNamespace() {
      namespace_ = getDefaultInstance().getNamespace();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>optional string namespace = 1;</code>
     * @param value The bytes for namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      namespace_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object compileSdkTarget_ = "";
    /**
     * <pre>
     * The compilation target as a string. This is the full extended target hash string.
     * </pre>
     *
     * <code>optional string compile_sdk_target = 2;</code>
     * @return Whether the compileSdkTarget field is set.
     */
    public boolean hasCompileSdkTarget() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The compilation target as a string. This is the full extended target hash string.
     * </pre>
     *
     * <code>optional string compile_sdk_target = 2;</code>
     * @return The compileSdkTarget.
     */
    public java.lang.String getCompileSdkTarget() {
      java.lang.Object ref = compileSdkTarget_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        compileSdkTarget_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The compilation target as a string. This is the full extended target hash string.
     * </pre>
     *
     * <code>optional string compile_sdk_target = 2;</code>
     * @return The bytes for compileSdkTarget.
     */
    public com.google.protobuf.ByteString
        getCompileSdkTargetBytes() {
      java.lang.Object ref = compileSdkTarget_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        compileSdkTarget_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The compilation target as a string. This is the full extended target hash string.
     * </pre>
     *
     * <code>optional string compile_sdk_target = 2;</code>
     * @param value The compileSdkTarget to set.
     * @return This builder for chaining.
     */
    public Builder setCompileSdkTarget(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      compileSdkTarget_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The compilation target as a string. This is the full extended target hash string.
     * </pre>
     *
     * <code>optional string compile_sdk_target = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCompileSdkTarget() {
      compileSdkTarget_ = getDefaultInstance().getCompileSdkTarget();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The compilation target as a string. This is the full extended target hash string.
     * </pre>
     *
     * <code>optional string compile_sdk_target = 2;</code>
     * @param value The bytes for compileSdkTarget to set.
     * @return This builder for chaining.
     */
    public Builder setCompileSdkTargetBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      compileSdkTarget_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.android.builder.model.proto.ide.AndroidVersion minSdkVersion_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.builder.model.proto.ide.AndroidVersion, com.android.builder.model.proto.ide.AndroidVersion.Builder, com.android.builder.model.proto.ide.AndroidVersionOrBuilder> minSdkVersionBuilder_;
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     * @return Whether the minSdkVersion field is set.
     */
    public boolean hasMinSdkVersion() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     * @return The minSdkVersion.
     */
    public com.android.builder.model.proto.ide.AndroidVersion getMinSdkVersion() {
      if (minSdkVersionBuilder_ == null) {
        return minSdkVersion_ == null ? com.android.builder.model.proto.ide.AndroidVersion.getDefaultInstance() : minSdkVersion_;
      } else {
        return minSdkVersionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    public Builder setMinSdkVersion(com.android.builder.model.proto.ide.AndroidVersion value) {
      if (minSdkVersionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        minSdkVersion_ = value;
      } else {
        minSdkVersionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    public Builder setMinSdkVersion(
        com.android.builder.model.proto.ide.AndroidVersion.Builder builderForValue) {
      if (minSdkVersionBuilder_ == null) {
        minSdkVersion_ = builderForValue.build();
      } else {
        minSdkVersionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    public Builder mergeMinSdkVersion(com.android.builder.model.proto.ide.AndroidVersion value) {
      if (minSdkVersionBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          minSdkVersion_ != null &&
          minSdkVersion_ != com.android.builder.model.proto.ide.AndroidVersion.getDefaultInstance()) {
          getMinSdkVersionBuilder().mergeFrom(value);
        } else {
          minSdkVersion_ = value;
        }
      } else {
        minSdkVersionBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    public Builder clearMinSdkVersion() {
      bitField0_ = (bitField0_ & ~0x00000004);
      minSdkVersion_ = null;
      if (minSdkVersionBuilder_ != null) {
        minSdkVersionBuilder_.dispose();
        minSdkVersionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    public com.android.builder.model.proto.ide.AndroidVersion.Builder getMinSdkVersionBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getMinSdkVersionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    public com.android.builder.model.proto.ide.AndroidVersionOrBuilder getMinSdkVersionOrBuilder() {
      if (minSdkVersionBuilder_ != null) {
        return minSdkVersionBuilder_.getMessageOrBuilder();
      } else {
        return minSdkVersion_ == null ?
            com.android.builder.model.proto.ide.AndroidVersion.getDefaultInstance() : minSdkVersion_;
      }
    }
    /**
     * <pre>
     * The min SDK version of this artifact.
     * </pre>
     *
     * <code>optional .AndroidVersion min_sdk_version = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.builder.model.proto.ide.AndroidVersion, com.android.builder.model.proto.ide.AndroidVersion.Builder, com.android.builder.model.proto.ide.AndroidVersionOrBuilder> 
        getMinSdkVersionFieldBuilder() {
      if (minSdkVersionBuilder_ == null) {
        minSdkVersionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.builder.model.proto.ide.AndroidVersion, com.android.builder.model.proto.ide.AndroidVersion.Builder, com.android.builder.model.proto.ide.AndroidVersionOrBuilder>(
                getMinSdkVersion(),
                getParentForChildren(),
                isClean());
        minSdkVersion_ = null;
      }
      return minSdkVersionBuilder_;
    }

    private int maxSdkVersion_ ;
    /**
     * <pre>
     * The max SDK version of this artifact.
     * </pre>
     *
     * <code>optional int32 max_sdk_version = 4;</code>
     * @return Whether the maxSdkVersion field is set.
     */
    @java.lang.Override
    public boolean hasMaxSdkVersion() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The max SDK version of this artifact.
     * </pre>
     *
     * <code>optional int32 max_sdk_version = 4;</code>
     * @return The maxSdkVersion.
     */
    @java.lang.Override
    public int getMaxSdkVersion() {
      return maxSdkVersion_;
    }
    /**
     * <pre>
     * The max SDK version of this artifact.
     * </pre>
     *
     * <code>optional int32 max_sdk_version = 4;</code>
     * @param value The maxSdkVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMaxSdkVersion(int value) {

      maxSdkVersion_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The max SDK version of this artifact.
     * </pre>
     *
     * <code>optional int32 max_sdk_version = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxSdkVersion() {
      bitField0_ = (bitField0_ & ~0x00000008);
      maxSdkVersion_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.android.builder.model.proto.ide.File> proguardFiles_ =
      java.util.Collections.emptyList();
    private void ensureProguardFilesIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        proguardFiles_ = new java.util.ArrayList<com.android.builder.model.proto.ide.File>(proguardFiles_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder> proguardFilesBuilder_;

    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public java.util.List<com.android.builder.model.proto.ide.File> getProguardFilesList() {
      if (proguardFilesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(proguardFiles_);
      } else {
        return proguardFilesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public int getProguardFilesCount() {
      if (proguardFilesBuilder_ == null) {
        return proguardFiles_.size();
      } else {
        return proguardFilesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public com.android.builder.model.proto.ide.File getProguardFiles(int index) {
      if (proguardFilesBuilder_ == null) {
        return proguardFiles_.get(index);
      } else {
        return proguardFilesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder setProguardFiles(
        int index, com.android.builder.model.proto.ide.File value) {
      if (proguardFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProguardFilesIsMutable();
        proguardFiles_.set(index, value);
        onChanged();
      } else {
        proguardFilesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder setProguardFiles(
        int index, com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (proguardFilesBuilder_ == null) {
        ensureProguardFilesIsMutable();
        proguardFiles_.set(index, builderForValue.build());
        onChanged();
      } else {
        proguardFilesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder addProguardFiles(com.android.builder.model.proto.ide.File value) {
      if (proguardFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProguardFilesIsMutable();
        proguardFiles_.add(value);
        onChanged();
      } else {
        proguardFilesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder addProguardFiles(
        int index, com.android.builder.model.proto.ide.File value) {
      if (proguardFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProguardFilesIsMutable();
        proguardFiles_.add(index, value);
        onChanged();
      } else {
        proguardFilesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder addProguardFiles(
        com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (proguardFilesBuilder_ == null) {
        ensureProguardFilesIsMutable();
        proguardFiles_.add(builderForValue.build());
        onChanged();
      } else {
        proguardFilesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder addProguardFiles(
        int index, com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (proguardFilesBuilder_ == null) {
        ensureProguardFilesIsMutable();
        proguardFiles_.add(index, builderForValue.build());
        onChanged();
      } else {
        proguardFilesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder addAllProguardFiles(
        java.lang.Iterable<? extends com.android.builder.model.proto.ide.File> values) {
      if (proguardFilesBuilder_ == null) {
        ensureProguardFilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, proguardFiles_);
        onChanged();
      } else {
        proguardFilesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder clearProguardFiles() {
      if (proguardFilesBuilder_ == null) {
        proguardFiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        proguardFilesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public Builder removeProguardFiles(int index) {
      if (proguardFilesBuilder_ == null) {
        ensureProguardFilesIsMutable();
        proguardFiles_.remove(index);
        onChanged();
      } else {
        proguardFilesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder getProguardFilesBuilder(
        int index) {
      return getProguardFilesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public com.android.builder.model.proto.ide.FileOrBuilder getProguardFilesOrBuilder(
        int index) {
      if (proguardFilesBuilder_ == null) {
        return proguardFiles_.get(index);  } else {
        return proguardFilesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public java.util.List<? extends com.android.builder.model.proto.ide.FileOrBuilder> 
         getProguardFilesOrBuilderList() {
      if (proguardFilesBuilder_ != null) {
        return proguardFilesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(proguardFiles_);
      }
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder addProguardFilesBuilder() {
      return getProguardFilesFieldBuilder().addBuilder(
          com.android.builder.model.proto.ide.File.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder addProguardFilesBuilder(
        int index) {
      return getProguardFilesFieldBuilder().addBuilder(
          index, com.android.builder.model.proto.ide.File.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies the ProGuard configuration files that the plugin should use.
     * There are two ProGuard rules files that ship with the Android plugin and are used by
     * default:
     *   * proguard-android.txt
     *   * proguard-android-optimize.txt
     * `proguard-android-optimize.txt` is identical to `proguard-android.txt`,
     * except with optimizations enabled.
     * </pre>
     *
     * <code>repeated .File proguard_files = 5;</code>
     */
    public java.util.List<com.android.builder.model.proto.ide.File.Builder> 
         getProguardFilesBuilderList() {
      return getProguardFilesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder> 
        getProguardFilesFieldBuilder() {
      if (proguardFilesBuilder_ == null) {
        proguardFilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder>(
                proguardFiles_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        proguardFiles_ = null;
      }
      return proguardFilesBuilder_;
    }

    private java.util.List<com.android.builder.model.proto.ide.File> consumerProguardFiles_ =
      java.util.Collections.emptyList();
    private void ensureConsumerProguardFilesIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        consumerProguardFiles_ = new java.util.ArrayList<com.android.builder.model.proto.ide.File>(consumerProguardFiles_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder> consumerProguardFilesBuilder_;

    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public java.util.List<com.android.builder.model.proto.ide.File> getConsumerProguardFilesList() {
      if (consumerProguardFilesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(consumerProguardFiles_);
      } else {
        return consumerProguardFilesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public int getConsumerProguardFilesCount() {
      if (consumerProguardFilesBuilder_ == null) {
        return consumerProguardFiles_.size();
      } else {
        return consumerProguardFilesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public com.android.builder.model.proto.ide.File getConsumerProguardFiles(int index) {
      if (consumerProguardFilesBuilder_ == null) {
        return consumerProguardFiles_.get(index);
      } else {
        return consumerProguardFilesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder setConsumerProguardFiles(
        int index, com.android.builder.model.proto.ide.File value) {
      if (consumerProguardFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.set(index, value);
        onChanged();
      } else {
        consumerProguardFilesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder setConsumerProguardFiles(
        int index, com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (consumerProguardFilesBuilder_ == null) {
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.set(index, builderForValue.build());
        onChanged();
      } else {
        consumerProguardFilesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder addConsumerProguardFiles(com.android.builder.model.proto.ide.File value) {
      if (consumerProguardFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.add(value);
        onChanged();
      } else {
        consumerProguardFilesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder addConsumerProguardFiles(
        int index, com.android.builder.model.proto.ide.File value) {
      if (consumerProguardFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.add(index, value);
        onChanged();
      } else {
        consumerProguardFilesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder addConsumerProguardFiles(
        com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (consumerProguardFilesBuilder_ == null) {
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.add(builderForValue.build());
        onChanged();
      } else {
        consumerProguardFilesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder addConsumerProguardFiles(
        int index, com.android.builder.model.proto.ide.File.Builder builderForValue) {
      if (consumerProguardFilesBuilder_ == null) {
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.add(index, builderForValue.build());
        onChanged();
      } else {
        consumerProguardFilesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder addAllConsumerProguardFiles(
        java.lang.Iterable<? extends com.android.builder.model.proto.ide.File> values) {
      if (consumerProguardFilesBuilder_ == null) {
        ensureConsumerProguardFilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, consumerProguardFiles_);
        onChanged();
      } else {
        consumerProguardFilesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder clearConsumerProguardFiles() {
      if (consumerProguardFilesBuilder_ == null) {
        consumerProguardFiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        consumerProguardFilesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public Builder removeConsumerProguardFiles(int index) {
      if (consumerProguardFilesBuilder_ == null) {
        ensureConsumerProguardFilesIsMutable();
        consumerProguardFiles_.remove(index);
        onChanged();
      } else {
        consumerProguardFilesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder getConsumerProguardFilesBuilder(
        int index) {
      return getConsumerProguardFilesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public com.android.builder.model.proto.ide.FileOrBuilder getConsumerProguardFilesOrBuilder(
        int index) {
      if (consumerProguardFilesBuilder_ == null) {
        return consumerProguardFiles_.get(index);  } else {
        return consumerProguardFilesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public java.util.List<? extends com.android.builder.model.proto.ide.FileOrBuilder> 
         getConsumerProguardFilesOrBuilderList() {
      if (consumerProguardFilesBuilder_ != null) {
        return consumerProguardFilesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(consumerProguardFiles_);
      }
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder addConsumerProguardFilesBuilder() {
      return getConsumerProguardFilesFieldBuilder().addBuilder(
          com.android.builder.model.proto.ide.File.getDefaultInstance());
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public com.android.builder.model.proto.ide.File.Builder addConsumerProguardFilesBuilder(
        int index) {
      return getConsumerProguardFilesFieldBuilder().addBuilder(
          index, com.android.builder.model.proto.ide.File.getDefaultInstance());
    }
    /**
     * <pre>
     * The collection of proguard rule files for consumers of the library to use.
     * </pre>
     *
     * <code>repeated .File consumer_proguard_files = 6;</code>
     */
    public java.util.List<com.android.builder.model.proto.ide.File.Builder> 
         getConsumerProguardFilesBuilderList() {
      return getConsumerProguardFilesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder> 
        getConsumerProguardFilesFieldBuilder() {
      if (consumerProguardFilesBuilder_ == null) {
        consumerProguardFilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.builder.model.proto.ide.File, com.android.builder.model.proto.ide.File.Builder, com.android.builder.model.proto.ide.FileOrBuilder>(
                consumerProguardFiles_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        consumerProguardFiles_ = null;
      }
      return consumerProguardFilesBuilder_;
    }

    private boolean minificationEnabled_ ;
    /**
     * <pre>
     * Whether code shrinking is enabled.
     * </pre>
     *
     * <code>optional bool minification_enabled = 7;</code>
     * @return Whether the minificationEnabled field is set.
     */
    @java.lang.Override
    public boolean hasMinificationEnabled() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Whether code shrinking is enabled.
     * </pre>
     *
     * <code>optional bool minification_enabled = 7;</code>
     * @return The minificationEnabled.
     */
    @java.lang.Override
    public boolean getMinificationEnabled() {
      return minificationEnabled_;
    }
    /**
     * <pre>
     * Whether code shrinking is enabled.
     * </pre>
     *
     * <code>optional bool minification_enabled = 7;</code>
     * @param value The minificationEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setMinificationEnabled(boolean value) {

      minificationEnabled_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether code shrinking is enabled.
     * </pre>
     *
     * <code>optional bool minification_enabled = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinificationEnabled() {
      bitField0_ = (bitField0_ & ~0x00000040);
      minificationEnabled_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:MainVariantInfo)
  }

  // @@protoc_insertion_point(class_scope:MainVariantInfo)
  private static final com.android.kotlin.multiplatform.models.MainVariantInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.android.kotlin.multiplatform.models.MainVariantInfo();
  }

  public static com.android.kotlin.multiplatform.models.MainVariantInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MainVariantInfo>
      PARSER = new com.google.protobuf.AbstractParser<MainVariantInfo>() {
    @java.lang.Override
    public MainVariantInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MainVariantInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MainVariantInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.android.kotlin.multiplatform.models.MainVariantInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

