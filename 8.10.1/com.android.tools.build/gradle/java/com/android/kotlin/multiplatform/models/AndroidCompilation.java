// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kotlin_multiplatform_android_models.proto

package com.android.kotlin.multiplatform.models;

/**
 * Protobuf type {@code AndroidCompilation}
 */
public final class AndroidCompilation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:AndroidCompilation)
    AndroidCompilationOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AndroidCompilation.newBuilder() to construct.
  private AndroidCompilation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AndroidCompilation() {
    type_ = 0;
    defaultSourceSetName_ = "";
    assembleTaskName_ = "";
    kotlinCompileTaskName_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AndroidCompilation();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_AndroidCompilation_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_AndroidCompilation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.android.kotlin.multiplatform.models.AndroidCompilation.class, com.android.kotlin.multiplatform.models.AndroidCompilation.Builder.class);
  }

  /**
   * Protobuf enum {@code AndroidCompilation.CompilationType}
   */
  public enum CompilationType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MAIN = 0;</code>
     */
    MAIN(0),
    /**
     * <code>UNIT_TEST = 1;</code>
     */
    UNIT_TEST(1),
    /**
     * <code>INSTRUMENTED_TEST = 2;</code>
     */
    INSTRUMENTED_TEST(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MAIN = 0;</code>
     */
    public static final int MAIN_VALUE = 0;
    /**
     * <code>UNIT_TEST = 1;</code>
     */
    public static final int UNIT_TEST_VALUE = 1;
    /**
     * <code>INSTRUMENTED_TEST = 2;</code>
     */
    public static final int INSTRUMENTED_TEST_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompilationType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompilationType forNumber(int value) {
      switch (value) {
        case 0: return MAIN;
        case 1: return UNIT_TEST;
        case 2: return INSTRUMENTED_TEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompilationType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompilationType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompilationType>() {
            public CompilationType findValueByNumber(int number) {
              return CompilationType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.android.kotlin.multiplatform.models.AndroidCompilation.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompilationType[] VALUES = values();

    public static CompilationType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompilationType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AndroidCompilation.CompilationType)
  }

  private int bitField0_;
  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_ = 0;
  /**
   * <pre>
   * The type of the compilation.
   * </pre>
   *
   * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
   * @return Whether the type field is set.
   */
  @java.lang.Override public boolean hasType() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The type of the compilation.
   * </pre>
   *
   * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * The type of the compilation.
   * </pre>
   *
   * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
   * @return The type.
   */
  @java.lang.Override public com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType getType() {
    com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType result = com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType.forNumber(type_);
    return result == null ? com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType.UNRECOGNIZED : result;
  }

  public static final int MAIN_INFO_FIELD_NUMBER = 2;
  private com.android.kotlin.multiplatform.models.MainVariantInfo mainInfo_;
  /**
   * <pre>
   * The info of the main variant, will be available iff compilation type is MAIN.
   * </pre>
   *
   * <code>optional .MainVariantInfo main_info = 2;</code>
   * @return Whether the mainInfo field is set.
   */
  @java.lang.Override
  public boolean hasMainInfo() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The info of the main variant, will be available iff compilation type is MAIN.
   * </pre>
   *
   * <code>optional .MainVariantInfo main_info = 2;</code>
   * @return The mainInfo.
   */
  @java.lang.Override
  public com.android.kotlin.multiplatform.models.MainVariantInfo getMainInfo() {
    return mainInfo_ == null ? com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance() : mainInfo_;
  }
  /**
   * <pre>
   * The info of the main variant, will be available iff compilation type is MAIN.
   * </pre>
   *
   * <code>optional .MainVariantInfo main_info = 2;</code>
   */
  @java.lang.Override
  public com.android.kotlin.multiplatform.models.MainVariantInfoOrBuilder getMainInfoOrBuilder() {
    return mainInfo_ == null ? com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance() : mainInfo_;
  }

  public static final int UNIT_TEST_INFO_FIELD_NUMBER = 3;
  private com.android.kotlin.multiplatform.models.UnitTestInfo unitTestInfo_;
  /**
   * <pre>
   * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
   * </pre>
   *
   * <code>optional .UnitTestInfo unit_test_info = 3;</code>
   * @return Whether the unitTestInfo field is set.
   */
  @java.lang.Override
  public boolean hasUnitTestInfo() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
   * </pre>
   *
   * <code>optional .UnitTestInfo unit_test_info = 3;</code>
   * @return The unitTestInfo.
   */
  @java.lang.Override
  public com.android.kotlin.multiplatform.models.UnitTestInfo getUnitTestInfo() {
    return unitTestInfo_ == null ? com.android.kotlin.multiplatform.models.UnitTestInfo.getDefaultInstance() : unitTestInfo_;
  }
  /**
   * <pre>
   * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
   * </pre>
   *
   * <code>optional .UnitTestInfo unit_test_info = 3;</code>
   */
  @java.lang.Override
  public com.android.kotlin.multiplatform.models.UnitTestInfoOrBuilder getUnitTestInfoOrBuilder() {
    return unitTestInfo_ == null ? com.android.kotlin.multiplatform.models.UnitTestInfo.getDefaultInstance() : unitTestInfo_;
  }

  public static final int INSTRUMENTED_TEST_INFO_FIELD_NUMBER = 4;
  private com.android.kotlin.multiplatform.models.InstrumentedTestInfo instrumentedTestInfo_;
  /**
   * <pre>
   * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
   * </pre>
   *
   * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
   * @return Whether the instrumentedTestInfo field is set.
   */
  @java.lang.Override
  public boolean hasInstrumentedTestInfo() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
   * </pre>
   *
   * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
   * @return The instrumentedTestInfo.
   */
  @java.lang.Override
  public com.android.kotlin.multiplatform.models.InstrumentedTestInfo getInstrumentedTestInfo() {
    return instrumentedTestInfo_ == null ? com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance() : instrumentedTestInfo_;
  }
  /**
   * <pre>
   * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
   * </pre>
   *
   * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
   */
  @java.lang.Override
  public com.android.kotlin.multiplatform.models.InstrumentedTestInfoOrBuilder getInstrumentedTestInfoOrBuilder() {
    return instrumentedTestInfo_ == null ? com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance() : instrumentedTestInfo_;
  }

  public static final int DEFAULT_SOURCE_SET_NAME_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private volatile java.lang.Object defaultSourceSetName_ = "";
  /**
   * <pre>
   * The name of the default sourceSet of the compilation.
   * </pre>
   *
   * <code>optional string default_source_set_name = 5;</code>
   * @return Whether the defaultSourceSetName field is set.
   */
  @java.lang.Override
  public boolean hasDefaultSourceSetName() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The name of the default sourceSet of the compilation.
   * </pre>
   *
   * <code>optional string default_source_set_name = 5;</code>
   * @return The defaultSourceSetName.
   */
  @java.lang.Override
  public java.lang.String getDefaultSourceSetName() {
    java.lang.Object ref = defaultSourceSetName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      defaultSourceSetName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the default sourceSet of the compilation.
   * </pre>
   *
   * <code>optional string default_source_set_name = 5;</code>
   * @return The bytes for defaultSourceSetName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDefaultSourceSetNameBytes() {
    java.lang.Object ref = defaultSourceSetName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      defaultSourceSetName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ASSEMBLE_TASK_NAME_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private volatile java.lang.Object assembleTaskName_ = "";
  /**
   * <pre>
   * The gradle assemble task name.
   * </pre>
   *
   * <code>optional string assemble_task_name = 6;</code>
   * @return Whether the assembleTaskName field is set.
   */
  @java.lang.Override
  public boolean hasAssembleTaskName() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The gradle assemble task name.
   * </pre>
   *
   * <code>optional string assemble_task_name = 6;</code>
   * @return The assembleTaskName.
   */
  @java.lang.Override
  public java.lang.String getAssembleTaskName() {
    java.lang.Object ref = assembleTaskName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      assembleTaskName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The gradle assemble task name.
   * </pre>
   *
   * <code>optional string assemble_task_name = 6;</code>
   * @return The bytes for assembleTaskName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAssembleTaskNameBytes() {
    java.lang.Object ref = assembleTaskName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      assembleTaskName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int KOTLIN_COMPILE_TASK_NAME_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object kotlinCompileTaskName_ = "";
  /**
   * <pre>
   * The kotlin gradle compilation task name.
   * </pre>
   *
   * <code>optional string kotlin_compile_task_name = 7;</code>
   * @return Whether the kotlinCompileTaskName field is set.
   */
  @java.lang.Override
  public boolean hasKotlinCompileTaskName() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * The kotlin gradle compilation task name.
   * </pre>
   *
   * <code>optional string kotlin_compile_task_name = 7;</code>
   * @return The kotlinCompileTaskName.
   */
  @java.lang.Override
  public java.lang.String getKotlinCompileTaskName() {
    java.lang.Object ref = kotlinCompileTaskName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      kotlinCompileTaskName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The kotlin gradle compilation task name.
   * </pre>
   *
   * <code>optional string kotlin_compile_task_name = 7;</code>
   * @return The bytes for kotlinCompileTaskName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKotlinCompileTaskNameBytes() {
    java.lang.Object ref = kotlinCompileTaskName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      kotlinCompileTaskName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, type_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getMainInfo());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getUnitTestInfo());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(4, getInstrumentedTestInfo());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, defaultSourceSetName_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, assembleTaskName_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, kotlinCompileTaskName_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMainInfo());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getUnitTestInfo());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getInstrumentedTestInfo());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, defaultSourceSetName_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, assembleTaskName_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, kotlinCompileTaskName_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.android.kotlin.multiplatform.models.AndroidCompilation)) {
      return super.equals(obj);
    }
    com.android.kotlin.multiplatform.models.AndroidCompilation other = (com.android.kotlin.multiplatform.models.AndroidCompilation) obj;

    if (hasType() != other.hasType()) return false;
    if (hasType()) {
      if (type_ != other.type_) return false;
    }
    if (hasMainInfo() != other.hasMainInfo()) return false;
    if (hasMainInfo()) {
      if (!getMainInfo()
          .equals(other.getMainInfo())) return false;
    }
    if (hasUnitTestInfo() != other.hasUnitTestInfo()) return false;
    if (hasUnitTestInfo()) {
      if (!getUnitTestInfo()
          .equals(other.getUnitTestInfo())) return false;
    }
    if (hasInstrumentedTestInfo() != other.hasInstrumentedTestInfo()) return false;
    if (hasInstrumentedTestInfo()) {
      if (!getInstrumentedTestInfo()
          .equals(other.getInstrumentedTestInfo())) return false;
    }
    if (hasDefaultSourceSetName() != other.hasDefaultSourceSetName()) return false;
    if (hasDefaultSourceSetName()) {
      if (!getDefaultSourceSetName()
          .equals(other.getDefaultSourceSetName())) return false;
    }
    if (hasAssembleTaskName() != other.hasAssembleTaskName()) return false;
    if (hasAssembleTaskName()) {
      if (!getAssembleTaskName()
          .equals(other.getAssembleTaskName())) return false;
    }
    if (hasKotlinCompileTaskName() != other.hasKotlinCompileTaskName()) return false;
    if (hasKotlinCompileTaskName()) {
      if (!getKotlinCompileTaskName()
          .equals(other.getKotlinCompileTaskName())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasType()) {
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
    }
    if (hasMainInfo()) {
      hash = (37 * hash) + MAIN_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getMainInfo().hashCode();
    }
    if (hasUnitTestInfo()) {
      hash = (37 * hash) + UNIT_TEST_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getUnitTestInfo().hashCode();
    }
    if (hasInstrumentedTestInfo()) {
      hash = (37 * hash) + INSTRUMENTED_TEST_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getInstrumentedTestInfo().hashCode();
    }
    if (hasDefaultSourceSetName()) {
      hash = (37 * hash) + DEFAULT_SOURCE_SET_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getDefaultSourceSetName().hashCode();
    }
    if (hasAssembleTaskName()) {
      hash = (37 * hash) + ASSEMBLE_TASK_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getAssembleTaskName().hashCode();
    }
    if (hasKotlinCompileTaskName()) {
      hash = (37 * hash) + KOTLIN_COMPILE_TASK_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getKotlinCompileTaskName().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.kotlin.multiplatform.models.AndroidCompilation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.android.kotlin.multiplatform.models.AndroidCompilation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code AndroidCompilation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:AndroidCompilation)
      com.android.kotlin.multiplatform.models.AndroidCompilationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_AndroidCompilation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_AndroidCompilation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.kotlin.multiplatform.models.AndroidCompilation.class, com.android.kotlin.multiplatform.models.AndroidCompilation.Builder.class);
    }

    // Construct using com.android.kotlin.multiplatform.models.AndroidCompilation.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMainInfoFieldBuilder();
        getUnitTestInfoFieldBuilder();
        getInstrumentedTestInfoFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      type_ = 0;
      mainInfo_ = null;
      if (mainInfoBuilder_ != null) {
        mainInfoBuilder_.dispose();
        mainInfoBuilder_ = null;
      }
      unitTestInfo_ = null;
      if (unitTestInfoBuilder_ != null) {
        unitTestInfoBuilder_.dispose();
        unitTestInfoBuilder_ = null;
      }
      instrumentedTestInfo_ = null;
      if (instrumentedTestInfoBuilder_ != null) {
        instrumentedTestInfoBuilder_.dispose();
        instrumentedTestInfoBuilder_ = null;
      }
      defaultSourceSetName_ = "";
      assembleTaskName_ = "";
      kotlinCompileTaskName_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.android.kotlin.multiplatform.models.KotlinMultiplatformAndroidModelsProto.internal_static_AndroidCompilation_descriptor;
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.AndroidCompilation getDefaultInstanceForType() {
      return com.android.kotlin.multiplatform.models.AndroidCompilation.getDefaultInstance();
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.AndroidCompilation build() {
      com.android.kotlin.multiplatform.models.AndroidCompilation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.android.kotlin.multiplatform.models.AndroidCompilation buildPartial() {
      com.android.kotlin.multiplatform.models.AndroidCompilation result = new com.android.kotlin.multiplatform.models.AndroidCompilation(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.android.kotlin.multiplatform.models.AndroidCompilation result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.type_ = type_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.mainInfo_ = mainInfoBuilder_ == null
            ? mainInfo_
            : mainInfoBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.unitTestInfo_ = unitTestInfoBuilder_ == null
            ? unitTestInfo_
            : unitTestInfoBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.instrumentedTestInfo_ = instrumentedTestInfoBuilder_ == null
            ? instrumentedTestInfo_
            : instrumentedTestInfoBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.defaultSourceSetName_ = defaultSourceSetName_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.assembleTaskName_ = assembleTaskName_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.kotlinCompileTaskName_ = kotlinCompileTaskName_;
        to_bitField0_ |= 0x00000040;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.android.kotlin.multiplatform.models.AndroidCompilation) {
        return mergeFrom((com.android.kotlin.multiplatform.models.AndroidCompilation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.android.kotlin.multiplatform.models.AndroidCompilation other) {
      if (other == com.android.kotlin.multiplatform.models.AndroidCompilation.getDefaultInstance()) return this;
      if (other.hasType()) {
        setType(other.getType());
      }
      if (other.hasMainInfo()) {
        mergeMainInfo(other.getMainInfo());
      }
      if (other.hasUnitTestInfo()) {
        mergeUnitTestInfo(other.getUnitTestInfo());
      }
      if (other.hasInstrumentedTestInfo()) {
        mergeInstrumentedTestInfo(other.getInstrumentedTestInfo());
      }
      if (other.hasDefaultSourceSetName()) {
        defaultSourceSetName_ = other.defaultSourceSetName_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (other.hasAssembleTaskName()) {
        assembleTaskName_ = other.assembleTaskName_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      if (other.hasKotlinCompileTaskName()) {
        kotlinCompileTaskName_ = other.kotlinCompileTaskName_;
        bitField0_ |= 0x00000040;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              type_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getMainInfoFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getUnitTestInfoFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getInstrumentedTestInfoFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              defaultSourceSetName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              assembleTaskName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              kotlinCompileTaskName_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int type_ = 0;
    /**
     * <pre>
     * The type of the compilation.
     * </pre>
     *
     * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The type of the compilation.
     * </pre>
     *
     * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The type of the compilation.
     * </pre>
     *
     * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of the compilation.
     * </pre>
     *
     * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType getType() {
      com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType result = com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType.forNumber(type_);
      return result == null ? com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The type of the compilation.
     * </pre>
     *
     * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(com.android.kotlin.multiplatform.models.AndroidCompilation.CompilationType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of the compilation.
     * </pre>
     *
     * <code>optional .AndroidCompilation.CompilationType type = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      onChanged();
      return this;
    }

    private com.android.kotlin.multiplatform.models.MainVariantInfo mainInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.kotlin.multiplatform.models.MainVariantInfo, com.android.kotlin.multiplatform.models.MainVariantInfo.Builder, com.android.kotlin.multiplatform.models.MainVariantInfoOrBuilder> mainInfoBuilder_;
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     * @return Whether the mainInfo field is set.
     */
    public boolean hasMainInfo() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     * @return The mainInfo.
     */
    public com.android.kotlin.multiplatform.models.MainVariantInfo getMainInfo() {
      if (mainInfoBuilder_ == null) {
        return mainInfo_ == null ? com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance() : mainInfo_;
      } else {
        return mainInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    public Builder setMainInfo(com.android.kotlin.multiplatform.models.MainVariantInfo value) {
      if (mainInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mainInfo_ = value;
      } else {
        mainInfoBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    public Builder setMainInfo(
        com.android.kotlin.multiplatform.models.MainVariantInfo.Builder builderForValue) {
      if (mainInfoBuilder_ == null) {
        mainInfo_ = builderForValue.build();
      } else {
        mainInfoBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    public Builder mergeMainInfo(com.android.kotlin.multiplatform.models.MainVariantInfo value) {
      if (mainInfoBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          mainInfo_ != null &&
          mainInfo_ != com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance()) {
          getMainInfoBuilder().mergeFrom(value);
        } else {
          mainInfo_ = value;
        }
      } else {
        mainInfoBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    public Builder clearMainInfo() {
      bitField0_ = (bitField0_ & ~0x00000002);
      mainInfo_ = null;
      if (mainInfoBuilder_ != null) {
        mainInfoBuilder_.dispose();
        mainInfoBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    public com.android.kotlin.multiplatform.models.MainVariantInfo.Builder getMainInfoBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMainInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    public com.android.kotlin.multiplatform.models.MainVariantInfoOrBuilder getMainInfoOrBuilder() {
      if (mainInfoBuilder_ != null) {
        return mainInfoBuilder_.getMessageOrBuilder();
      } else {
        return mainInfo_ == null ?
            com.android.kotlin.multiplatform.models.MainVariantInfo.getDefaultInstance() : mainInfo_;
      }
    }
    /**
     * <pre>
     * The info of the main variant, will be available iff compilation type is MAIN.
     * </pre>
     *
     * <code>optional .MainVariantInfo main_info = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.kotlin.multiplatform.models.MainVariantInfo, com.android.kotlin.multiplatform.models.MainVariantInfo.Builder, com.android.kotlin.multiplatform.models.MainVariantInfoOrBuilder> 
        getMainInfoFieldBuilder() {
      if (mainInfoBuilder_ == null) {
        mainInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.kotlin.multiplatform.models.MainVariantInfo, com.android.kotlin.multiplatform.models.MainVariantInfo.Builder, com.android.kotlin.multiplatform.models.MainVariantInfoOrBuilder>(
                getMainInfo(),
                getParentForChildren(),
                isClean());
        mainInfo_ = null;
      }
      return mainInfoBuilder_;
    }

    private com.android.kotlin.multiplatform.models.UnitTestInfo unitTestInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.kotlin.multiplatform.models.UnitTestInfo, com.android.kotlin.multiplatform.models.UnitTestInfo.Builder, com.android.kotlin.multiplatform.models.UnitTestInfoOrBuilder> unitTestInfoBuilder_;
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     * @return Whether the unitTestInfo field is set.
     */
    public boolean hasUnitTestInfo() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     * @return The unitTestInfo.
     */
    public com.android.kotlin.multiplatform.models.UnitTestInfo getUnitTestInfo() {
      if (unitTestInfoBuilder_ == null) {
        return unitTestInfo_ == null ? com.android.kotlin.multiplatform.models.UnitTestInfo.getDefaultInstance() : unitTestInfo_;
      } else {
        return unitTestInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    public Builder setUnitTestInfo(com.android.kotlin.multiplatform.models.UnitTestInfo value) {
      if (unitTestInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        unitTestInfo_ = value;
      } else {
        unitTestInfoBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    public Builder setUnitTestInfo(
        com.android.kotlin.multiplatform.models.UnitTestInfo.Builder builderForValue) {
      if (unitTestInfoBuilder_ == null) {
        unitTestInfo_ = builderForValue.build();
      } else {
        unitTestInfoBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    public Builder mergeUnitTestInfo(com.android.kotlin.multiplatform.models.UnitTestInfo value) {
      if (unitTestInfoBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          unitTestInfo_ != null &&
          unitTestInfo_ != com.android.kotlin.multiplatform.models.UnitTestInfo.getDefaultInstance()) {
          getUnitTestInfoBuilder().mergeFrom(value);
        } else {
          unitTestInfo_ = value;
        }
      } else {
        unitTestInfoBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    public Builder clearUnitTestInfo() {
      bitField0_ = (bitField0_ & ~0x00000004);
      unitTestInfo_ = null;
      if (unitTestInfoBuilder_ != null) {
        unitTestInfoBuilder_.dispose();
        unitTestInfoBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    public com.android.kotlin.multiplatform.models.UnitTestInfo.Builder getUnitTestInfoBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getUnitTestInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    public com.android.kotlin.multiplatform.models.UnitTestInfoOrBuilder getUnitTestInfoOrBuilder() {
      if (unitTestInfoBuilder_ != null) {
        return unitTestInfoBuilder_.getMessageOrBuilder();
      } else {
        return unitTestInfo_ == null ?
            com.android.kotlin.multiplatform.models.UnitTestInfo.getDefaultInstance() : unitTestInfo_;
      }
    }
    /**
     * <pre>
     * The info of the unit test component, will be available iff compilation type is UNIT_TEST.
     * </pre>
     *
     * <code>optional .UnitTestInfo unit_test_info = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.kotlin.multiplatform.models.UnitTestInfo, com.android.kotlin.multiplatform.models.UnitTestInfo.Builder, com.android.kotlin.multiplatform.models.UnitTestInfoOrBuilder> 
        getUnitTestInfoFieldBuilder() {
      if (unitTestInfoBuilder_ == null) {
        unitTestInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.kotlin.multiplatform.models.UnitTestInfo, com.android.kotlin.multiplatform.models.UnitTestInfo.Builder, com.android.kotlin.multiplatform.models.UnitTestInfoOrBuilder>(
                getUnitTestInfo(),
                getParentForChildren(),
                isClean());
        unitTestInfo_ = null;
      }
      return unitTestInfoBuilder_;
    }

    private com.android.kotlin.multiplatform.models.InstrumentedTestInfo instrumentedTestInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.kotlin.multiplatform.models.InstrumentedTestInfo, com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder, com.android.kotlin.multiplatform.models.InstrumentedTestInfoOrBuilder> instrumentedTestInfoBuilder_;
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     * @return Whether the instrumentedTestInfo field is set.
     */
    public boolean hasInstrumentedTestInfo() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     * @return The instrumentedTestInfo.
     */
    public com.android.kotlin.multiplatform.models.InstrumentedTestInfo getInstrumentedTestInfo() {
      if (instrumentedTestInfoBuilder_ == null) {
        return instrumentedTestInfo_ == null ? com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance() : instrumentedTestInfo_;
      } else {
        return instrumentedTestInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    public Builder setInstrumentedTestInfo(com.android.kotlin.multiplatform.models.InstrumentedTestInfo value) {
      if (instrumentedTestInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        instrumentedTestInfo_ = value;
      } else {
        instrumentedTestInfoBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    public Builder setInstrumentedTestInfo(
        com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder builderForValue) {
      if (instrumentedTestInfoBuilder_ == null) {
        instrumentedTestInfo_ = builderForValue.build();
      } else {
        instrumentedTestInfoBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    public Builder mergeInstrumentedTestInfo(com.android.kotlin.multiplatform.models.InstrumentedTestInfo value) {
      if (instrumentedTestInfoBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          instrumentedTestInfo_ != null &&
          instrumentedTestInfo_ != com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance()) {
          getInstrumentedTestInfoBuilder().mergeFrom(value);
        } else {
          instrumentedTestInfo_ = value;
        }
      } else {
        instrumentedTestInfoBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    public Builder clearInstrumentedTestInfo() {
      bitField0_ = (bitField0_ & ~0x00000008);
      instrumentedTestInfo_ = null;
      if (instrumentedTestInfoBuilder_ != null) {
        instrumentedTestInfoBuilder_.dispose();
        instrumentedTestInfoBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    public com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder getInstrumentedTestInfoBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getInstrumentedTestInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    public com.android.kotlin.multiplatform.models.InstrumentedTestInfoOrBuilder getInstrumentedTestInfoOrBuilder() {
      if (instrumentedTestInfoBuilder_ != null) {
        return instrumentedTestInfoBuilder_.getMessageOrBuilder();
      } else {
        return instrumentedTestInfo_ == null ?
            com.android.kotlin.multiplatform.models.InstrumentedTestInfo.getDefaultInstance() : instrumentedTestInfo_;
      }
    }
    /**
     * <pre>
     * The info of the instrumented test component, will be available iff compilation type is INSTRUMENTED_TEST.
     * </pre>
     *
     * <code>optional .InstrumentedTestInfo instrumented_test_info = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.kotlin.multiplatform.models.InstrumentedTestInfo, com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder, com.android.kotlin.multiplatform.models.InstrumentedTestInfoOrBuilder> 
        getInstrumentedTestInfoFieldBuilder() {
      if (instrumentedTestInfoBuilder_ == null) {
        instrumentedTestInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.kotlin.multiplatform.models.InstrumentedTestInfo, com.android.kotlin.multiplatform.models.InstrumentedTestInfo.Builder, com.android.kotlin.multiplatform.models.InstrumentedTestInfoOrBuilder>(
                getInstrumentedTestInfo(),
                getParentForChildren(),
                isClean());
        instrumentedTestInfo_ = null;
      }
      return instrumentedTestInfoBuilder_;
    }

    private java.lang.Object defaultSourceSetName_ = "";
    /**
     * <pre>
     * The name of the default sourceSet of the compilation.
     * </pre>
     *
     * <code>optional string default_source_set_name = 5;</code>
     * @return Whether the defaultSourceSetName field is set.
     */
    public boolean hasDefaultSourceSetName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The name of the default sourceSet of the compilation.
     * </pre>
     *
     * <code>optional string default_source_set_name = 5;</code>
     * @return The defaultSourceSetName.
     */
    public java.lang.String getDefaultSourceSetName() {
      java.lang.Object ref = defaultSourceSetName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        defaultSourceSetName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the default sourceSet of the compilation.
     * </pre>
     *
     * <code>optional string default_source_set_name = 5;</code>
     * @return The bytes for defaultSourceSetName.
     */
    public com.google.protobuf.ByteString
        getDefaultSourceSetNameBytes() {
      java.lang.Object ref = defaultSourceSetName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        defaultSourceSetName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the default sourceSet of the compilation.
     * </pre>
     *
     * <code>optional string default_source_set_name = 5;</code>
     * @param value The defaultSourceSetName to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultSourceSetName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      defaultSourceSetName_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the default sourceSet of the compilation.
     * </pre>
     *
     * <code>optional string default_source_set_name = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDefaultSourceSetName() {
      defaultSourceSetName_ = getDefaultInstance().getDefaultSourceSetName();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the default sourceSet of the compilation.
     * </pre>
     *
     * <code>optional string default_source_set_name = 5;</code>
     * @param value The bytes for defaultSourceSetName to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultSourceSetNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      defaultSourceSetName_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private java.lang.Object assembleTaskName_ = "";
    /**
     * <pre>
     * The gradle assemble task name.
     * </pre>
     *
     * <code>optional string assemble_task_name = 6;</code>
     * @return Whether the assembleTaskName field is set.
     */
    public boolean hasAssembleTaskName() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The gradle assemble task name.
     * </pre>
     *
     * <code>optional string assemble_task_name = 6;</code>
     * @return The assembleTaskName.
     */
    public java.lang.String getAssembleTaskName() {
      java.lang.Object ref = assembleTaskName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        assembleTaskName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The gradle assemble task name.
     * </pre>
     *
     * <code>optional string assemble_task_name = 6;</code>
     * @return The bytes for assembleTaskName.
     */
    public com.google.protobuf.ByteString
        getAssembleTaskNameBytes() {
      java.lang.Object ref = assembleTaskName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        assembleTaskName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The gradle assemble task name.
     * </pre>
     *
     * <code>optional string assemble_task_name = 6;</code>
     * @param value The assembleTaskName to set.
     * @return This builder for chaining.
     */
    public Builder setAssembleTaskName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      assembleTaskName_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The gradle assemble task name.
     * </pre>
     *
     * <code>optional string assemble_task_name = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAssembleTaskName() {
      assembleTaskName_ = getDefaultInstance().getAssembleTaskName();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The gradle assemble task name.
     * </pre>
     *
     * <code>optional string assemble_task_name = 6;</code>
     * @param value The bytes for assembleTaskName to set.
     * @return This builder for chaining.
     */
    public Builder setAssembleTaskNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      assembleTaskName_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private java.lang.Object kotlinCompileTaskName_ = "";
    /**
     * <pre>
     * The kotlin gradle compilation task name.
     * </pre>
     *
     * <code>optional string kotlin_compile_task_name = 7;</code>
     * @return Whether the kotlinCompileTaskName field is set.
     */
    public boolean hasKotlinCompileTaskName() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * The kotlin gradle compilation task name.
     * </pre>
     *
     * <code>optional string kotlin_compile_task_name = 7;</code>
     * @return The kotlinCompileTaskName.
     */
    public java.lang.String getKotlinCompileTaskName() {
      java.lang.Object ref = kotlinCompileTaskName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        kotlinCompileTaskName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The kotlin gradle compilation task name.
     * </pre>
     *
     * <code>optional string kotlin_compile_task_name = 7;</code>
     * @return The bytes for kotlinCompileTaskName.
     */
    public com.google.protobuf.ByteString
        getKotlinCompileTaskNameBytes() {
      java.lang.Object ref = kotlinCompileTaskName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        kotlinCompileTaskName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The kotlin gradle compilation task name.
     * </pre>
     *
     * <code>optional string kotlin_compile_task_name = 7;</code>
     * @param value The kotlinCompileTaskName to set.
     * @return This builder for chaining.
     */
    public Builder setKotlinCompileTaskName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      kotlinCompileTaskName_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The kotlin gradle compilation task name.
     * </pre>
     *
     * <code>optional string kotlin_compile_task_name = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearKotlinCompileTaskName() {
      kotlinCompileTaskName_ = getDefaultInstance().getKotlinCompileTaskName();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The kotlin gradle compilation task name.
     * </pre>
     *
     * <code>optional string kotlin_compile_task_name = 7;</code>
     * @param value The bytes for kotlinCompileTaskName to set.
     * @return This builder for chaining.
     */
    public Builder setKotlinCompileTaskNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      kotlinCompileTaskName_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:AndroidCompilation)
  }

  // @@protoc_insertion_point(class_scope:AndroidCompilation)
  private static final com.android.kotlin.multiplatform.models.AndroidCompilation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.android.kotlin.multiplatform.models.AndroidCompilation();
  }

  public static com.android.kotlin.multiplatform.models.AndroidCompilation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AndroidCompilation>
      PARSER = new com.google.protobuf.AbstractParser<AndroidCompilation>() {
    @java.lang.Override
    public AndroidCompilation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AndroidCompilation> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AndroidCompilation> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.android.kotlin.multiplatform.models.AndroidCompilation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

