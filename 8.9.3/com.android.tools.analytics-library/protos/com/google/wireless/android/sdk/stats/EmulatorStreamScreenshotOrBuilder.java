// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface EmulatorStreamScreenshotOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.EmulatorStreamScreenshot)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Size of a single screenshot in bytes, w * h * bpp
   * </pre>
   *
   * <code>optional uint32 size = 1;</code>
   * @return Whether the size field is set.
   */
  boolean hasSize();
  /**
   * <pre>
   * Size of a single screenshot in bytes, w * h * bpp
   * </pre>
   *
   * <code>optional uint32 size = 1;</code>
   * @return The size.
   */
  int getSize();

  /**
   * <pre>
   * This gives us an idea of delivery delay we are experiencing
   * from the emulators perspective, and frames delivered.
   * </pre>
   *
   * <code>optional .android_studio.PercentileEstimator delivery_delay = 2 [lazy = true];</code>
   * @return Whether the deliveryDelay field is set.
   */
  boolean hasDeliveryDelay();
  /**
   * <pre>
   * This gives us an idea of delivery delay we are experiencing
   * from the emulators perspective, and frames delivered.
   * </pre>
   *
   * <code>optional .android_studio.PercentileEstimator delivery_delay = 2 [lazy = true];</code>
   * @return The deliveryDelay.
   */
  com.google.wireless.android.sdk.stats.PercentileEstimator getDeliveryDelay();
  /**
   * <pre>
   * This gives us an idea of delivery delay we are experiencing
   * from the emulators perspective, and frames delivered.
   * </pre>
   *
   * <code>optional .android_studio.PercentileEstimator delivery_delay = 2 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.PercentileEstimatorOrBuilder getDeliveryDelayOrBuilder();

  /**
   * <pre>
   * # of frames generated by the emulator. max(delivery_delay.count) &lt;= frames
   * </pre>
   *
   * <code>optional uint32 frames = 3;</code>
   * @return Whether the frames field is set.
   */
  boolean hasFrames();
  /**
   * <pre>
   * # of frames generated by the emulator. max(delivery_delay.count) &lt;= frames
   * </pre>
   *
   * <code>optional uint32 frames = 3;</code>
   * @return The frames.
   */
  int getFrames();
}
