// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface EmulatorVirtualSceneSessionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.EmulatorVirtualSceneSession)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * How long the session was running, in milliseconds.
   * </pre>
   *
   * <code>optional uint64 duration_ms = 1;</code>
   * @return Whether the durationMs field is set.
   */
  boolean hasDurationMs();
  /**
   * <pre>
   * How long the session was running, in milliseconds.
   * </pre>
   *
   * <code>optional uint64 duration_ms = 1;</code>
   * @return The durationMs.
   */
  long getDurationMs();

  /**
   * <pre>
   * Minimum sensor update delay in milliseconds.
   * </pre>
   *
   * <code>optional uint32 min_sensor_delay_ms = 2;</code>
   * @return Whether the minSensorDelayMs field is set.
   */
  boolean hasMinSensorDelayMs();
  /**
   * <pre>
   * Minimum sensor update delay in milliseconds.
   * </pre>
   *
   * <code>optional uint32 min_sensor_delay_ms = 2;</code>
   * @return The minSensorDelayMs.
   */
  int getMinSensorDelayMs();

  /**
   * <pre>
   * Total tap count when the camera is running.
   * </pre>
   *
   * <code>optional uint32 tap_count = 3;</code>
   * @return Whether the tapCount field is set.
   */
  boolean hasTapCount();
  /**
   * <pre>
   * Total tap count when the camera is running.
   * </pre>
   *
   * <code>optional uint32 tap_count = 3;</code>
   * @return The tapCount.
   */
  int getTapCount();

  /**
   * <pre>
   * The number of times the orientation changed during the session.
   * </pre>
   *
   * <code>optional uint32 orientation_change_count = 4;</code>
   * @return Whether the orientationChangeCount field is set.
   */
  boolean hasOrientationChangeCount();
  /**
   * <pre>
   * The number of times the orientation changed during the session.
   * </pre>
   *
   * <code>optional uint32 orientation_change_count = 4;</code>
   * @return The orientationChangeCount.
   */
  int getOrientationChangeCount();

  /**
   * <pre>
   * Whether the virtual sensors window was visible at any point during the
   * session.
   * </pre>
   *
   * <code>optional bool virtual_sensors_visible = 5;</code>
   * @return Whether the virtualSensorsVisible field is set.
   */
  boolean hasVirtualSensorsVisible();
  /**
   * <pre>
   * Whether the virtual sensors window was visible at any point during the
   * session.
   * </pre>
   *
   * <code>optional bool virtual_sensors_visible = 5;</code>
   * @return The virtualSensorsVisible.
   */
  boolean getVirtualSensorsVisible();

  /**
   * <pre>
   * How many interactions were performed on the virtual sensors page.
   * </pre>
   *
   * <code>optional uint32 virtual_sensors_interaction_count = 6;</code>
   * @return Whether the virtualSensorsInteractionCount field is set.
   */
  boolean hasVirtualSensorsInteractionCount();
  /**
   * <pre>
   * How many interactions were performed on the virtual sensors page.
   * </pre>
   *
   * <code>optional uint32 virtual_sensors_interaction_count = 6;</code>
   * @return The virtualSensorsInteractionCount.
   */
  int getVirtualSensorsInteractionCount();

  /**
   * <pre>
   * Invocation count of WASD/Mouselook hotkey.
   * </pre>
   *
   * <code>optional uint32 hotkey_invoke_count = 7;</code>
   * @return Whether the hotkeyInvokeCount field is set.
   */
  boolean hasHotkeyInvokeCount();
  /**
   * <pre>
   * Invocation count of WASD/Mouselook hotkey.
   * </pre>
   *
   * <code>optional uint32 hotkey_invoke_count = 7;</code>
   * @return The hotkeyInvokeCount.
   */
  int getHotkeyInvokeCount();

  /**
   * <pre>
   * Total time the user was in WASD/Mouselook mode during this session.
   * </pre>
   *
   * <code>optional uint64 hotkey_duration_ms = 8;</code>
   * @return Whether the hotkeyDurationMs field is set.
   */
  boolean hasHotkeyDurationMs();
  /**
   * <pre>
   * Total time the user was in WASD/Mouselook mode during this session.
   * </pre>
   *
   * <code>optional uint64 hotkey_duration_ms = 8;</code>
   * @return The hotkeyDurationMs.
   */
  long getHotkeyDurationMs();

  /**
   * <pre>
   * Taps shortly after a hotkey invoke, to determine how much the user
   * alternates between modes to tap.
   * </pre>
   *
   * <code>optional uint32 taps_after_hotkey_invoke = 9;</code>
   * @return Whether the tapsAfterHotkeyInvoke field is set.
   */
  boolean hasTapsAfterHotkeyInvoke();
  /**
   * <pre>
   * Taps shortly after a hotkey invoke, to determine how much the user
   * alternates between modes to tap.
   * </pre>
   *
   * <code>optional uint32 taps_after_hotkey_invoke = 9;</code>
   * @return The tapsAfterHotkeyInvoke.
   */
  int getTapsAfterHotkeyInvoke();

  /**
   * <pre>
   * Total rotation performed in the virtual scene.
   * </pre>
   *
   * <code>optional double total_rotation_radians = 10;</code>
   * @return Whether the totalRotationRadians field is set.
   */
  boolean hasTotalRotationRadians();
  /**
   * <pre>
   * Total rotation performed in the virtual scene.
   * </pre>
   *
   * <code>optional double total_rotation_radians = 10;</code>
   * @return The totalRotationRadians.
   */
  double getTotalRotationRadians();

  /**
   * <pre>
   * Total translation performed in the virtual scene.
   * </pre>
   *
   * <code>optional double total_translation_meters = 11;</code>
   * @return Whether the totalTranslationMeters field is set.
   */
  boolean hasTotalTranslationMeters();
  /**
   * <pre>
   * Total translation performed in the virtual scene.
   * </pre>
   *
   * <code>optional double total_translation_meters = 11;</code>
   * @return The totalTranslationMeters.
   */
  double getTotalTranslationMeters();
}
