// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Data about tasks that always run
 * </pre>
 *
 * Protobuf type {@code android_studio.AlwaysRunTasksAnalyzerData}
 */
public final class AlwaysRunTasksAnalyzerData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.AlwaysRunTasksAnalyzerData)
    AlwaysRunTasksAnalyzerDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AlwaysRunTasksAnalyzerData.newBuilder() to construct.
  private AlwaysRunTasksAnalyzerData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AlwaysRunTasksAnalyzerData() {
    alwaysRunTasks_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AlwaysRunTasksAnalyzerData();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.class, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.Builder.class);
  }

  public interface AlwaysRunTaskOrBuilder extends
      // @@protoc_insertion_point(interface_extends:android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Reason the task is always running
     * </pre>
     *
     * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
     * @return Whether the reason field is set.
     */
    boolean hasReason();
    /**
     * <pre>
     * Reason the task is always running
     * </pre>
     *
     * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
     * @return The reason.
     */
    com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason getReason();

    /**
     * <pre>
     * The origin plugin of the always running task
     * Deprecated, use task_identifier instead
     * </pre>
     *
     * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
     * @deprecated android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.plugin_identifier is deprecated.
     *     See studio_stats.proto;l=11398
     * @return Whether the pluginIdentifier field is set.
     */
    @java.lang.Deprecated boolean hasPluginIdentifier();
    /**
     * <pre>
     * The origin plugin of the always running task
     * Deprecated, use task_identifier instead
     * </pre>
     *
     * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
     * @deprecated android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.plugin_identifier is deprecated.
     *     See studio_stats.proto;l=11398
     * @return The pluginIdentifier.
     */
    @java.lang.Deprecated com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier getPluginIdentifier();
    /**
     * <pre>
     * The origin plugin of the always running task
     * Deprecated, use task_identifier instead
     * </pre>
     *
     * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
     */
    @java.lang.Deprecated com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder getPluginIdentifierOrBuilder();

    /**
     * <pre>
     * The always running task identifier
     * </pre>
     *
     * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
     * @return Whether the taskIdentifier field is set.
     */
    boolean hasTaskIdentifier();
    /**
     * <pre>
     * The always running task identifier
     * </pre>
     *
     * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
     * @return The taskIdentifier.
     */
    com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier getTaskIdentifier();
    /**
     * <pre>
     * The always running task identifier
     * </pre>
     *
     * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
     */
    com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifierOrBuilder getTaskIdentifierOrBuilder();
  }
  /**
   * Protobuf type {@code android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask}
   */
  public static final class AlwaysRunTask extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask)
      AlwaysRunTaskOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AlwaysRunTask.newBuilder() to construct.
    private AlwaysRunTask(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AlwaysRunTask() {
      reason_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AlwaysRunTask();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_AlwaysRunTask_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_AlwaysRunTask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.class, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder.class);
    }

    /**
     * Protobuf enum {@code android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason}
     */
    public enum AlwaysRunReason
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_REASON = 0;</code>
       */
      UNKNOWN_REASON(0),
      /**
       * <code>NO_OUTPUTS_WITHOUT_ACTIONS = 1;</code>
       */
      NO_OUTPUTS_WITHOUT_ACTIONS(1),
      /**
       * <code>NO_OUTPUTS_WITH_ACTIONS = 2;</code>
       */
      NO_OUTPUTS_WITH_ACTIONS(2),
      /**
       * <code>UP_TO_DATE_WHEN_FALSE = 3;</code>
       */
      UP_TO_DATE_WHEN_FALSE(3),
      ;

      /**
       * <code>UNKNOWN_REASON = 0;</code>
       */
      public static final int UNKNOWN_REASON_VALUE = 0;
      /**
       * <code>NO_OUTPUTS_WITHOUT_ACTIONS = 1;</code>
       */
      public static final int NO_OUTPUTS_WITHOUT_ACTIONS_VALUE = 1;
      /**
       * <code>NO_OUTPUTS_WITH_ACTIONS = 2;</code>
       */
      public static final int NO_OUTPUTS_WITH_ACTIONS_VALUE = 2;
      /**
       * <code>UP_TO_DATE_WHEN_FALSE = 3;</code>
       */
      public static final int UP_TO_DATE_WHEN_FALSE_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AlwaysRunReason valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static AlwaysRunReason forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_REASON;
          case 1: return NO_OUTPUTS_WITHOUT_ACTIONS;
          case 2: return NO_OUTPUTS_WITH_ACTIONS;
          case 3: return UP_TO_DATE_WHEN_FALSE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AlwaysRunReason>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AlwaysRunReason> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AlwaysRunReason>() {
              public AlwaysRunReason findValueByNumber(int number) {
                return AlwaysRunReason.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.getDescriptor().getEnumTypes().get(0);
      }

      private static final AlwaysRunReason[] VALUES = values();

      public static AlwaysRunReason valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AlwaysRunReason(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason)
    }

    private int bitField0_;
    public static final int REASON_FIELD_NUMBER = 1;
    private int reason_ = 0;
    /**
     * <pre>
     * Reason the task is always running
     * </pre>
     *
     * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
     * @return Whether the reason field is set.
     */
    @java.lang.Override public boolean hasReason() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Reason the task is always running
     * </pre>
     *
     * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
     * @return The reason.
     */
    @java.lang.Override public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason getReason() {
      com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason result = com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason.forNumber(reason_);
      return result == null ? com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason.UNKNOWN_REASON : result;
    }

    public static final int PLUGIN_IDENTIFIER_FIELD_NUMBER = 2;
    private com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier pluginIdentifier_;
    /**
     * <pre>
     * The origin plugin of the always running task
     * Deprecated, use task_identifier instead
     * </pre>
     *
     * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
     * @deprecated android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.plugin_identifier is deprecated.
     *     See studio_stats.proto;l=11398
     * @return Whether the pluginIdentifier field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasPluginIdentifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The origin plugin of the always running task
     * Deprecated, use task_identifier instead
     * </pre>
     *
     * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
     * @deprecated android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.plugin_identifier is deprecated.
     *     See studio_stats.proto;l=11398
     * @return The pluginIdentifier.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier getPluginIdentifier() {
      return pluginIdentifier_ == null ? com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance() : pluginIdentifier_;
    }
    /**
     * <pre>
     * The origin plugin of the always running task
     * Deprecated, use task_identifier instead
     * </pre>
     *
     * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder getPluginIdentifierOrBuilder() {
      return pluginIdentifier_ == null ? com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance() : pluginIdentifier_;
    }

    public static final int TASK_IDENTIFIER_FIELD_NUMBER = 3;
    private com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier taskIdentifier_;
    /**
     * <pre>
     * The always running task identifier
     * </pre>
     *
     * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
     * @return Whether the taskIdentifier field is set.
     */
    @java.lang.Override
    public boolean hasTaskIdentifier() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The always running task identifier
     * </pre>
     *
     * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
     * @return The taskIdentifier.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier getTaskIdentifier() {
      return taskIdentifier_ == null ? com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.getDefaultInstance() : taskIdentifier_;
    }
    /**
     * <pre>
     * The always running task identifier
     * </pre>
     *
     * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifierOrBuilder getTaskIdentifierOrBuilder() {
      return taskIdentifier_ == null ? com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.getDefaultInstance() : taskIdentifier_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, reason_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getPluginIdentifier());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getTaskIdentifier());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, reason_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPluginIdentifier());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTaskIdentifier());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask)) {
        return super.equals(obj);
      }
      com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask other = (com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask) obj;

      if (hasReason() != other.hasReason()) return false;
      if (hasReason()) {
        if (reason_ != other.reason_) return false;
      }
      if (hasPluginIdentifier() != other.hasPluginIdentifier()) return false;
      if (hasPluginIdentifier()) {
        if (!getPluginIdentifier()
            .equals(other.getPluginIdentifier())) return false;
      }
      if (hasTaskIdentifier() != other.hasTaskIdentifier()) return false;
      if (hasTaskIdentifier()) {
        if (!getTaskIdentifier()
            .equals(other.getTaskIdentifier())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasReason()) {
        hash = (37 * hash) + REASON_FIELD_NUMBER;
        hash = (53 * hash) + reason_;
      }
      if (hasPluginIdentifier()) {
        hash = (37 * hash) + PLUGIN_IDENTIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getPluginIdentifier().hashCode();
      }
      if (hasTaskIdentifier()) {
        hash = (37 * hash) + TASK_IDENTIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getTaskIdentifier().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask)
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_AlwaysRunTask_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_AlwaysRunTask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.class, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder.class);
      }

      // Construct using com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPluginIdentifierFieldBuilder();
          getTaskIdentifierFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        reason_ = 0;
        pluginIdentifier_ = null;
        if (pluginIdentifierBuilder_ != null) {
          pluginIdentifierBuilder_.dispose();
          pluginIdentifierBuilder_ = null;
        }
        taskIdentifier_ = null;
        if (taskIdentifierBuilder_ != null) {
          taskIdentifierBuilder_.dispose();
          taskIdentifierBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_AlwaysRunTask_descriptor;
      }

      @java.lang.Override
      public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask getDefaultInstanceForType() {
        return com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask build() {
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask buildPartial() {
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask result = new com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.reason_ = reason_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.pluginIdentifier_ = pluginIdentifierBuilder_ == null
              ? pluginIdentifier_
              : pluginIdentifierBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.taskIdentifier_ = taskIdentifierBuilder_ == null
              ? taskIdentifier_
              : taskIdentifierBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask) {
          return mergeFrom((com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask other) {
        if (other == com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.getDefaultInstance()) return this;
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (other.hasPluginIdentifier()) {
          mergePluginIdentifier(other.getPluginIdentifier());
        }
        if (other.hasTaskIdentifier()) {
          mergeTaskIdentifier(other.getTaskIdentifier());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int tmpRaw = input.readEnum();
                com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason tmpValue =
                    com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(1, tmpRaw);
                } else {
                  reason_ = tmpRaw;
                  bitField0_ |= 0x00000001;
                }
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getPluginIdentifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getTaskIdentifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int reason_ = 0;
      /**
       * <pre>
       * Reason the task is always running
       * </pre>
       *
       * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
       * @return Whether the reason field is set.
       */
      @java.lang.Override public boolean hasReason() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Reason the task is always running
       * </pre>
       *
       * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
       * @return The reason.
       */
      @java.lang.Override
      public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason getReason() {
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason result = com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason.forNumber(reason_);
        return result == null ? com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason.UNKNOWN_REASON : result;
      }
      /**
       * <pre>
       * Reason the task is always running
       * </pre>
       *
       * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
       * @param value The reason to set.
       * @return This builder for chaining.
       */
      public Builder setReason(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        reason_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Reason the task is always running
       * </pre>
       *
       * <code>optional .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.AlwaysRunReason reason = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000001);
        reason_ = 0;
        onChanged();
        return this;
      }

      private com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier pluginIdentifier_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder> pluginIdentifierBuilder_;
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       * @deprecated android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.plugin_identifier is deprecated.
       *     See studio_stats.proto;l=11398
       * @return Whether the pluginIdentifier field is set.
       */
      @java.lang.Deprecated public boolean hasPluginIdentifier() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       * @deprecated android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask.plugin_identifier is deprecated.
       *     See studio_stats.proto;l=11398
       * @return The pluginIdentifier.
       */
      @java.lang.Deprecated public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier getPluginIdentifier() {
        if (pluginIdentifierBuilder_ == null) {
          return pluginIdentifier_ == null ? com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance() : pluginIdentifier_;
        } else {
          return pluginIdentifierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      @java.lang.Deprecated public Builder setPluginIdentifier(com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier value) {
        if (pluginIdentifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pluginIdentifier_ = value;
        } else {
          pluginIdentifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      @java.lang.Deprecated public Builder setPluginIdentifier(
          com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder builderForValue) {
        if (pluginIdentifierBuilder_ == null) {
          pluginIdentifier_ = builderForValue.build();
        } else {
          pluginIdentifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      @java.lang.Deprecated public Builder mergePluginIdentifier(com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier value) {
        if (pluginIdentifierBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            pluginIdentifier_ != null &&
            pluginIdentifier_ != com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance()) {
            getPluginIdentifierBuilder().mergeFrom(value);
          } else {
            pluginIdentifier_ = value;
          }
        } else {
          pluginIdentifierBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      @java.lang.Deprecated public Builder clearPluginIdentifier() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pluginIdentifier_ = null;
        if (pluginIdentifierBuilder_ != null) {
          pluginIdentifierBuilder_.dispose();
          pluginIdentifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      @java.lang.Deprecated public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder getPluginIdentifierBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getPluginIdentifierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      @java.lang.Deprecated public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder getPluginIdentifierOrBuilder() {
        if (pluginIdentifierBuilder_ != null) {
          return pluginIdentifierBuilder_.getMessageOrBuilder();
        } else {
          return pluginIdentifier_ == null ?
              com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance() : pluginIdentifier_;
        }
      }
      /**
       * <pre>
       * The origin plugin of the always running task
       * Deprecated, use task_identifier instead
       * </pre>
       *
       * <code>optional .android_studio.BuildAttributionPluginIdentifier plugin_identifier = 2 [deprecated = true, lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder> 
          getPluginIdentifierFieldBuilder() {
        if (pluginIdentifierBuilder_ == null) {
          pluginIdentifierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder>(
                  getPluginIdentifier(),
                  getParentForChildren(),
                  isClean());
          pluginIdentifier_ = null;
        }
        return pluginIdentifierBuilder_;
      }

      private com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier taskIdentifier_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier, com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifierOrBuilder> taskIdentifierBuilder_;
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       * @return Whether the taskIdentifier field is set.
       */
      public boolean hasTaskIdentifier() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       * @return The taskIdentifier.
       */
      public com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier getTaskIdentifier() {
        if (taskIdentifierBuilder_ == null) {
          return taskIdentifier_ == null ? com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.getDefaultInstance() : taskIdentifier_;
        } else {
          return taskIdentifierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      public Builder setTaskIdentifier(com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier value) {
        if (taskIdentifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taskIdentifier_ = value;
        } else {
          taskIdentifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      public Builder setTaskIdentifier(
          com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.Builder builderForValue) {
        if (taskIdentifierBuilder_ == null) {
          taskIdentifier_ = builderForValue.build();
        } else {
          taskIdentifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      public Builder mergeTaskIdentifier(com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier value) {
        if (taskIdentifierBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            taskIdentifier_ != null &&
            taskIdentifier_ != com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.getDefaultInstance()) {
            getTaskIdentifierBuilder().mergeFrom(value);
          } else {
            taskIdentifier_ = value;
          }
        } else {
          taskIdentifierBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      public Builder clearTaskIdentifier() {
        bitField0_ = (bitField0_ & ~0x00000004);
        taskIdentifier_ = null;
        if (taskIdentifierBuilder_ != null) {
          taskIdentifierBuilder_.dispose();
          taskIdentifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      public com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.Builder getTaskIdentifierBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTaskIdentifierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      public com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifierOrBuilder getTaskIdentifierOrBuilder() {
        if (taskIdentifierBuilder_ != null) {
          return taskIdentifierBuilder_.getMessageOrBuilder();
        } else {
          return taskIdentifier_ == null ?
              com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.getDefaultInstance() : taskIdentifier_;
        }
      }
      /**
       * <pre>
       * The always running task identifier
       * </pre>
       *
       * <code>optional .android_studio.BuildAttribuitionTaskIdentifier task_identifier = 3 [lazy = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier, com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifierOrBuilder> 
          getTaskIdentifierFieldBuilder() {
        if (taskIdentifierBuilder_ == null) {
          taskIdentifierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier, com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttribuitionTaskIdentifierOrBuilder>(
                  getTaskIdentifier(),
                  getParentForChildren(),
                  isClean());
          taskIdentifier_ = null;
        }
        return taskIdentifierBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask)
    }

    // @@protoc_insertion_point(class_scope:android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask)
    private static final com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask();
    }

    public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AlwaysRunTask>
        PARSER = new com.google.protobuf.AbstractParser<AlwaysRunTask>() {
      @java.lang.Override
      public AlwaysRunTask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AlwaysRunTask> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AlwaysRunTask> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int ALWAYS_RUN_TASKS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask> alwaysRunTasks_;
  /**
   * <pre>
   * The always running tasks detected by the analyzer
   * </pre>
   *
   * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask> getAlwaysRunTasksList() {
    return alwaysRunTasks_;
  }
  /**
   * <pre>
   * The always running tasks detected by the analyzer
   * </pre>
   *
   * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder> 
      getAlwaysRunTasksOrBuilderList() {
    return alwaysRunTasks_;
  }
  /**
   * <pre>
   * The always running tasks detected by the analyzer
   * </pre>
   *
   * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
   */
  @java.lang.Override
  public int getAlwaysRunTasksCount() {
    return alwaysRunTasks_.size();
  }
  /**
   * <pre>
   * The always running tasks detected by the analyzer
   * </pre>
   *
   * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask getAlwaysRunTasks(int index) {
    return alwaysRunTasks_.get(index);
  }
  /**
   * <pre>
   * The always running tasks detected by the analyzer
   * </pre>
   *
   * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
   */
  @java.lang.Override
  public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder getAlwaysRunTasksOrBuilder(
      int index) {
    return alwaysRunTasks_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < alwaysRunTasks_.size(); i++) {
      output.writeMessage(1, alwaysRunTasks_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < alwaysRunTasks_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, alwaysRunTasks_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData other = (com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData) obj;

    if (!getAlwaysRunTasksList()
        .equals(other.getAlwaysRunTasksList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAlwaysRunTasksCount() > 0) {
      hash = (37 * hash) + ALWAYS_RUN_TASKS_FIELD_NUMBER;
      hash = (53 * hash) + getAlwaysRunTasksList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Data about tasks that always run
   * </pre>
   *
   * Protobuf type {@code android_studio.AlwaysRunTasksAnalyzerData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.AlwaysRunTasksAnalyzerData)
      com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.class, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (alwaysRunTasksBuilder_ == null) {
        alwaysRunTasks_ = java.util.Collections.emptyList();
      } else {
        alwaysRunTasks_ = null;
        alwaysRunTasksBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_AlwaysRunTasksAnalyzerData_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData build() {
      com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData buildPartial() {
      com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData result = new com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData result) {
      if (alwaysRunTasksBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          alwaysRunTasks_ = java.util.Collections.unmodifiableList(alwaysRunTasks_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.alwaysRunTasks_ = alwaysRunTasks_;
      } else {
        result.alwaysRunTasks_ = alwaysRunTasksBuilder_.build();
      }
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData) {
        return mergeFrom((com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData other) {
      if (other == com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.getDefaultInstance()) return this;
      if (alwaysRunTasksBuilder_ == null) {
        if (!other.alwaysRunTasks_.isEmpty()) {
          if (alwaysRunTasks_.isEmpty()) {
            alwaysRunTasks_ = other.alwaysRunTasks_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAlwaysRunTasksIsMutable();
            alwaysRunTasks_.addAll(other.alwaysRunTasks_);
          }
          onChanged();
        }
      } else {
        if (!other.alwaysRunTasks_.isEmpty()) {
          if (alwaysRunTasksBuilder_.isEmpty()) {
            alwaysRunTasksBuilder_.dispose();
            alwaysRunTasksBuilder_ = null;
            alwaysRunTasks_ = other.alwaysRunTasks_;
            bitField0_ = (bitField0_ & ~0x00000001);
            alwaysRunTasksBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAlwaysRunTasksFieldBuilder() : null;
          } else {
            alwaysRunTasksBuilder_.addAllMessages(other.alwaysRunTasks_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask m =
                  input.readMessage(
                      com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.PARSER,
                      extensionRegistry);
              if (alwaysRunTasksBuilder_ == null) {
                ensureAlwaysRunTasksIsMutable();
                alwaysRunTasks_.add(m);
              } else {
                alwaysRunTasksBuilder_.addMessage(m);
              }
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask> alwaysRunTasks_ =
      java.util.Collections.emptyList();
    private void ensureAlwaysRunTasksIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        alwaysRunTasks_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask>(alwaysRunTasks_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder> alwaysRunTasksBuilder_;

    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask> getAlwaysRunTasksList() {
      if (alwaysRunTasksBuilder_ == null) {
        return java.util.Collections.unmodifiableList(alwaysRunTasks_);
      } else {
        return alwaysRunTasksBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public int getAlwaysRunTasksCount() {
      if (alwaysRunTasksBuilder_ == null) {
        return alwaysRunTasks_.size();
      } else {
        return alwaysRunTasksBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask getAlwaysRunTasks(int index) {
      if (alwaysRunTasksBuilder_ == null) {
        return alwaysRunTasks_.get(index);
      } else {
        return alwaysRunTasksBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder setAlwaysRunTasks(
        int index, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask value) {
      if (alwaysRunTasksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.set(index, value);
        onChanged();
      } else {
        alwaysRunTasksBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder setAlwaysRunTasks(
        int index, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder builderForValue) {
      if (alwaysRunTasksBuilder_ == null) {
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.set(index, builderForValue.build());
        onChanged();
      } else {
        alwaysRunTasksBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder addAlwaysRunTasks(com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask value) {
      if (alwaysRunTasksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.add(value);
        onChanged();
      } else {
        alwaysRunTasksBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder addAlwaysRunTasks(
        int index, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask value) {
      if (alwaysRunTasksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.add(index, value);
        onChanged();
      } else {
        alwaysRunTasksBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder addAlwaysRunTasks(
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder builderForValue) {
      if (alwaysRunTasksBuilder_ == null) {
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.add(builderForValue.build());
        onChanged();
      } else {
        alwaysRunTasksBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder addAlwaysRunTasks(
        int index, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder builderForValue) {
      if (alwaysRunTasksBuilder_ == null) {
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.add(index, builderForValue.build());
        onChanged();
      } else {
        alwaysRunTasksBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder addAllAlwaysRunTasks(
        java.lang.Iterable<? extends com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask> values) {
      if (alwaysRunTasksBuilder_ == null) {
        ensureAlwaysRunTasksIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, alwaysRunTasks_);
        onChanged();
      } else {
        alwaysRunTasksBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder clearAlwaysRunTasks() {
      if (alwaysRunTasksBuilder_ == null) {
        alwaysRunTasks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        alwaysRunTasksBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public Builder removeAlwaysRunTasks(int index) {
      if (alwaysRunTasksBuilder_ == null) {
        ensureAlwaysRunTasksIsMutable();
        alwaysRunTasks_.remove(index);
        onChanged();
      } else {
        alwaysRunTasksBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder getAlwaysRunTasksBuilder(
        int index) {
      return getAlwaysRunTasksFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder getAlwaysRunTasksOrBuilder(
        int index) {
      if (alwaysRunTasksBuilder_ == null) {
        return alwaysRunTasks_.get(index);  } else {
        return alwaysRunTasksBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public java.util.List<? extends com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder> 
         getAlwaysRunTasksOrBuilderList() {
      if (alwaysRunTasksBuilder_ != null) {
        return alwaysRunTasksBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(alwaysRunTasks_);
      }
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder addAlwaysRunTasksBuilder() {
      return getAlwaysRunTasksFieldBuilder().addBuilder(
          com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.getDefaultInstance());
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder addAlwaysRunTasksBuilder(
        int index) {
      return getAlwaysRunTasksFieldBuilder().addBuilder(
          index, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.getDefaultInstance());
    }
    /**
     * <pre>
     * The always running tasks detected by the analyzer
     * </pre>
     *
     * <code>repeated .android_studio.AlwaysRunTasksAnalyzerData.AlwaysRunTask always_run_tasks = 1;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder> 
         getAlwaysRunTasksBuilderList() {
      return getAlwaysRunTasksFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder> 
        getAlwaysRunTasksFieldBuilder() {
      if (alwaysRunTasksBuilder_ == null) {
        alwaysRunTasksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTask.Builder, com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData.AlwaysRunTaskOrBuilder>(
                alwaysRunTasks_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        alwaysRunTasks_ = null;
      }
      return alwaysRunTasksBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.AlwaysRunTasksAnalyzerData)
  }

  // @@protoc_insertion_point(class_scope:android_studio.AlwaysRunTasksAnalyzerData)
  private static final com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData();
  }

  public static com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<AlwaysRunTasksAnalyzerData>
      PARSER = new com.google.protobuf.AbstractParser<AlwaysRunTasksAnalyzerData>() {
    @java.lang.Override
    public AlwaysRunTasksAnalyzerData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AlwaysRunTasksAnalyzerData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AlwaysRunTasksAnalyzerData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.AlwaysRunTasksAnalyzerData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

