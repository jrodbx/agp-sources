// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Tracks user interactions with signing wizard
 * </pre>
 *
 * Protobuf type {@code android_studio.SigningWizardEvent}
 */
public final class SigningWizardEvent extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.SigningWizardEvent)
    SigningWizardEventOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SigningWizardEvent.newBuilder() to construct.
  private SigningWizardEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SigningWizardEvent() {
    failureCause_ = 0;
    targetType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SigningWizardEvent();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_SigningWizardEvent_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_SigningWizardEvent_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.SigningWizardEvent.class, com.google.wireless.android.sdk.stats.SigningWizardEvent.Builder.class);
  }

  /**
   * Protobuf enum {@code android_studio.SigningWizardEvent.SigningWizardFailureCause}
   */
  public enum SigningWizardFailureCause
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FAILURE_CAUSE_UNKNOWN = 0;</code>
     */
    FAILURE_CAUSE_UNKNOWN(0),
    /**
     * <code>FAILURE_CAUSE_NO_MODULE_FACET = 1;</code>
     */
    FAILURE_CAUSE_NO_MODULE_FACET(1),
    /**
     * <code>FAILURE_CAUSE_NO_MODULE_ROOT_PATH = 2;</code>
     */
    FAILURE_CAUSE_NO_MODULE_ROOT_PATH(2),
    /**
     * <code>FAILURE_CAUSE_NO_ANDROID_MODEL = 3;</code>
     */
    FAILURE_CAUSE_NO_ANDROID_MODEL(3),
    /**
     * <code>FAILURE_CAUSE_NO_VARIANTS_SELECTED = 4;</code>
     */
    FAILURE_CAUSE_NO_VARIANTS_SELECTED(4),
    /**
     * <code>FAILURE_CAUSE_ENCRYPTION_ERROR = 5;</code>
     */
    FAILURE_CAUSE_ENCRYPTION_ERROR(5),
    /**
     * <code>FAILURE_CAUSE_COMPILE_ABORTED = 6;</code>
     */
    FAILURE_CAUSE_COMPILE_ABORTED(6),
    /**
     * <code>FAILURE_CAUSE_COMPILE_ERRORS = 7;</code>
     */
    FAILURE_CAUSE_COMPILE_ERRORS(7),
    /**
     * <code>FAILURE_CAUSE_CANNOT_CREATE_APK = 8;</code>
     */
    FAILURE_CAUSE_CANNOT_CREATE_APK(8),
    /**
     * <code>FAILURE_CAUSE_ZIP_ALIGN_ERROR = 9;</code>
     */
    FAILURE_CAUSE_ZIP_ALIGN_ERROR(9),
    ;

    /**
     * <code>FAILURE_CAUSE_UNKNOWN = 0;</code>
     */
    public static final int FAILURE_CAUSE_UNKNOWN_VALUE = 0;
    /**
     * <code>FAILURE_CAUSE_NO_MODULE_FACET = 1;</code>
     */
    public static final int FAILURE_CAUSE_NO_MODULE_FACET_VALUE = 1;
    /**
     * <code>FAILURE_CAUSE_NO_MODULE_ROOT_PATH = 2;</code>
     */
    public static final int FAILURE_CAUSE_NO_MODULE_ROOT_PATH_VALUE = 2;
    /**
     * <code>FAILURE_CAUSE_NO_ANDROID_MODEL = 3;</code>
     */
    public static final int FAILURE_CAUSE_NO_ANDROID_MODEL_VALUE = 3;
    /**
     * <code>FAILURE_CAUSE_NO_VARIANTS_SELECTED = 4;</code>
     */
    public static final int FAILURE_CAUSE_NO_VARIANTS_SELECTED_VALUE = 4;
    /**
     * <code>FAILURE_CAUSE_ENCRYPTION_ERROR = 5;</code>
     */
    public static final int FAILURE_CAUSE_ENCRYPTION_ERROR_VALUE = 5;
    /**
     * <code>FAILURE_CAUSE_COMPILE_ABORTED = 6;</code>
     */
    public static final int FAILURE_CAUSE_COMPILE_ABORTED_VALUE = 6;
    /**
     * <code>FAILURE_CAUSE_COMPILE_ERRORS = 7;</code>
     */
    public static final int FAILURE_CAUSE_COMPILE_ERRORS_VALUE = 7;
    /**
     * <code>FAILURE_CAUSE_CANNOT_CREATE_APK = 8;</code>
     */
    public static final int FAILURE_CAUSE_CANNOT_CREATE_APK_VALUE = 8;
    /**
     * <code>FAILURE_CAUSE_ZIP_ALIGN_ERROR = 9;</code>
     */
    public static final int FAILURE_CAUSE_ZIP_ALIGN_ERROR_VALUE = 9;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SigningWizardFailureCause valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SigningWizardFailureCause forNumber(int value) {
      switch (value) {
        case 0: return FAILURE_CAUSE_UNKNOWN;
        case 1: return FAILURE_CAUSE_NO_MODULE_FACET;
        case 2: return FAILURE_CAUSE_NO_MODULE_ROOT_PATH;
        case 3: return FAILURE_CAUSE_NO_ANDROID_MODEL;
        case 4: return FAILURE_CAUSE_NO_VARIANTS_SELECTED;
        case 5: return FAILURE_CAUSE_ENCRYPTION_ERROR;
        case 6: return FAILURE_CAUSE_COMPILE_ABORTED;
        case 7: return FAILURE_CAUSE_COMPILE_ERRORS;
        case 8: return FAILURE_CAUSE_CANNOT_CREATE_APK;
        case 9: return FAILURE_CAUSE_ZIP_ALIGN_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SigningWizardFailureCause>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SigningWizardFailureCause> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SigningWizardFailureCause>() {
            public SigningWizardFailureCause findValueByNumber(int number) {
              return SigningWizardFailureCause.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.SigningWizardEvent.getDescriptor().getEnumTypes().get(0);
    }

    private static final SigningWizardFailureCause[] VALUES = values();

    public static SigningWizardFailureCause valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SigningWizardFailureCause(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.SigningWizardEvent.SigningWizardFailureCause)
  }

  /**
   * Protobuf enum {@code android_studio.SigningWizardEvent.SigningTargetType}
   */
  public enum SigningTargetType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TARGET_TYPE_UNKNOWN = 0;</code>
     */
    TARGET_TYPE_UNKNOWN(0),
    /**
     * <code>TARGET_TYPE_APK = 1;</code>
     */
    TARGET_TYPE_APK(1),
    /**
     * <code>TARGET_TYPE_BUNDLE = 2;</code>
     */
    TARGET_TYPE_BUNDLE(2),
    ;

    /**
     * <code>TARGET_TYPE_UNKNOWN = 0;</code>
     */
    public static final int TARGET_TYPE_UNKNOWN_VALUE = 0;
    /**
     * <code>TARGET_TYPE_APK = 1;</code>
     */
    public static final int TARGET_TYPE_APK_VALUE = 1;
    /**
     * <code>TARGET_TYPE_BUNDLE = 2;</code>
     */
    public static final int TARGET_TYPE_BUNDLE_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SigningTargetType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SigningTargetType forNumber(int value) {
      switch (value) {
        case 0: return TARGET_TYPE_UNKNOWN;
        case 1: return TARGET_TYPE_APK;
        case 2: return TARGET_TYPE_BUNDLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SigningTargetType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SigningTargetType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SigningTargetType>() {
            public SigningTargetType findValueByNumber(int number) {
              return SigningTargetType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.SigningWizardEvent.getDescriptor().getEnumTypes().get(1);
    }

    private static final SigningTargetType[] VALUES = values();

    public static SigningTargetType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SigningTargetType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.SigningWizardEvent.SigningTargetType)
  }

  private int bitField0_;
  public static final int FAILURE_CAUSE_FIELD_NUMBER = 1;
  private int failureCause_ = 0;
  /**
   * <pre>
   * Specify cause when signing fails
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent.SigningWizardFailureCause failure_cause = 1;</code>
   * @return Whether the failureCause field is set.
   */
  @java.lang.Override public boolean hasFailureCause() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Specify cause when signing fails
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent.SigningWizardFailureCause failure_cause = 1;</code>
   * @return The failureCause.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause getFailureCause() {
    com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause result = com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause.forNumber(failureCause_);
    return result == null ? com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause.FAILURE_CAUSE_UNKNOWN : result;
  }

  public static final int TARGET_TYPE_FIELD_NUMBER = 2;
  private int targetType_ = 0;
  /**
   * <pre>
   * Details when building and signing a Gradle project
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent.SigningTargetType target_type = 2;</code>
   * @return Whether the targetType field is set.
   */
  @java.lang.Override public boolean hasTargetType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Details when building and signing a Gradle project
   * </pre>
   *
   * <code>optional .android_studio.SigningWizardEvent.SigningTargetType target_type = 2;</code>
   * @return The targetType.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType getTargetType() {
    com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType result = com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType.forNumber(targetType_);
    return result == null ? com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType.TARGET_TYPE_UNKNOWN : result;
  }

  public static final int NUMBER_OF_MODULES_FIELD_NUMBER = 3;
  private int numberOfModules_ = 0;
  /**
   * <pre>
   * Number of modules in project
   * </pre>
   *
   * <code>optional uint32 number_of_modules = 3;</code>
   * @return Whether the numberOfModules field is set.
   */
  @java.lang.Override
  public boolean hasNumberOfModules() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Number of modules in project
   * </pre>
   *
   * <code>optional uint32 number_of_modules = 3;</code>
   * @return The numberOfModules.
   */
  @java.lang.Override
  public int getNumberOfModules() {
    return numberOfModules_;
  }

  public static final int NUMBER_OF_VARIANTS_FIELD_NUMBER = 4;
  private int numberOfVariants_ = 0;
  /**
   * <pre>
   * Number of variants selected for signing
   * </pre>
   *
   * <code>optional uint32 number_of_variants = 4;</code>
   * @return Whether the numberOfVariants field is set.
   */
  @java.lang.Override
  public boolean hasNumberOfVariants() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Number of variants selected for signing
   * </pre>
   *
   * <code>optional uint32 number_of_variants = 4;</code>
   * @return The numberOfVariants.
   */
  @java.lang.Override
  public int getNumberOfVariants() {
    return numberOfVariants_;
  }

  public static final int IS_PRIVATE_KEY_EXPORTED_FIELD_NUMBER = 5;
  private boolean isPrivateKeyExported_ = false;
  /**
   * <pre>
   * Private key is stored?
   * </pre>
   *
   * <code>optional bool is_private_key_exported = 5;</code>
   * @return Whether the isPrivateKeyExported field is set.
   */
  @java.lang.Override
  public boolean hasIsPrivateKeyExported() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Private key is stored?
   * </pre>
   *
   * <code>optional bool is_private_key_exported = 5;</code>
   * @return The isPrivateKeyExported.
   */
  @java.lang.Override
  public boolean getIsPrivateKeyExported() {
    return isPrivateKeyExported_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, failureCause_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeEnum(2, targetType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeUInt32(3, numberOfModules_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeUInt32(4, numberOfVariants_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeBool(5, isPrivateKeyExported_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, failureCause_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, targetType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, numberOfModules_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, numberOfVariants_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, isPrivateKeyExported_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.SigningWizardEvent)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.SigningWizardEvent other = (com.google.wireless.android.sdk.stats.SigningWizardEvent) obj;

    if (hasFailureCause() != other.hasFailureCause()) return false;
    if (hasFailureCause()) {
      if (failureCause_ != other.failureCause_) return false;
    }
    if (hasTargetType() != other.hasTargetType()) return false;
    if (hasTargetType()) {
      if (targetType_ != other.targetType_) return false;
    }
    if (hasNumberOfModules() != other.hasNumberOfModules()) return false;
    if (hasNumberOfModules()) {
      if (getNumberOfModules()
          != other.getNumberOfModules()) return false;
    }
    if (hasNumberOfVariants() != other.hasNumberOfVariants()) return false;
    if (hasNumberOfVariants()) {
      if (getNumberOfVariants()
          != other.getNumberOfVariants()) return false;
    }
    if (hasIsPrivateKeyExported() != other.hasIsPrivateKeyExported()) return false;
    if (hasIsPrivateKeyExported()) {
      if (getIsPrivateKeyExported()
          != other.getIsPrivateKeyExported()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasFailureCause()) {
      hash = (37 * hash) + FAILURE_CAUSE_FIELD_NUMBER;
      hash = (53 * hash) + failureCause_;
    }
    if (hasTargetType()) {
      hash = (37 * hash) + TARGET_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + targetType_;
    }
    if (hasNumberOfModules()) {
      hash = (37 * hash) + NUMBER_OF_MODULES_FIELD_NUMBER;
      hash = (53 * hash) + getNumberOfModules();
    }
    if (hasNumberOfVariants()) {
      hash = (37 * hash) + NUMBER_OF_VARIANTS_FIELD_NUMBER;
      hash = (53 * hash) + getNumberOfVariants();
    }
    if (hasIsPrivateKeyExported()) {
      hash = (37 * hash) + IS_PRIVATE_KEY_EXPORTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsPrivateKeyExported());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.SigningWizardEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.SigningWizardEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Tracks user interactions with signing wizard
   * </pre>
   *
   * Protobuf type {@code android_studio.SigningWizardEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.SigningWizardEvent)
      com.google.wireless.android.sdk.stats.SigningWizardEventOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_SigningWizardEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_SigningWizardEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.SigningWizardEvent.class, com.google.wireless.android.sdk.stats.SigningWizardEvent.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.SigningWizardEvent.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      failureCause_ = 0;
      targetType_ = 0;
      numberOfModules_ = 0;
      numberOfVariants_ = 0;
      isPrivateKeyExported_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_SigningWizardEvent_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.SigningWizardEvent getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.SigningWizardEvent.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.SigningWizardEvent build() {
      com.google.wireless.android.sdk.stats.SigningWizardEvent result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.SigningWizardEvent buildPartial() {
      com.google.wireless.android.sdk.stats.SigningWizardEvent result = new com.google.wireless.android.sdk.stats.SigningWizardEvent(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.SigningWizardEvent result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.failureCause_ = failureCause_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.targetType_ = targetType_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.numberOfModules_ = numberOfModules_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.numberOfVariants_ = numberOfVariants_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.isPrivateKeyExported_ = isPrivateKeyExported_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.SigningWizardEvent) {
        return mergeFrom((com.google.wireless.android.sdk.stats.SigningWizardEvent)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.SigningWizardEvent other) {
      if (other == com.google.wireless.android.sdk.stats.SigningWizardEvent.getDefaultInstance()) return this;
      if (other.hasFailureCause()) {
        setFailureCause(other.getFailureCause());
      }
      if (other.hasTargetType()) {
        setTargetType(other.getTargetType());
      }
      if (other.hasNumberOfModules()) {
        setNumberOfModules(other.getNumberOfModules());
      }
      if (other.hasNumberOfVariants()) {
        setNumberOfVariants(other.getNumberOfVariants());
      }
      if (other.hasIsPrivateKeyExported()) {
        setIsPrivateKeyExported(other.getIsPrivateKeyExported());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause tmpValue =
                  com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(1, tmpRaw);
              } else {
                failureCause_ = tmpRaw;
                bitField0_ |= 0x00000001;
              }
              break;
            } // case 8
            case 16: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType tmpValue =
                  com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(2, tmpRaw);
              } else {
                targetType_ = tmpRaw;
                bitField0_ |= 0x00000002;
              }
              break;
            } // case 16
            case 24: {
              numberOfModules_ = input.readUInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              numberOfVariants_ = input.readUInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              isPrivateKeyExported_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int failureCause_ = 0;
    /**
     * <pre>
     * Specify cause when signing fails
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningWizardFailureCause failure_cause = 1;</code>
     * @return Whether the failureCause field is set.
     */
    @java.lang.Override public boolean hasFailureCause() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Specify cause when signing fails
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningWizardFailureCause failure_cause = 1;</code>
     * @return The failureCause.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause getFailureCause() {
      com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause result = com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause.forNumber(failureCause_);
      return result == null ? com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause.FAILURE_CAUSE_UNKNOWN : result;
    }
    /**
     * <pre>
     * Specify cause when signing fails
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningWizardFailureCause failure_cause = 1;</code>
     * @param value The failureCause to set.
     * @return This builder for chaining.
     */
    public Builder setFailureCause(com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningWizardFailureCause value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      failureCause_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify cause when signing fails
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningWizardFailureCause failure_cause = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearFailureCause() {
      bitField0_ = (bitField0_ & ~0x00000001);
      failureCause_ = 0;
      onChanged();
      return this;
    }

    private int targetType_ = 0;
    /**
     * <pre>
     * Details when building and signing a Gradle project
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningTargetType target_type = 2;</code>
     * @return Whether the targetType field is set.
     */
    @java.lang.Override public boolean hasTargetType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Details when building and signing a Gradle project
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningTargetType target_type = 2;</code>
     * @return The targetType.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType getTargetType() {
      com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType result = com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType.forNumber(targetType_);
      return result == null ? com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType.TARGET_TYPE_UNKNOWN : result;
    }
    /**
     * <pre>
     * Details when building and signing a Gradle project
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningTargetType target_type = 2;</code>
     * @param value The targetType to set.
     * @return This builder for chaining.
     */
    public Builder setTargetType(com.google.wireless.android.sdk.stats.SigningWizardEvent.SigningTargetType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      targetType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details when building and signing a Gradle project
     * </pre>
     *
     * <code>optional .android_studio.SigningWizardEvent.SigningTargetType target_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTargetType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      targetType_ = 0;
      onChanged();
      return this;
    }

    private int numberOfModules_ ;
    /**
     * <pre>
     * Number of modules in project
     * </pre>
     *
     * <code>optional uint32 number_of_modules = 3;</code>
     * @return Whether the numberOfModules field is set.
     */
    @java.lang.Override
    public boolean hasNumberOfModules() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Number of modules in project
     * </pre>
     *
     * <code>optional uint32 number_of_modules = 3;</code>
     * @return The numberOfModules.
     */
    @java.lang.Override
    public int getNumberOfModules() {
      return numberOfModules_;
    }
    /**
     * <pre>
     * Number of modules in project
     * </pre>
     *
     * <code>optional uint32 number_of_modules = 3;</code>
     * @param value The numberOfModules to set.
     * @return This builder for chaining.
     */
    public Builder setNumberOfModules(int value) {

      numberOfModules_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of modules in project
     * </pre>
     *
     * <code>optional uint32 number_of_modules = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumberOfModules() {
      bitField0_ = (bitField0_ & ~0x00000004);
      numberOfModules_ = 0;
      onChanged();
      return this;
    }

    private int numberOfVariants_ ;
    /**
     * <pre>
     * Number of variants selected for signing
     * </pre>
     *
     * <code>optional uint32 number_of_variants = 4;</code>
     * @return Whether the numberOfVariants field is set.
     */
    @java.lang.Override
    public boolean hasNumberOfVariants() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Number of variants selected for signing
     * </pre>
     *
     * <code>optional uint32 number_of_variants = 4;</code>
     * @return The numberOfVariants.
     */
    @java.lang.Override
    public int getNumberOfVariants() {
      return numberOfVariants_;
    }
    /**
     * <pre>
     * Number of variants selected for signing
     * </pre>
     *
     * <code>optional uint32 number_of_variants = 4;</code>
     * @param value The numberOfVariants to set.
     * @return This builder for chaining.
     */
    public Builder setNumberOfVariants(int value) {

      numberOfVariants_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of variants selected for signing
     * </pre>
     *
     * <code>optional uint32 number_of_variants = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumberOfVariants() {
      bitField0_ = (bitField0_ & ~0x00000008);
      numberOfVariants_ = 0;
      onChanged();
      return this;
    }

    private boolean isPrivateKeyExported_ ;
    /**
     * <pre>
     * Private key is stored?
     * </pre>
     *
     * <code>optional bool is_private_key_exported = 5;</code>
     * @return Whether the isPrivateKeyExported field is set.
     */
    @java.lang.Override
    public boolean hasIsPrivateKeyExported() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Private key is stored?
     * </pre>
     *
     * <code>optional bool is_private_key_exported = 5;</code>
     * @return The isPrivateKeyExported.
     */
    @java.lang.Override
    public boolean getIsPrivateKeyExported() {
      return isPrivateKeyExported_;
    }
    /**
     * <pre>
     * Private key is stored?
     * </pre>
     *
     * <code>optional bool is_private_key_exported = 5;</code>
     * @param value The isPrivateKeyExported to set.
     * @return This builder for chaining.
     */
    public Builder setIsPrivateKeyExported(boolean value) {

      isPrivateKeyExported_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Private key is stored?
     * </pre>
     *
     * <code>optional bool is_private_key_exported = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsPrivateKeyExported() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isPrivateKeyExported_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.SigningWizardEvent)
  }

  // @@protoc_insertion_point(class_scope:android_studio.SigningWizardEvent)
  private static final com.google.wireless.android.sdk.stats.SigningWizardEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.SigningWizardEvent();
  }

  public static com.google.wireless.android.sdk.stats.SigningWizardEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<SigningWizardEvent>
      PARSER = new com.google.protobuf.AbstractParser<SigningWizardEvent>() {
    @java.lang.Override
    public SigningWizardEvent parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SigningWizardEvent> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SigningWizardEvent> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.SigningWizardEvent getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

