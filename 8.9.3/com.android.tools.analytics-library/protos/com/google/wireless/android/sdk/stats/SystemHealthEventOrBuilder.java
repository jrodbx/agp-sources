// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface SystemHealthEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.SystemHealthEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional .android_studio.SystemHealthEvent.SystemHealthEventType event_type = 1;</code>
   * @return Whether the eventType field is set.
   */
  boolean hasEventType();
  /**
   * <code>optional .android_studio.SystemHealthEvent.SystemHealthEventType event_type = 1;</code>
   * @return The eventType.
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.SystemHealthEventType getEventType();

  /**
   * <pre>
   * Additional information about current UI freeze
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.UIFreeze ui_freeze = 2 [lazy = true];</code>
   * @return Whether the uiFreeze field is set.
   */
  boolean hasUiFreeze();
  /**
   * <pre>
   * Additional information about current UI freeze
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.UIFreeze ui_freeze = 2 [lazy = true];</code>
   * @return The uiFreeze.
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.UIFreeze getUiFreeze();
  /**
   * <pre>
   * Additional information about current UI freeze
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.UIFreeze ui_freeze = 2 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.UIFreezeOrBuilder getUiFreezeOrBuilder();

  /**
   * <pre>
   * Additional information how this/previous session terminated
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Exit exit = 3 [lazy = true];</code>
   * @return Whether the exit field is set.
   */
  boolean hasExit();
  /**
   * <pre>
   * Additional information how this/previous session terminated
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Exit exit = 3 [lazy = true];</code>
   * @return The exit.
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.Exit getExit();
  /**
   * <pre>
   * Additional information how this/previous session terminated
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Exit exit = 3 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.ExitOrBuilder getExitOrBuilder();

  /**
   * <pre>
   * Additional information about memory events
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Memory memory = 4 [lazy = true];</code>
   * @return Whether the memory field is set.
   */
  boolean hasMemory();
  /**
   * <pre>
   * Additional information about memory events
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Memory memory = 4 [lazy = true];</code>
   * @return The memory.
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.Memory getMemory();
  /**
   * <pre>
   * Additional information about memory events
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Memory memory = 4 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.MemoryOrBuilder getMemoryOrBuilder();

  /**
   * <pre>
   * Exception details
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Exception exception = 5 [lazy = true];</code>
   * @return Whether the exception field is set.
   */
  boolean hasException();
  /**
   * <pre>
   * Exception details
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Exception exception = 5 [lazy = true];</code>
   * @return The exception.
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.Exception getException();
  /**
   * <pre>
   * Exception details
   * </pre>
   *
   * <code>optional .android_studio.SystemHealthEvent.Exception exception = 5 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.SystemHealthEvent.ExceptionOrBuilder getExceptionOrBuilder();

  /**
   * <pre>
   * Whether the IDE is in Essentials Mode
   * </pre>
   *
   * <code>optional bool essentials_mode = 6;</code>
   * @return Whether the essentialsMode field is set.
   */
  boolean hasEssentialsMode();
  /**
   * <pre>
   * Whether the IDE is in Essentials Mode
   * </pre>
   *
   * <code>optional bool essentials_mode = 6;</code>
   * @return The essentialsMode.
   */
  boolean getEssentialsMode();
}
