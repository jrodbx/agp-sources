// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface LayoutEditorEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.LayoutEditorEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Type of event
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorEvent.LayoutEditorEventType type = 1;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * Type of event
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorEvent.LayoutEditorEventType type = 1;</code>
   * @return The type.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorEvent.LayoutEditorEventType getType();

  /**
   * <pre>
   * Layout editor current state
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState state = 2 [lazy = true];</code>
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   * <pre>
   * Layout editor current state
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState state = 2 [lazy = true];</code>
   * @return The state.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorState getState();
  /**
   * <pre>
   * Layout editor current state
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState state = 2 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutEditorStateOrBuilder getStateOrBuilder();

  /**
   * <pre>
   * Result of the render when (type = RENDER)
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorRenderResult render_result = 3 [lazy = true];</code>
   * @return Whether the renderResult field is set.
   */
  boolean hasRenderResult();
  /**
   * <pre>
   * Result of the render when (type = RENDER)
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorRenderResult render_result = 3 [lazy = true];</code>
   * @return The renderResult.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorRenderResult getRenderResult();
  /**
   * <pre>
   * Result of the render when (type = RENDER)
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorRenderResult render_result = 3 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutEditorRenderResultOrBuilder getRenderResultOrBuilder();

  /**
   * <pre>
   * Details related to using the palette (type = DROP_VIEW_FROM_PALETTE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutPaletteEvent palette_event = 4 [lazy = true];</code>
   * @return Whether the paletteEvent field is set.
   */
  boolean hasPaletteEvent();
  /**
   * <pre>
   * Details related to using the palette (type = DROP_VIEW_FROM_PALETTE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutPaletteEvent palette_event = 4 [lazy = true];</code>
   * @return The paletteEvent.
   */
  com.google.wireless.android.sdk.stats.LayoutPaletteEvent getPaletteEvent();
  /**
   * <pre>
   * Details related to using the palette (type = DROP_VIEW_FROM_PALETTE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutPaletteEvent palette_event = 4 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutPaletteEventOrBuilder getPaletteEventOrBuilder();

  /**
   * <pre>
   * Details related to changing an attribute (type = ATTRIBUTE_CHANGE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutAttributeChangeEvent attribute_change_event = 5 [lazy = true];</code>
   * @return Whether the attributeChangeEvent field is set.
   */
  boolean hasAttributeChangeEvent();
  /**
   * <pre>
   * Details related to changing an attribute (type = ATTRIBUTE_CHANGE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutAttributeChangeEvent attribute_change_event = 5 [lazy = true];</code>
   * @return The attributeChangeEvent.
   */
  com.google.wireless.android.sdk.stats.LayoutAttributeChangeEvent getAttributeChangeEvent();
  /**
   * <pre>
   * Details related to changing an attribute (type = ATTRIBUTE_CHANGE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutAttributeChangeEvent attribute_change_event = 5 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutAttributeChangeEventOrBuilder getAttributeChangeEventOrBuilder();

  /**
   * <pre>
   * Details related to favorite attribute changes (type = FAVORITE_CHANGE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutFavoriteAttributeChangeEvent favorite_change_event = 6 [lazy = true];</code>
   * @return Whether the favoriteChangeEvent field is set.
   */
  boolean hasFavoriteChangeEvent();
  /**
   * <pre>
   * Details related to favorite attribute changes (type = FAVORITE_CHANGE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutFavoriteAttributeChangeEvent favorite_change_event = 6 [lazy = true];</code>
   * @return The favoriteChangeEvent.
   */
  com.google.wireless.android.sdk.stats.LayoutFavoriteAttributeChangeEvent getFavoriteChangeEvent();
  /**
   * <pre>
   * Details related to favorite attribute changes (type = FAVORITE_CHANGE)
   * </pre>
   *
   * <code>optional .android_studio.LayoutFavoriteAttributeChangeEvent favorite_change_event = 6 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.LayoutFavoriteAttributeChangeEventOrBuilder getFavoriteChangeEventOrBuilder();

  /**
   * <pre>
   * Result of the atf audit (type = ATF_AUDIT_RESULT)
   * </pre>
   *
   * <code>optional .android_studio.AtfAuditResult atf_audit_result = 7 [lazy = true];</code>
   * @return Whether the atfAuditResult field is set.
   */
  boolean hasAtfAuditResult();
  /**
   * <pre>
   * Result of the atf audit (type = ATF_AUDIT_RESULT)
   * </pre>
   *
   * <code>optional .android_studio.AtfAuditResult atf_audit_result = 7 [lazy = true];</code>
   * @return The atfAuditResult.
   */
  com.google.wireless.android.sdk.stats.AtfAuditResult getAtfAuditResult();
  /**
   * <pre>
   * Result of the atf audit (type = ATF_AUDIT_RESULT)
   * </pre>
   *
   * <code>optional .android_studio.AtfAuditResult atf_audit_result = 7 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AtfAuditResultOrBuilder getAtfAuditResultOrBuilder();

  /**
   * <pre>
   * Details related to applying an atf fix (type = APPLY_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.ApplyAtfFixEvent apply_atf_fix_event = 8 [lazy = true];</code>
   * @return Whether the applyAtfFixEvent field is set.
   */
  boolean hasApplyAtfFixEvent();
  /**
   * <pre>
   * Details related to applying an atf fix (type = APPLY_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.ApplyAtfFixEvent apply_atf_fix_event = 8 [lazy = true];</code>
   * @return The applyAtfFixEvent.
   */
  com.google.wireless.android.sdk.stats.ApplyAtfFixEvent getApplyAtfFixEvent();
  /**
   * <pre>
   * Details related to applying an atf fix (type = APPLY_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.ApplyAtfFixEvent apply_atf_fix_event = 8 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.ApplyAtfFixEventOrBuilder getApplyAtfFixEventOrBuilder();

  /**
   * <pre>
   * Details related to ignoring an atf result (type = IGNORE_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.IgnoreAtfResultEvent ignore_atf_result_event = 9 [lazy = true];</code>
   * @return Whether the ignoreAtfResultEvent field is set.
   */
  boolean hasIgnoreAtfResultEvent();
  /**
   * <pre>
   * Details related to ignoring an atf result (type = IGNORE_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.IgnoreAtfResultEvent ignore_atf_result_event = 9 [lazy = true];</code>
   * @return The ignoreAtfResultEvent.
   */
  com.google.wireless.android.sdk.stats.IgnoreAtfResultEvent getIgnoreAtfResultEvent();
  /**
   * <pre>
   * Details related to ignoring an atf result (type = IGNORE_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.IgnoreAtfResultEvent ignore_atf_result_event = 9 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.IgnoreAtfResultEventOrBuilder getIgnoreAtfResultEventOrBuilder();

  /**
   * <pre>
   * Details related to undoing an applied atf fix (type = UNDO_APPLIED_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.UndoAppliedAtfFixEvent undo_applied_atf_fix_event = 10 [lazy = true];</code>
   * @return Whether the undoAppliedAtfFixEvent field is set.
   */
  boolean hasUndoAppliedAtfFixEvent();
  /**
   * <pre>
   * Details related to undoing an applied atf fix (type = UNDO_APPLIED_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.UndoAppliedAtfFixEvent undo_applied_atf_fix_event = 10 [lazy = true];</code>
   * @return The undoAppliedAtfFixEvent.
   */
  com.google.wireless.android.sdk.stats.UndoAppliedAtfFixEvent getUndoAppliedAtfFixEvent();
  /**
   * <pre>
   * Details related to undoing an applied atf fix (type = UNDO_APPLIED_ATF_FIX)
   * </pre>
   *
   * <code>optional .android_studio.UndoAppliedAtfFixEvent undo_applied_atf_fix_event = 10 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UndoAppliedAtfFixEventOrBuilder getUndoAppliedAtfFixEventOrBuilder();

  /**
   * <pre>
   * Details related to interacting animation preview (type = ANIMATION_PREVIEW)
   * </pre>
   *
   * <code>optional .android_studio.AnimationPreviewEvent animation_preview_event = 11 [lazy = true];</code>
   * @return Whether the animationPreviewEvent field is set.
   */
  boolean hasAnimationPreviewEvent();
  /**
   * <pre>
   * Details related to interacting animation preview (type = ANIMATION_PREVIEW)
   * </pre>
   *
   * <code>optional .android_studio.AnimationPreviewEvent animation_preview_event = 11 [lazy = true];</code>
   * @return The animationPreviewEvent.
   */
  com.google.wireless.android.sdk.stats.AnimationPreviewEvent getAnimationPreviewEvent();
  /**
   * <pre>
   * Details related to interacting animation preview (type = ANIMATION_PREVIEW)
   * </pre>
   *
   * <code>optional .android_studio.AnimationPreviewEvent animation_preview_event = 11 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.AnimationPreviewEventOrBuilder getAnimationPreviewEventOrBuilder();

  /**
   * <pre>
   * Details related to visual linting (type = VISUAL_LINT)
   * </pre>
   *
   * <code>optional .android_studio.VisualLintEvent visual_lint_event = 12 [lazy = true];</code>
   * @return Whether the visualLintEvent field is set.
   */
  boolean hasVisualLintEvent();
  /**
   * <pre>
   * Details related to visual linting (type = VISUAL_LINT)
   * </pre>
   *
   * <code>optional .android_studio.VisualLintEvent visual_lint_event = 12 [lazy = true];</code>
   * @return The visualLintEvent.
   */
  com.google.wireless.android.sdk.stats.VisualLintEvent getVisualLintEvent();
  /**
   * <pre>
   * Details related to visual linting (type = VISUAL_LINT)
   * </pre>
   *
   * <code>optional .android_studio.VisualLintEvent visual_lint_event = 12 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.VisualLintEventOrBuilder getVisualLintEventOrBuilder();

  /**
   * <pre>
   * Details related to universal problems panel (type =
   * UNIVERSAL_PROBLEMS_PANEL)
   * </pre>
   *
   * <code>optional .android_studio.UniversalProblemsPanelEvent universal_problems_panel_event = 13 [lazy = true];</code>
   * @return Whether the universalProblemsPanelEvent field is set.
   */
  boolean hasUniversalProblemsPanelEvent();
  /**
   * <pre>
   * Details related to universal problems panel (type =
   * UNIVERSAL_PROBLEMS_PANEL)
   * </pre>
   *
   * <code>optional .android_studio.UniversalProblemsPanelEvent universal_problems_panel_event = 13 [lazy = true];</code>
   * @return The universalProblemsPanelEvent.
   */
  com.google.wireless.android.sdk.stats.UniversalProblemsPanelEvent getUniversalProblemsPanelEvent();
  /**
   * <pre>
   * Details related to universal problems panel (type =
   * UNIVERSAL_PROBLEMS_PANEL)
   * </pre>
   *
   * <code>optional .android_studio.UniversalProblemsPanelEvent universal_problems_panel_event = 13 [lazy = true];</code>
   */
  com.google.wireless.android.sdk.stats.UniversalProblemsPanelEventOrBuilder getUniversalProblemsPanelEventOrBuilder();

  /**
   * <pre>
   * Type of the file, i.e. which language the file in the editor is in
   * </pre>
   *
   * <code>optional .android_studio.EditorFileType editor_file_type = 14;</code>
   * @return Whether the editorFileType field is set.
   */
  boolean hasEditorFileType();
  /**
   * <pre>
   * Type of the file, i.e. which language the file in the editor is in
   * </pre>
   *
   * <code>optional .android_studio.EditorFileType editor_file_type = 14;</code>
   * @return The editorFileType.
   */
  com.google.wireless.android.sdk.stats.EditorFileType getEditorFileType();
}
