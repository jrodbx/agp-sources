// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

@java.lang.Deprecated public interface StudioRunEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.StudioRunEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The run id is a UUID within a single run of Android Studio
   * for tracking a single run through various events
   * </pre>
   *
   * <code>optional string run_id = 1;</code>
   * @return Whether the runId field is set.
   */
  boolean hasRunId();
  /**
   * <pre>
   * The run id is a UUID within a single run of Android Studio
   * for tracking a single run through various events
   * </pre>
   *
   * <code>optional string run_id = 1;</code>
   * @return The runId.
   */
  java.lang.String getRunId();
  /**
   * <pre>
   * The run id is a UUID within a single run of Android Studio
   * for tracking a single run through various events
   * </pre>
   *
   * <code>optional string run_id = 1;</code>
   * @return The bytes for runId.
   */
  com.google.protobuf.ByteString
      getRunIdBytes();

  /**
   * <pre>
   * The type of "Run" Studio is performing
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
   * @return Whether the runType field is set.
   */
  boolean hasRunType();
  /**
   * <pre>
   * The type of "Run" Studio is performing
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
   * @return The runType.
   */
  com.google.wireless.android.sdk.stats.StudioRunEvent.RunType getRunType();

  /**
   * <pre>
   * The section of the run this event is tracking
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
   * @return Whether the sectionType field is set.
   */
  boolean hasSectionType();
  /**
   * <pre>
   * The section of the run this event is tracking
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
   * @return The sectionType.
   */
  com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType getSectionType();

  /**
   * <pre>
   * The type of event: start or end or error
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
   * @return Whether the eventType field is set.
   */
  boolean hasEventType();
  /**
   * <pre>
   * The type of event: start or end or error
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
   * @return The eventType.
   */
  com.google.wireless.android.sdk.stats.StudioRunEvent.EventType getEventType();

  /**
   * <pre>
   * How long this section took, set when EventType is Finish or Failed
   * </pre>
   *
   * <code>optional uint32 duration_ms = 5;</code>
   * @return Whether the durationMs field is set.
   */
  boolean hasDurationMs();
  /**
   * <pre>
   * How long this section took, set when EventType is Finish or Failed
   * </pre>
   *
   * <code>optional uint32 duration_ms = 5;</code>
   * @return The durationMs.
   */
  int getDurationMs();

  /**
   * <pre>
   * Set if SectionType = Gradle AND EventType = Start
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
   * @return Whether the buildMode field is set.
   */
  boolean hasBuildMode();
  /**
   * <pre>
   * Set if SectionType = Gradle AND EventType = Start
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
   * @return The buildMode.
   */
  com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode getBuildMode();

  /**
   * <pre>
   * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
   * </pre>
   *
   * <code>optional bool is_successful = 7;</code>
   * @return Whether the isSuccessful field is set.
   */
  boolean hasIsSuccessful();
  /**
   * <pre>
   * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
   * </pre>
   *
   * <code>optional bool is_successful = 7;</code>
   * @return The isSuccessful.
   */
  boolean getIsSuccessful();

  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional uint32 artifact_count = 8;</code>
   * @return Whether the artifactCount field is set.
   */
  boolean hasArtifactCount();
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional uint32 artifact_count = 8;</code>
   * @return The artifactCount.
   */
  int getArtifactCount();

  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
   * @return Whether the deployTask field is set.
   */
  boolean hasDeployTask();
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
   * @return The deployTask.
   */
  com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask getDeployTask();

  /**
   * <pre>
   * The number of features disabled by the user
   * Set if SectionType = DEPLOY and EventType = START and
   * BuildMode = BUNDLE/APK_FROM_BUNDLE
   * </pre>
   *
   * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
   * @return Whether the disabledDynamicFeaturesCount field is set.
   */
  boolean hasDisabledDynamicFeaturesCount();
  /**
   * <pre>
   * The number of features disabled by the user
   * Set if SectionType = DEPLOY and EventType = START and
   * BuildMode = BUNDLE/APK_FROM_BUNDLE
   * </pre>
   *
   * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
   * @return The disabledDynamicFeaturesCount.
   */
  int getDisabledDynamicFeaturesCount();

  /**
   * <pre>
   * If this Run is using Instant Run, which may use HOTSWAP deploy task
   * but could also use other deploy tasks.
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool instant_run = 12;</code>
   * @return Whether the instantRun field is set.
   */
  boolean hasInstantRun();
  /**
   * <pre>
   * If this Run is using Instant Run, which may use HOTSWAP deploy task
   * but could also use other deploy tasks.
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool instant_run = 12;</code>
   * @return The instantRun.
   */
  boolean getInstantRun();

  /**
   * <pre>
   * If using SplitApkDeployTask and doing a partial install
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool patch_build = 13;</code>
   * @return Whether the patchBuild field is set.
   */
  boolean hasPatchBuild();
  /**
   * <pre>
   * If using SplitApkDeployTask and doing a partial install
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool patch_build = 13;</code>
   * @return The patchBuild.
   */
  boolean getPatchBuild();

  /**
   * <pre>
   * If using SplitApkDeployTask and doing a resource only swap that
   * does not restart the app
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool do_not_restart = 14;</code>
   * @return Whether the doNotRestart field is set.
   */
  boolean hasDoNotRestart();
  /**
   * <pre>
   * If using SplitApkDeployTask and doing a resource only swap that
   * does not restart the app
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool do_not_restart = 14;</code>
   * @return The doNotRestart.
   */
  boolean getDoNotRestart();

  /**
   * <pre>
   * If the app's debuggable flag is set to true
   * Set if SectionType = TOTAL and EventType = START
   * </pre>
   *
   * <code>optional bool debuggable = 15;</code>
   * @return Whether the debuggable field is set.
   */
  boolean hasDebuggable();
  /**
   * <pre>
   * If the app's debuggable flag is set to true
   * Set if SectionType = TOTAL and EventType = START
   * </pre>
   *
   * <code>optional bool debuggable = 15;</code>
   * @return The debuggable.
   */
  boolean getDebuggable();

  /**
   * <pre>
   * If the deploy target was picked by the user or auto selected by dialog
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool user_selected_target = 16;</code>
   * @return Whether the userSelectedTarget field is set.
   */
  boolean hasUserSelectedTarget();
  /**
   * <pre>
   * If the deploy target was picked by the user or auto selected by dialog
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool user_selected_target = 16;</code>
   * @return The userSelectedTarget.
   */
  boolean getUserSelectedTarget();

  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.ArtifactDetail> 
      getArtifactDetailsList();
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  com.google.wireless.android.sdk.stats.ArtifactDetail getArtifactDetails(int index);
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  int getArtifactDetailsCount();
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder> 
      getArtifactDetailsOrBuilderList();
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder getArtifactDetailsOrBuilder(
      int index);

  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If user clicked the Run button instead of Apply Changes
   * </pre>
   *
   * <code>optional bool force_coldswap = 18;</code>
   * @return Whether the forceColdswap field is set.
   */
  boolean hasForceColdswap();
  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If user clicked the Run button instead of Apply Changes
   * </pre>
   *
   * <code>optional bool force_coldswap = 18;</code>
   * @return The forceColdswap.
   */
  boolean getForceColdswap();

  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If Instant Run setting is enabled
   * </pre>
   *
   * <code>optional bool instant_run_enabled = 19;</code>
   * @return Whether the instantRunEnabled field is set.
   */
  boolean hasInstantRunEnabled();
  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If Instant Run setting is enabled
   * </pre>
   *
   * <code>optional bool instant_run_enabled = 19;</code>
   * @return The instantRunEnabled.
   */
  boolean getInstantRunEnabled();
}
