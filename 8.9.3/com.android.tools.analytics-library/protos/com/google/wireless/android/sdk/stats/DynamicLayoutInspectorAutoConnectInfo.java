// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * Protobuf type {@code android_studio.DynamicLayoutInspectorAutoConnectInfo}
 */
public final class DynamicLayoutInspectorAutoConnectInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.DynamicLayoutInspectorAutoConnectInfo)
    DynamicLayoutInspectorAutoConnectInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DynamicLayoutInspectorAutoConnectInfo.newBuilder() to construct.
  private DynamicLayoutInspectorAutoConnectInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DynamicLayoutInspectorAutoConnectInfo() {
    handshakeResult_ = 0;
    handshakeConversion_ = 0;
    reasonNotSupported_ = 0;
    handshakeConversionInfo_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DynamicLayoutInspectorAutoConnectInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorAutoConnectInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorAutoConnectInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.class, com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.Builder.class);
  }

  /**
   * <pre>
   * The result of the handshake
   * </pre>
   *
   * Protobuf enum {@code android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult}
   */
  public enum HandshakeResult
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNSPECIFIED_RESULT = 0;</code>
     */
    UNSPECIFIED_RESULT(0),
    /**
     * <pre>
     * It's not known if auto-connection is supported
     * </pre>
     *
     * <code>SUPPORT_UNKNOWN = 1;</code>
     */
    SUPPORT_UNKNOWN(1),
    /**
     * <pre>
     * Auto-connection is supported
     * </pre>
     *
     * <code>SUPPORTED = 2;</code>
     */
    SUPPORTED(2),
    /**
     * <pre>
     * Auto-connection is not supported
     * </pre>
     *
     * <code>NOT_SUPPORTED = 3;</code>
     */
    NOT_SUPPORTED(3),
    ;

    /**
     * <code>UNSPECIFIED_RESULT = 0;</code>
     */
    public static final int UNSPECIFIED_RESULT_VALUE = 0;
    /**
     * <pre>
     * It's not known if auto-connection is supported
     * </pre>
     *
     * <code>SUPPORT_UNKNOWN = 1;</code>
     */
    public static final int SUPPORT_UNKNOWN_VALUE = 1;
    /**
     * <pre>
     * Auto-connection is supported
     * </pre>
     *
     * <code>SUPPORTED = 2;</code>
     */
    public static final int SUPPORTED_VALUE = 2;
    /**
     * <pre>
     * Auto-connection is not supported
     * </pre>
     *
     * <code>NOT_SUPPORTED = 3;</code>
     */
    public static final int NOT_SUPPORTED_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HandshakeResult valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HandshakeResult forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_RESULT;
        case 1: return SUPPORT_UNKNOWN;
        case 2: return SUPPORTED;
        case 3: return NOT_SUPPORTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HandshakeResult>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HandshakeResult> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HandshakeResult>() {
            public HandshakeResult findValueByNumber(int number) {
              return HandshakeResult.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.getDescriptor().getEnumTypes().get(0);
    }

    private static final HandshakeResult[] VALUES = values();

    public static HandshakeResult valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HandshakeResult(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult)
  }

  /**
   * <pre>
   * Deprecated, use HandshakeConversion instead
   * </pre>
   *
   * Protobuf enum {@code android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion}
   */
  public enum HandshakeUnknownConversion
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * A device with UNKNOWN support state converted to SUPPORTED
     * </pre>
     *
     * <code>UNKNOWN_TO_SUPPORTED = 0;</code>
     */
    UNKNOWN_TO_SUPPORTED(0),
    /**
     * <pre>
     * A device with UNKNOWN support state converted to NOT_SUPPORTED
     * </pre>
     *
     * <code>UNKNOWN_TO_NOT_SUPPORTED = 1;</code>
     */
    UNKNOWN_TO_NOT_SUPPORTED(1),
    /**
     * <pre>
     * A device with UNKNOWN support state was unplugged before converting
     * </pre>
     *
     * <code>UNKNOWN_NOT_RESOLVED = 2;</code>
     */
    UNKNOWN_NOT_RESOLVED(2),
    ;

    /**
     * <pre>
     * A device with UNKNOWN support state converted to SUPPORTED
     * </pre>
     *
     * <code>UNKNOWN_TO_SUPPORTED = 0;</code>
     */
    public static final int UNKNOWN_TO_SUPPORTED_VALUE = 0;
    /**
     * <pre>
     * A device with UNKNOWN support state converted to NOT_SUPPORTED
     * </pre>
     *
     * <code>UNKNOWN_TO_NOT_SUPPORTED = 1;</code>
     */
    public static final int UNKNOWN_TO_NOT_SUPPORTED_VALUE = 1;
    /**
     * <pre>
     * A device with UNKNOWN support state was unplugged before converting
     * </pre>
     *
     * <code>UNKNOWN_NOT_RESOLVED = 2;</code>
     */
    public static final int UNKNOWN_NOT_RESOLVED_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HandshakeUnknownConversion valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HandshakeUnknownConversion forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_TO_SUPPORTED;
        case 1: return UNKNOWN_TO_NOT_SUPPORTED;
        case 2: return UNKNOWN_NOT_RESOLVED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HandshakeUnknownConversion>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HandshakeUnknownConversion> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HandshakeUnknownConversion>() {
            public HandshakeUnknownConversion findValueByNumber(int number) {
              return HandshakeUnknownConversion.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.getDescriptor().getEnumTypes().get(1);
    }

    private static final HandshakeUnknownConversion[] VALUES = values();

    public static HandshakeUnknownConversion valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HandshakeUnknownConversion(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion)
  }

  /**
   * <pre>
   * Indicates when a handshake state converts to another
   * </pre>
   *
   * Protobuf enum {@code android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion}
   */
  public enum HandshakeConversion
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNSPECIFIED_CONVERSION = 0;</code>
     */
    UNSPECIFIED_CONVERSION(0),
    /**
     * <pre>
     * A device with SUPPORT_UNKNOWN state converted to SUPPORTED
     * </pre>
     *
     * <code>FROM_UNKNOWN_TO_SUPPORTED = 1;</code>
     */
    FROM_UNKNOWN_TO_SUPPORTED(1),
    /**
     * <pre>
     * A device with SUPPORT_UNKNOWN state converted to NOT_SUPPORTED
     * </pre>
     *
     * <code>FROM_UNKNOWN_TO_NOT_SUPPORTED = 2;</code>
     */
    FROM_UNKNOWN_TO_NOT_SUPPORTED(2),
    /**
     * <pre>
     * A device with SUPPORT_UNKNOWN state was unplugged before converting
     * </pre>
     *
     * <code>FROM_UNKNOWN_TO_DISCONNECTED = 3;</code>
     */
    FROM_UNKNOWN_TO_DISCONNECTED(3),
    /**
     * <pre>
     * A device with NOT_SUPPORTED state converted to SUPPORTED (false negative)
     * </pre>
     *
     * <code>FROM_NOT_SUPPORTED_TO_SUPPORTED = 4;</code>
     */
    FROM_NOT_SUPPORTED_TO_SUPPORTED(4),
    ;

    /**
     * <code>UNSPECIFIED_CONVERSION = 0;</code>
     */
    public static final int UNSPECIFIED_CONVERSION_VALUE = 0;
    /**
     * <pre>
     * A device with SUPPORT_UNKNOWN state converted to SUPPORTED
     * </pre>
     *
     * <code>FROM_UNKNOWN_TO_SUPPORTED = 1;</code>
     */
    public static final int FROM_UNKNOWN_TO_SUPPORTED_VALUE = 1;
    /**
     * <pre>
     * A device with SUPPORT_UNKNOWN state converted to NOT_SUPPORTED
     * </pre>
     *
     * <code>FROM_UNKNOWN_TO_NOT_SUPPORTED = 2;</code>
     */
    public static final int FROM_UNKNOWN_TO_NOT_SUPPORTED_VALUE = 2;
    /**
     * <pre>
     * A device with SUPPORT_UNKNOWN state was unplugged before converting
     * </pre>
     *
     * <code>FROM_UNKNOWN_TO_DISCONNECTED = 3;</code>
     */
    public static final int FROM_UNKNOWN_TO_DISCONNECTED_VALUE = 3;
    /**
     * <pre>
     * A device with NOT_SUPPORTED state converted to SUPPORTED (false negative)
     * </pre>
     *
     * <code>FROM_NOT_SUPPORTED_TO_SUPPORTED = 4;</code>
     */
    public static final int FROM_NOT_SUPPORTED_TO_SUPPORTED_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HandshakeConversion valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HandshakeConversion forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_CONVERSION;
        case 1: return FROM_UNKNOWN_TO_SUPPORTED;
        case 2: return FROM_UNKNOWN_TO_NOT_SUPPORTED;
        case 3: return FROM_UNKNOWN_TO_DISCONNECTED;
        case 4: return FROM_NOT_SUPPORTED_TO_SUPPORTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HandshakeConversion>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HandshakeConversion> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HandshakeConversion>() {
            public HandshakeConversion findValueByNumber(int number) {
              return HandshakeConversion.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.getDescriptor().getEnumTypes().get(2);
    }

    private static final HandshakeConversion[] VALUES = values();

    public static HandshakeConversion valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HandshakeConversion(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion)
  }

  /**
   * <pre>
   * Reason why the HandshakeResult is NOT_SUPPORTED
   * </pre>
   *
   * Protobuf enum {@code android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported}
   */
  public enum AutoConnectReasonNotSupported
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNSPECIFIED_REASON = 0;</code>
     */
    UNSPECIFIED_REASON(0),
    /**
     * <pre>
     * Dumpsys was not found
     * </pre>
     *
     * <code>DUMPSYS_NOT_FOUND = 1;</code>
     */
    DUMPSYS_NOT_FOUND(1),
    /**
     * <pre>
     * Grep was not found
     * </pre>
     *
     * <code>GREP_NOT_FOUND = 2;</code>
     */
    GREP_NOT_FOUND(2),
    /**
     * <pre>
     * Dumpsys found no top activity and no sleeping activities
     * </pre>
     *
     * <code>DUMPSYS_NO_TOP_ACTIVITY_NO_SLEEPING_ACTIVITIES = 3;</code>
     */
    DUMPSYS_NO_TOP_ACTIVITY_NO_SLEEPING_ACTIVITIES(3),
    /**
     * <pre>
     * Dumpsys found no top activity but found awake activities
     * </pre>
     *
     * <code>DUMPSYS_NO_TOP_ACTIVITY_BUT_HAS_AWAKE_ACTIVITIES = 4;</code>
     */
    DUMPSYS_NO_TOP_ACTIVITY_BUT_HAS_AWAKE_ACTIVITIES(4),
    ;

    /**
     * <code>UNSPECIFIED_REASON = 0;</code>
     */
    public static final int UNSPECIFIED_REASON_VALUE = 0;
    /**
     * <pre>
     * Dumpsys was not found
     * </pre>
     *
     * <code>DUMPSYS_NOT_FOUND = 1;</code>
     */
    public static final int DUMPSYS_NOT_FOUND_VALUE = 1;
    /**
     * <pre>
     * Grep was not found
     * </pre>
     *
     * <code>GREP_NOT_FOUND = 2;</code>
     */
    public static final int GREP_NOT_FOUND_VALUE = 2;
    /**
     * <pre>
     * Dumpsys found no top activity and no sleeping activities
     * </pre>
     *
     * <code>DUMPSYS_NO_TOP_ACTIVITY_NO_SLEEPING_ACTIVITIES = 3;</code>
     */
    public static final int DUMPSYS_NO_TOP_ACTIVITY_NO_SLEEPING_ACTIVITIES_VALUE = 3;
    /**
     * <pre>
     * Dumpsys found no top activity but found awake activities
     * </pre>
     *
     * <code>DUMPSYS_NO_TOP_ACTIVITY_BUT_HAS_AWAKE_ACTIVITIES = 4;</code>
     */
    public static final int DUMPSYS_NO_TOP_ACTIVITY_BUT_HAS_AWAKE_ACTIVITIES_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AutoConnectReasonNotSupported valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AutoConnectReasonNotSupported forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_REASON;
        case 1: return DUMPSYS_NOT_FOUND;
        case 2: return GREP_NOT_FOUND;
        case 3: return DUMPSYS_NO_TOP_ACTIVITY_NO_SLEEPING_ACTIVITIES;
        case 4: return DUMPSYS_NO_TOP_ACTIVITY_BUT_HAS_AWAKE_ACTIVITIES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AutoConnectReasonNotSupported>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AutoConnectReasonNotSupported> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AutoConnectReasonNotSupported>() {
            public AutoConnectReasonNotSupported findValueByNumber(int number) {
              return AutoConnectReasonNotSupported.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.getDescriptor().getEnumTypes().get(3);
    }

    private static final AutoConnectReasonNotSupported[] VALUES = values();

    public static AutoConnectReasonNotSupported valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AutoConnectReasonNotSupported(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported)
  }

  private int bitField0_;
  public static final int HANDSHAKE_RESULT_FIELD_NUMBER = 1;
  private int handshakeResult_ = 0;
  /**
   * <pre>
   * The result of the handshake. Does the device support auto connect?
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult handshake_result = 1;</code>
   * @return Whether the handshakeResult field is set.
   */
  @java.lang.Override public boolean hasHandshakeResult() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The result of the handshake. Does the device support auto connect?
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult handshake_result = 1;</code>
   * @return The handshakeResult.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult getHandshakeResult() {
    com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult.forNumber(handshakeResult_);
    return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult.UNSPECIFIED_RESULT : result;
  }

  public static final int HANDSHAKE_CONVERSION_FIELD_NUMBER = 2;
  private int handshakeConversion_ = 0;
  /**
   * <pre>
   * Deprecated, use handshake_conversion_info instead
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion handshake_conversion = 2 [deprecated = true];</code>
   * @deprecated android_studio.DynamicLayoutInspectorAutoConnectInfo.handshake_conversion is deprecated.
   *     See studio_stats.proto;l=9083
   * @return Whether the handshakeConversion field is set.
   */
  @java.lang.Override @java.lang.Deprecated public boolean hasHandshakeConversion() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Deprecated, use handshake_conversion_info instead
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion handshake_conversion = 2 [deprecated = true];</code>
   * @deprecated android_studio.DynamicLayoutInspectorAutoConnectInfo.handshake_conversion is deprecated.
   *     See studio_stats.proto;l=9083
   * @return The handshakeConversion.
   */
  @java.lang.Override @java.lang.Deprecated public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion getHandshakeConversion() {
    com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion.forNumber(handshakeConversion_);
    return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion.UNKNOWN_TO_SUPPORTED : result;
  }

  public static final int REASON_NOT_SUPPORTED_FIELD_NUMBER = 3;
  private int reasonNotSupported_ = 0;
  /**
   * <pre>
   * Additional info about why the handshake_result is NOT_SUPPORTED
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported reason_not_supported = 3;</code>
   * @return Whether the reasonNotSupported field is set.
   */
  @java.lang.Override public boolean hasReasonNotSupported() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Additional info about why the handshake_result is NOT_SUPPORTED
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported reason_not_supported = 3;</code>
   * @return The reasonNotSupported.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported getReasonNotSupported() {
    com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported.forNumber(reasonNotSupported_);
    return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported.UNSPECIFIED_REASON : result;
  }

  public static final int HANDSHAKE_CONVERSION_INFO_FIELD_NUMBER = 4;
  private int handshakeConversionInfo_ = 0;
  /**
   * <pre>
   * Indicates when a handshake state converts to another
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion handshake_conversion_info = 4;</code>
   * @return Whether the handshakeConversionInfo field is set.
   */
  @java.lang.Override public boolean hasHandshakeConversionInfo() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Indicates when a handshake state converts to another
   * </pre>
   *
   * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion handshake_conversion_info = 4;</code>
   * @return The handshakeConversionInfo.
   */
  @java.lang.Override public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion getHandshakeConversionInfo() {
    com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion.forNumber(handshakeConversionInfo_);
    return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion.UNSPECIFIED_CONVERSION : result;
  }

  public static final int IS_RECOVERY_HANDSHAKE_FIELD_NUMBER = 5;
  private boolean isRecoveryHandshake_ = false;
  /**
   * <pre>
   * Indicates whether this auto-connect info is about a recovery handshake
   * </pre>
   *
   * <code>optional bool is_recovery_handshake = 5;</code>
   * @return Whether the isRecoveryHandshake field is set.
   */
  @java.lang.Override
  public boolean hasIsRecoveryHandshake() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Indicates whether this auto-connect info is about a recovery handshake
   * </pre>
   *
   * <code>optional bool is_recovery_handshake = 5;</code>
   * @return The isRecoveryHandshake.
   */
  @java.lang.Override
  public boolean getIsRecoveryHandshake() {
    return isRecoveryHandshake_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, handshakeResult_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeEnum(2, handshakeConversion_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeEnum(3, reasonNotSupported_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeEnum(4, handshakeConversionInfo_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeBool(5, isRecoveryHandshake_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, handshakeResult_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, handshakeConversion_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, reasonNotSupported_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, handshakeConversionInfo_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, isRecoveryHandshake_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo other = (com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo) obj;

    if (hasHandshakeResult() != other.hasHandshakeResult()) return false;
    if (hasHandshakeResult()) {
      if (handshakeResult_ != other.handshakeResult_) return false;
    }
    if (hasHandshakeConversion() != other.hasHandshakeConversion()) return false;
    if (hasHandshakeConversion()) {
      if (handshakeConversion_ != other.handshakeConversion_) return false;
    }
    if (hasReasonNotSupported() != other.hasReasonNotSupported()) return false;
    if (hasReasonNotSupported()) {
      if (reasonNotSupported_ != other.reasonNotSupported_) return false;
    }
    if (hasHandshakeConversionInfo() != other.hasHandshakeConversionInfo()) return false;
    if (hasHandshakeConversionInfo()) {
      if (handshakeConversionInfo_ != other.handshakeConversionInfo_) return false;
    }
    if (hasIsRecoveryHandshake() != other.hasIsRecoveryHandshake()) return false;
    if (hasIsRecoveryHandshake()) {
      if (getIsRecoveryHandshake()
          != other.getIsRecoveryHandshake()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasHandshakeResult()) {
      hash = (37 * hash) + HANDSHAKE_RESULT_FIELD_NUMBER;
      hash = (53 * hash) + handshakeResult_;
    }
    if (hasHandshakeConversion()) {
      hash = (37 * hash) + HANDSHAKE_CONVERSION_FIELD_NUMBER;
      hash = (53 * hash) + handshakeConversion_;
    }
    if (hasReasonNotSupported()) {
      hash = (37 * hash) + REASON_NOT_SUPPORTED_FIELD_NUMBER;
      hash = (53 * hash) + reasonNotSupported_;
    }
    if (hasHandshakeConversionInfo()) {
      hash = (37 * hash) + HANDSHAKE_CONVERSION_INFO_FIELD_NUMBER;
      hash = (53 * hash) + handshakeConversionInfo_;
    }
    if (hasIsRecoveryHandshake()) {
      hash = (37 * hash) + IS_RECOVERY_HANDSHAKE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsRecoveryHandshake());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code android_studio.DynamicLayoutInspectorAutoConnectInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.DynamicLayoutInspectorAutoConnectInfo)
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorAutoConnectInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorAutoConnectInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.class, com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      handshakeResult_ = 0;
      handshakeConversion_ = 0;
      reasonNotSupported_ = 0;
      handshakeConversionInfo_ = 0;
      isRecoveryHandshake_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_DynamicLayoutInspectorAutoConnectInfo_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo build() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo buildPartial() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo result = new com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.handshakeResult_ = handshakeResult_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.handshakeConversion_ = handshakeConversion_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.reasonNotSupported_ = reasonNotSupported_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.handshakeConversionInfo_ = handshakeConversionInfo_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.isRecoveryHandshake_ = isRecoveryHandshake_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo) {
        return mergeFrom((com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo other) {
      if (other == com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.getDefaultInstance()) return this;
      if (other.hasHandshakeResult()) {
        setHandshakeResult(other.getHandshakeResult());
      }
      if (other.hasHandshakeConversion()) {
        setHandshakeConversion(other.getHandshakeConversion());
      }
      if (other.hasReasonNotSupported()) {
        setReasonNotSupported(other.getReasonNotSupported());
      }
      if (other.hasHandshakeConversionInfo()) {
        setHandshakeConversionInfo(other.getHandshakeConversionInfo());
      }
      if (other.hasIsRecoveryHandshake()) {
        setIsRecoveryHandshake(other.getIsRecoveryHandshake());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult tmpValue =
                  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(1, tmpRaw);
              } else {
                handshakeResult_ = tmpRaw;
                bitField0_ |= 0x00000001;
              }
              break;
            } // case 8
            case 16: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion tmpValue =
                  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(2, tmpRaw);
              } else {
                handshakeConversion_ = tmpRaw;
                bitField0_ |= 0x00000002;
              }
              break;
            } // case 16
            case 24: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported tmpValue =
                  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(3, tmpRaw);
              } else {
                reasonNotSupported_ = tmpRaw;
                bitField0_ |= 0x00000004;
              }
              break;
            } // case 24
            case 32: {
              int tmpRaw = input.readEnum();
              com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion tmpValue =
                  com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(4, tmpRaw);
              } else {
                handshakeConversionInfo_ = tmpRaw;
                bitField0_ |= 0x00000008;
              }
              break;
            } // case 32
            case 40: {
              isRecoveryHandshake_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int handshakeResult_ = 0;
    /**
     * <pre>
     * The result of the handshake. Does the device support auto connect?
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult handshake_result = 1;</code>
     * @return Whether the handshakeResult field is set.
     */
    @java.lang.Override public boolean hasHandshakeResult() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The result of the handshake. Does the device support auto connect?
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult handshake_result = 1;</code>
     * @return The handshakeResult.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult getHandshakeResult() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult.forNumber(handshakeResult_);
      return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult.UNSPECIFIED_RESULT : result;
    }
    /**
     * <pre>
     * The result of the handshake. Does the device support auto connect?
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult handshake_result = 1;</code>
     * @param value The handshakeResult to set.
     * @return This builder for chaining.
     */
    public Builder setHandshakeResult(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      handshakeResult_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The result of the handshake. Does the device support auto connect?
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeResult handshake_result = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHandshakeResult() {
      bitField0_ = (bitField0_ & ~0x00000001);
      handshakeResult_ = 0;
      onChanged();
      return this;
    }

    private int handshakeConversion_ = 0;
    /**
     * <pre>
     * Deprecated, use handshake_conversion_info instead
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion handshake_conversion = 2 [deprecated = true];</code>
     * @deprecated android_studio.DynamicLayoutInspectorAutoConnectInfo.handshake_conversion is deprecated.
     *     See studio_stats.proto;l=9083
     * @return Whether the handshakeConversion field is set.
     */
    @java.lang.Override @java.lang.Deprecated public boolean hasHandshakeConversion() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Deprecated, use handshake_conversion_info instead
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion handshake_conversion = 2 [deprecated = true];</code>
     * @deprecated android_studio.DynamicLayoutInspectorAutoConnectInfo.handshake_conversion is deprecated.
     *     See studio_stats.proto;l=9083
     * @return The handshakeConversion.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion getHandshakeConversion() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion.forNumber(handshakeConversion_);
      return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion.UNKNOWN_TO_SUPPORTED : result;
    }
    /**
     * <pre>
     * Deprecated, use handshake_conversion_info instead
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion handshake_conversion = 2 [deprecated = true];</code>
     * @deprecated android_studio.DynamicLayoutInspectorAutoConnectInfo.handshake_conversion is deprecated.
     *     See studio_stats.proto;l=9083
     * @param value The handshakeConversion to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setHandshakeConversion(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      handshakeConversion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Deprecated, use handshake_conversion_info instead
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeUnknownConversion handshake_conversion = 2 [deprecated = true];</code>
     * @deprecated android_studio.DynamicLayoutInspectorAutoConnectInfo.handshake_conversion is deprecated.
     *     See studio_stats.proto;l=9083
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearHandshakeConversion() {
      bitField0_ = (bitField0_ & ~0x00000002);
      handshakeConversion_ = 0;
      onChanged();
      return this;
    }

    private int reasonNotSupported_ = 0;
    /**
     * <pre>
     * Additional info about why the handshake_result is NOT_SUPPORTED
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported reason_not_supported = 3;</code>
     * @return Whether the reasonNotSupported field is set.
     */
    @java.lang.Override public boolean hasReasonNotSupported() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Additional info about why the handshake_result is NOT_SUPPORTED
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported reason_not_supported = 3;</code>
     * @return The reasonNotSupported.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported getReasonNotSupported() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported.forNumber(reasonNotSupported_);
      return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported.UNSPECIFIED_REASON : result;
    }
    /**
     * <pre>
     * Additional info about why the handshake_result is NOT_SUPPORTED
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported reason_not_supported = 3;</code>
     * @param value The reasonNotSupported to set.
     * @return This builder for chaining.
     */
    public Builder setReasonNotSupported(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      reasonNotSupported_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Additional info about why the handshake_result is NOT_SUPPORTED
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.AutoConnectReasonNotSupported reason_not_supported = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearReasonNotSupported() {
      bitField0_ = (bitField0_ & ~0x00000004);
      reasonNotSupported_ = 0;
      onChanged();
      return this;
    }

    private int handshakeConversionInfo_ = 0;
    /**
     * <pre>
     * Indicates when a handshake state converts to another
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion handshake_conversion_info = 4;</code>
     * @return Whether the handshakeConversionInfo field is set.
     */
    @java.lang.Override public boolean hasHandshakeConversionInfo() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Indicates when a handshake state converts to another
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion handshake_conversion_info = 4;</code>
     * @return The handshakeConversionInfo.
     */
    @java.lang.Override
    public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion getHandshakeConversionInfo() {
      com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion result = com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion.forNumber(handshakeConversionInfo_);
      return result == null ? com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion.UNSPECIFIED_CONVERSION : result;
    }
    /**
     * <pre>
     * Indicates when a handshake state converts to another
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion handshake_conversion_info = 4;</code>
     * @param value The handshakeConversionInfo to set.
     * @return This builder for chaining.
     */
    public Builder setHandshakeConversionInfo(com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      handshakeConversionInfo_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates when a handshake state converts to another
     * </pre>
     *
     * <code>optional .android_studio.DynamicLayoutInspectorAutoConnectInfo.HandshakeConversion handshake_conversion_info = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearHandshakeConversionInfo() {
      bitField0_ = (bitField0_ & ~0x00000008);
      handshakeConversionInfo_ = 0;
      onChanged();
      return this;
    }

    private boolean isRecoveryHandshake_ ;
    /**
     * <pre>
     * Indicates whether this auto-connect info is about a recovery handshake
     * </pre>
     *
     * <code>optional bool is_recovery_handshake = 5;</code>
     * @return Whether the isRecoveryHandshake field is set.
     */
    @java.lang.Override
    public boolean hasIsRecoveryHandshake() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Indicates whether this auto-connect info is about a recovery handshake
     * </pre>
     *
     * <code>optional bool is_recovery_handshake = 5;</code>
     * @return The isRecoveryHandshake.
     */
    @java.lang.Override
    public boolean getIsRecoveryHandshake() {
      return isRecoveryHandshake_;
    }
    /**
     * <pre>
     * Indicates whether this auto-connect info is about a recovery handshake
     * </pre>
     *
     * <code>optional bool is_recovery_handshake = 5;</code>
     * @param value The isRecoveryHandshake to set.
     * @return This builder for chaining.
     */
    public Builder setIsRecoveryHandshake(boolean value) {

      isRecoveryHandshake_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates whether this auto-connect info is about a recovery handshake
     * </pre>
     *
     * <code>optional bool is_recovery_handshake = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsRecoveryHandshake() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isRecoveryHandshake_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.DynamicLayoutInspectorAutoConnectInfo)
  }

  // @@protoc_insertion_point(class_scope:android_studio.DynamicLayoutInspectorAutoConnectInfo)
  private static final com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo();
  }

  public static com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<DynamicLayoutInspectorAutoConnectInfo>
      PARSER = new com.google.protobuf.AbstractParser<DynamicLayoutInspectorAutoConnectInfo>() {
    @java.lang.Override
    public DynamicLayoutInspectorAutoConnectInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DynamicLayoutInspectorAutoConnectInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DynamicLayoutInspectorAutoConnectInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.DynamicLayoutInspectorAutoConnectInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

