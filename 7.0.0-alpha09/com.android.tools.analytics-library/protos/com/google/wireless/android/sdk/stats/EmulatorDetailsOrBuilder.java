// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface EmulatorDetailsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.EmulatorDetails)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Cpu architecture of the guest.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.GuestCpuArchitecture guest_arch = 1;</code>
   * @return Whether the guestArch field is set.
   */
  boolean hasGuestArch();
  /**
   * <pre>
   * Cpu architecture of the guest.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.GuestCpuArchitecture guest_arch = 1;</code>
   * @return The guestArch.
   */
  com.google.wireless.android.sdk.stats.EmulatorDetails.GuestCpuArchitecture getGuestArch();

  /**
   * <pre>
   * cpu time spent in kernel mode in milliseconds since last metrics report.
   * </pre>
   *
   * <code>optional int64 system_time = 2;</code>
   * @return Whether the systemTime field is set.
   */
  boolean hasSystemTime();
  /**
   * <pre>
   * cpu time spent in kernel mode in milliseconds since last metrics report.
   * </pre>
   *
   * <code>optional int64 system_time = 2;</code>
   * @return The systemTime.
   */
  long getSystemTime();

  /**
   * <pre>
   * cpu time spent in user mode in milliseconds since last metrics report.
   * </pre>
   *
   * <code>optional int64 user_time = 3;</code>
   * @return Whether the userTime field is set.
   */
  boolean hasUserTime();
  /**
   * <pre>
   * cpu time spent in user mode in milliseconds since last metrics report.
   * </pre>
   *
   * <code>optional int64 user_time = 3;</code>
   * @return The userTime.
   */
  long getUserTime();

  /**
   * <pre>
   * number of crashes since last metrics report.
   * </pre>
   *
   * <code>optional int64 crashes = 4;</code>
   * @return Whether the crashes field is set.
   */
  boolean hasCrashes();
  /**
   * <pre>
   * number of crashes since last metrics report.
   * </pre>
   *
   * <code>optional int64 crashes = 4;</code>
   * @return The crashes.
   */
  long getCrashes();

  /**
   * <pre>
   * real time in milliseconds since last metrics report.
   * </pre>
   *
   * <code>optional int64 wall_time = 5;</code>
   * @return Whether the wallTime field is set.
   */
  boolean hasWallTime();
  /**
   * <pre>
   * real time in milliseconds since last metrics report.
   * </pre>
   *
   * <code>optional int64 wall_time = 5;</code>
   * @return The wallTime.
   */
  long getWallTime();

  /**
   * <pre>
   * True iff a crash occurred while process started its exit routines.
   * </pre>
   *
   * <code>optional bool exit_started = 6;</code>
   * @return Whether the exitStarted field is set.
   */
  boolean hasExitStarted();
  /**
   * <pre>
   * True iff a crash occurred while process started its exit routines.
   * </pre>
   *
   * <code>optional bool exit_started = 6;</code>
   * @return The exitStarted.
   */
  boolean getExitStarted();

  /**
   * <pre>
   * The API level of the running guest image.
   * </pre>
   *
   * <code>optional int64 guest_api_level = 7;</code>
   * @return Whether the guestApiLevel field is set.
   */
  boolean hasGuestApiLevel();
  /**
   * <pre>
   * The API level of the running guest image.
   * </pre>
   *
   * <code>optional int64 guest_api_level = 7;</code>
   * @return The guestApiLevel.
   */
  long getGuestApiLevel();

  /**
   * <pre>
   * The value of guest gpu option (ro.kernel.qemu.gles)
   * </pre>
   *
   * <code>optional bool guest_gpu_enabled = 8;</code>
   * @return Whether the guestGpuEnabled field is set.
   */
  boolean hasGuestGpuEnabled();
  /**
   * <pre>
   * The value of guest gpu option (ro.kernel.qemu.gles)
   * </pre>
   *
   * <code>optional bool guest_gpu_enabled = 8;</code>
   * @return The guestGpuEnabled.
   */
  boolean getGuestGpuEnabled();

  /**
   * <pre>
   * True if we were able to correctly initialize opengl on the host.
   * </pre>
   *
   * <code>optional bool is_opengl_alive = 10;</code>
   * @return Whether the isOpenglAlive field is set.
   */
  boolean hasIsOpenglAlive();
  /**
   * <pre>
   * True if we were able to correctly initialize opengl on the host.
   * </pre>
   *
   * <code>optional bool is_opengl_alive = 10;</code>
   * @return The isOpenglAlive.
   */
  boolean getIsOpenglAlive();

  /**
   * <pre>
   * Connectivity from adb of the running emulator instance.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorAdbLiveness adb_liveness = 11;</code>
   * @return Whether the adbLiveness field is set.
   */
  boolean hasAdbLiveness();
  /**
   * <pre>
   * Connectivity from adb of the running emulator instance.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorAdbLiveness adb_liveness = 11;</code>
   * @return The adbLiveness.
   */
  com.google.wireless.android.sdk.stats.EmulatorDetails.EmulatorAdbLiveness getAdbLiveness();

  /**
   * <pre>
   * Information about the gl implementation in the guest image.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGuestGlInfo guest_gl = 12;</code>
   * @return Whether the guestGl field is set.
   */
  boolean hasGuestGl();
  /**
   * <pre>
   * Information about the gl implementation in the guest image.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGuestGlInfo guest_gl = 12;</code>
   * @return The guestGl.
   */
  com.google.wireless.android.sdk.stats.EmulatorGuestGlInfo getGuestGl();
  /**
   * <pre>
   * Information about the gl implementation in the guest image.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGuestGlInfo guest_gl = 12;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorGuestGlInfoOrBuilder getGuestGlOrBuilder();

  /**
   * <pre>
   * Information about the host GPUs (one per GPU).
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorGpuInfo host_gpu = 13;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.EmulatorGpuInfo>
      getHostGpuList();
  /**
   * <pre>
   * Information about the host GPUs (one per GPU).
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorGpuInfo host_gpu = 13;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorGpuInfo getHostGpu(int index);
  /**
   * <pre>
   * Information about the host GPUs (one per GPU).
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorGpuInfo host_gpu = 13;</code>
   */
  int getHostGpuCount();
  /**
   * <pre>
   * Information about the host GPUs (one per GPU).
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorGpuInfo host_gpu = 13;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.EmulatorGpuInfoOrBuilder>
      getHostGpuOrBuilderList();
  /**
   * <pre>
   * Information about the host GPUs (one per GPU).
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorGpuInfo host_gpu = 13;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorGpuInfoOrBuilder getHostGpuOrBuilder(
      int index);

  /**
   * <pre>
   * The "phase" of an emulator session where crash happened.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorSessionPhase session_phase = 14;</code>
   * @return Whether the sessionPhase field is set.
   */
  boolean hasSessionPhase();
  /**
   * <pre>
   * The "phase" of an emulator session where crash happened.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorSessionPhase session_phase = 14;</code>
   * @return The sessionPhase.
   */
  com.google.wireless.android.sdk.stats.EmulatorDetails.EmulatorSessionPhase getSessionPhase();

  /**
   * <pre>
   * The emulator core version (e.g. QEMU engine's version).
   * </pre>
   *
   * <code>optional string core_version = 15;</code>
   * @return Whether the coreVersion field is set.
   */
  boolean hasCoreVersion();
  /**
   * <pre>
   * The emulator core version (e.g. QEMU engine's version).
   * </pre>
   *
   * <code>optional string core_version = 15;</code>
   * @return The coreVersion.
   */
  java.lang.String getCoreVersion();
  /**
   * <pre>
   * The emulator core version (e.g. QEMU engine's version).
   * </pre>
   *
   * <code>optional string core_version = 15;</code>
   * @return The bytes for coreVersion.
   */
  com.google.protobuf.ByteString
      getCoreVersionBytes();

  /**
   * <pre>
   * Renderer of the current emulator session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorRenderer renderer = 16;</code>
   * @return Whether the renderer field is set.
   */
  boolean hasRenderer();
  /**
   * <pre>
   * Renderer of the current emulator session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorRenderer renderer = 16;</code>
   * @return The renderer.
   */
  com.google.wireless.android.sdk.stats.EmulatorDetails.EmulatorRenderer getRenderer();

  /**
   * <pre>
   * Flags for the used UI features.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorFeatures used_features = 17;</code>
   * @return Whether the usedFeatures field is set.
   */
  boolean hasUsedFeatures();
  /**
   * <pre>
   * Flags for the used UI features.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorFeatures used_features = 17;</code>
   * @return The usedFeatures.
   */
  com.google.wireless.android.sdk.stats.EmulatorFeatures getUsedFeatures();
  /**
   * <pre>
   * Flags for the used UI features.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorFeatures used_features = 17;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorFeaturesOrBuilder getUsedFeaturesOrBuilder();

  /**
   * <pre>
   * Information about the currently loaded AVD.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorAvdInfo avd_info = 18;</code>
   * @return Whether the avdInfo field is set.
   */
  boolean hasAvdInfo();
  /**
   * <pre>
   * Information about the currently loaded AVD.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorAvdInfo avd_info = 18;</code>
   * @return The avdInfo.
   */
  com.google.wireless.android.sdk.stats.EmulatorAvdInfo getAvdInfo();
  /**
   * <pre>
   * Information about the currently loaded AVD.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorAvdInfo avd_info = 18;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorAvdInfoOrBuilder getAvdInfoOrBuilder();

  /**
   * <pre>
   * State tracking emulator feature flag enable/disable.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorFeatureFlagState feature_flag_state = 19;</code>
   * @return Whether the featureFlagState field is set.
   */
  boolean hasFeatureFlagState();
  /**
   * <pre>
   * State tracking emulator feature flag enable/disable.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorFeatureFlagState feature_flag_state = 19;</code>
   * @return The featureFlagState.
   */
  com.google.wireless.android.sdk.stats.EmulatorFeatureFlagState getFeatureFlagState();
  /**
   * <pre>
   * State tracking emulator feature flag enable/disable.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorFeatureFlagState feature_flag_state = 19;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorFeatureFlagStateOrBuilder getFeatureFlagStateOrBuilder();

  /**
   * <pre>
   * Hypervisor used in current session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorHypervisor hypervisor = 20;</code>
   * @return Whether the hypervisor field is set.
   */
  boolean hasHypervisor();
  /**
   * <pre>
   * Hypervisor used in current session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorDetails.EmulatorHypervisor hypervisor = 20;</code>
   * @return The hypervisor.
   */
  com.google.wireless.android.sdk.stats.EmulatorDetails.EmulatorHypervisor getHypervisor();

  /**
   * <pre>
   * Information about quickboot status of the current session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorQuickbootLoad quickboot_load = 21;</code>
   * @return Whether the quickbootLoad field is set.
   */
  boolean hasQuickbootLoad();
  /**
   * <pre>
   * Information about quickboot status of the current session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorQuickbootLoad quickboot_load = 21;</code>
   * @return The quickbootLoad.
   */
  com.google.wireless.android.sdk.stats.EmulatorQuickbootLoad getQuickbootLoad();
  /**
   * <pre>
   * Information about quickboot status of the current session.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorQuickbootLoad quickboot_load = 21;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorQuickbootLoadOrBuilder getQuickbootLoadOrBuilder();

  /**
   * <code>optional .android_studio.EmulatorQuickbootSave quickboot_save = 22;</code>
   * @return Whether the quickbootSave field is set.
   */
  boolean hasQuickbootSave();
  /**
   * <code>optional .android_studio.EmulatorQuickbootSave quickboot_save = 22;</code>
   * @return The quickbootSave.
   */
  com.google.wireless.android.sdk.stats.EmulatorQuickbootSave getQuickbootSave();
  /**
   * <code>optional .android_studio.EmulatorQuickbootSave quickboot_save = 22;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorQuickbootSaveOrBuilder getQuickbootSaveOrBuilder();

  /**
   * <pre>
   * Track GLES command usages
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGLESUsages gles_usages = 23;</code>
   * @return Whether the glesUsages field is set.
   */
  boolean hasGlesUsages();
  /**
   * <pre>
   * Track GLES command usages
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGLESUsages gles_usages = 23;</code>
   * @return The glesUsages.
   */
  com.google.wireless.android.sdk.stats.EmulatorGLESUsages getGlesUsages();
  /**
   * <pre>
   * Track GLES command usages
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGLESUsages gles_usages = 23;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorGLESUsagesOrBuilder getGlesUsagesOrBuilder();

  /**
   * <pre>
   * Metrics on all generic emulator snapshot saves and loads.
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_loads = 24;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.EmulatorSnapshot>
      getSnapshotLoadsList();
  /**
   * <pre>
   * Metrics on all generic emulator snapshot saves and loads.
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_loads = 24;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorSnapshot getSnapshotLoads(int index);
  /**
   * <pre>
   * Metrics on all generic emulator snapshot saves and loads.
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_loads = 24;</code>
   */
  int getSnapshotLoadsCount();
  /**
   * <pre>
   * Metrics on all generic emulator snapshot saves and loads.
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_loads = 24;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.EmulatorSnapshotOrBuilder>
      getSnapshotLoadsOrBuilderList();
  /**
   * <pre>
   * Metrics on all generic emulator snapshot saves and loads.
   * </pre>
   *
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_loads = 24;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorSnapshotOrBuilder getSnapshotLoadsOrBuilder(
      int index);

  /**
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_saves = 25;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.EmulatorSnapshot>
      getSnapshotSavesList();
  /**
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_saves = 25;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorSnapshot getSnapshotSaves(int index);
  /**
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_saves = 25;</code>
   */
  int getSnapshotSavesCount();
  /**
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_saves = 25;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.EmulatorSnapshotOrBuilder>
      getSnapshotSavesOrBuilderList();
  /**
   * <code>repeated .android_studio.EmulatorSnapshot snapshot_saves = 25;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorSnapshotOrBuilder getSnapshotSavesOrBuilder(
      int index);

  /**
   * <pre>
   * Metrics on all snapshot UI.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorSnapshotUICounts snapshot_ui_counts = 26;</code>
   * @return Whether the snapshotUiCounts field is set.
   */
  boolean hasSnapshotUiCounts();
  /**
   * <pre>
   * Metrics on all snapshot UI.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorSnapshotUICounts snapshot_ui_counts = 26;</code>
   * @return The snapshotUiCounts.
   */
  com.google.wireless.android.sdk.stats.EmulatorSnapshotUICounts getSnapshotUiCounts();
  /**
   * <pre>
   * Metrics on all snapshot UI.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorSnapshotUICounts snapshot_ui_counts = 26;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorSnapshotUICountsOrBuilder getSnapshotUiCountsOrBuilder();

  /**
   * <pre>
   * Metrics on camera usage.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorCameraSession camera = 27;</code>
   * @return Whether the camera field is set.
   */
  boolean hasCamera();
  /**
   * <pre>
   * Metrics on camera usage.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorCameraSession camera = 27;</code>
   * @return The camera.
   */
  com.google.wireless.android.sdk.stats.EmulatorCameraSession getCamera();
  /**
   * <pre>
   * Metrics on camera usage.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorCameraSession camera = 27;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorCameraSessionOrBuilder getCameraOrBuilder();

  /**
   * <pre>
   * Metrics for virtual scene camera sessions.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorVirtualSceneSession virtual_scene = 28;</code>
   * @return Whether the virtualScene field is set.
   */
  boolean hasVirtualScene();
  /**
   * <pre>
   * Metrics for virtual scene camera sessions.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorVirtualSceneSession virtual_scene = 28;</code>
   * @return The virtualScene.
   */
  com.google.wireless.android.sdk.stats.EmulatorVirtualSceneSession getVirtualScene();
  /**
   * <pre>
   * Metrics for virtual scene camera sessions.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorVirtualSceneSession virtual_scene = 28;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorVirtualSceneSessionOrBuilder getVirtualSceneOrBuilder();

  /**
   * <pre>
   * Metrics for emulator boot status and time.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorBootInfo boot_info = 29;</code>
   * @return Whether the bootInfo field is set.
   */
  boolean hasBootInfo();
  /**
   * <pre>
   * Metrics for emulator boot status and time.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorBootInfo boot_info = 29;</code>
   * @return The bootInfo.
   */
  com.google.wireless.android.sdk.stats.EmulatorBootInfo getBootInfo();
  /**
   * <pre>
   * Metrics for emulator boot status and time.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorBootInfo boot_info = 29;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorBootInfoOrBuilder getBootInfoOrBuilder();

  /**
   * <pre>
   * Metrics for automation/macros.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorAutomation automation = 30;</code>
   * @return Whether the automation field is set.
   */
  boolean hasAutomation();
  /**
   * <pre>
   * Metrics for automation/macros.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorAutomation automation = 30;</code>
   * @return The automation.
   */
  com.google.wireless.android.sdk.stats.EmulatorAutomation getAutomation();
  /**
   * <pre>
   * Metrics for automation/macros.
   * </pre>
   *
   * <code>optional .android_studio.EmulatorAutomation automation = 30;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorAutomationOrBuilder getAutomationOrBuilder();

  /**
   * <pre>
   * Metrics for multi-display
   * </pre>
   *
   * <code>optional .android_studio.EmulatorMultiDisplay multi_display = 31;</code>
   * @return Whether the multiDisplay field is set.
   */
  boolean hasMultiDisplay();
  /**
   * <pre>
   * Metrics for multi-display
   * </pre>
   *
   * <code>optional .android_studio.EmulatorMultiDisplay multi_display = 31;</code>
   * @return The multiDisplay.
   */
  com.google.wireless.android.sdk.stats.EmulatorMultiDisplay getMultiDisplay();
  /**
   * <pre>
   * Metrics for multi-display
   * </pre>
   *
   * <code>optional .android_studio.EmulatorMultiDisplay multi_display = 31;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorMultiDisplayOrBuilder getMultiDisplayOrBuilder();

  /**
   * <pre>
   * Metrics for gRPC invocation
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGrpc grpc = 32;</code>
   * @return Whether the grpc field is set.
   */
  boolean hasGrpc();
  /**
   * <pre>
   * Metrics for gRPC invocation
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGrpc grpc = 32;</code>
   * @return The grpc.
   */
  com.google.wireless.android.sdk.stats.EmulatorGrpc getGrpc();
  /**
   * <pre>
   * Metrics for gRPC invocation
   * </pre>
   *
   * <code>optional .android_studio.EmulatorGrpc grpc = 32;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorGrpcOrBuilder getGrpcOrBuilder();

  /**
   * <pre>
   * Metrics for LocationUiV2
   * </pre>
   *
   * <code>optional .android_studio.EmulatorLocationV2 location_v2 = 33;</code>
   * @return Whether the locationV2 field is set.
   */
  boolean hasLocationV2();
  /**
   * <pre>
   * Metrics for LocationUiV2
   * </pre>
   *
   * <code>optional .android_studio.EmulatorLocationV2 location_v2 = 33;</code>
   * @return The locationV2.
   */
  com.google.wireless.android.sdk.stats.EmulatorLocationV2 getLocationV2();
  /**
   * <pre>
   * Metrics for LocationUiV2
   * </pre>
   *
   * <code>optional .android_studio.EmulatorLocationV2 location_v2 = 33;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorLocationV2OrBuilder getLocationV2OrBuilder();

  /**
   * <pre>
   * Metrics for streamScreenshot
   * </pre>
   *
   * <code>optional .android_studio.EmulatorStreamScreenshot screenshot = 34;</code>
   * @return Whether the screenshot field is set.
   */
  boolean hasScreenshot();
  /**
   * <pre>
   * Metrics for streamScreenshot
   * </pre>
   *
   * <code>optional .android_studio.EmulatorStreamScreenshot screenshot = 34;</code>
   * @return The screenshot.
   */
  com.google.wireless.android.sdk.stats.EmulatorStreamScreenshot getScreenshot();
  /**
   * <pre>
   * Metrics for streamScreenshot
   * </pre>
   *
   * <code>optional .android_studio.EmulatorStreamScreenshot screenshot = 34;</code>
   */
  com.google.wireless.android.sdk.stats.EmulatorStreamScreenshotOrBuilder getScreenshotOrBuilder();
}
