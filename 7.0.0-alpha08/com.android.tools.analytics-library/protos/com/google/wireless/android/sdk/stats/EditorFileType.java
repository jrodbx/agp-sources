// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * Protobuf enum {@code android_studio.EditorFileType}
 */
public enum EditorFileType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Anything not explicitly in this list.
   * </pre>
   *
   * <code>UNKNOWN = 0;</code>
   */
  UNKNOWN(0),
  /**
   * <code>JAVA = 1;</code>
   */
  JAVA(1),
  /**
   * <code>KOTLIN = 2;</code>
   */
  KOTLIN(2),
  /**
   * <pre>
   * .xml, unless more specific info is available (see below).
   * </pre>
   *
   * <code>XML = 3;</code>
   */
  XML(3),
  /**
   * <code>GROOVY = 4;</code>
   */
  GROOVY(4),
  /**
   * <code>PROPERTIES = 5;</code>
   */
  PROPERTIES(5),
  /**
   * <code>JSON = 6;</code>
   */
  JSON(6),
  /**
   * <pre>
   * .kts
   * </pre>
   *
   * <code>KOTLIN_SCRIPT = 7;</code>
   */
  KOTLIN_SCRIPT(7),
  /**
   * <pre>
   * .c, .cpp, .h, etc.
   * </pre>
   *
   * <code>NATIVE = 8;</code>
   */
  NATIVE(8),
  /**
   * <pre>
   * AndroidManifest.xml
   * </pre>
   *
   * <code>XML_MANIFEST = 9;</code>
   */
  XML_MANIFEST(9),
  /**
   * <pre>
   * XML resource types come from com.android.resources.ResourceFolderType.
   * </pre>
   *
   * <code>XML_RES_ANIM = 10;</code>
   */
  XML_RES_ANIM(10),
  /**
   * <code>XML_RES_ANIMATOR = 11;</code>
   */
  XML_RES_ANIMATOR(11),
  /**
   * <code>XML_RES_COLOR = 12;</code>
   */
  XML_RES_COLOR(12),
  /**
   * <code>XML_RES_DRAWABLE = 13;</code>
   */
  XML_RES_DRAWABLE(13),
  /**
   * <code>XML_RES_FONT = 14;</code>
   */
  XML_RES_FONT(14),
  /**
   * <code>XML_RES_INTERPOLATOR = 15;</code>
   */
  XML_RES_INTERPOLATOR(15),
  /**
   * <code>XML_RES_LAYOUT = 16;</code>
   */
  XML_RES_LAYOUT(16),
  /**
   * <code>XML_RES_MENU = 17;</code>
   */
  XML_RES_MENU(17),
  /**
   * <code>XML_RES_MIPMAP = 18;</code>
   */
  XML_RES_MIPMAP(18),
  /**
   * <code>XML_RES_NAVIGATION = 19;</code>
   */
  XML_RES_NAVIGATION(19),
  /**
   * <code>XML_RES_RAW = 20;</code>
   */
  XML_RES_RAW(20),
  /**
   * <code>XML_RES_TRANSITION = 21;</code>
   */
  XML_RES_TRANSITION(21),
  /**
   * <code>XML_RES_VALUES = 22;</code>
   */
  XML_RES_VALUES(22),
  /**
   * <code>XML_RES_XML = 23;</code>
   */
  XML_RES_XML(23),
  ;

  /**
   * <pre>
   * Anything not explicitly in this list.
   * </pre>
   *
   * <code>UNKNOWN = 0;</code>
   */
  public static final int UNKNOWN_VALUE = 0;
  /**
   * <code>JAVA = 1;</code>
   */
  public static final int JAVA_VALUE = 1;
  /**
   * <code>KOTLIN = 2;</code>
   */
  public static final int KOTLIN_VALUE = 2;
  /**
   * <pre>
   * .xml, unless more specific info is available (see below).
   * </pre>
   *
   * <code>XML = 3;</code>
   */
  public static final int XML_VALUE = 3;
  /**
   * <code>GROOVY = 4;</code>
   */
  public static final int GROOVY_VALUE = 4;
  /**
   * <code>PROPERTIES = 5;</code>
   */
  public static final int PROPERTIES_VALUE = 5;
  /**
   * <code>JSON = 6;</code>
   */
  public static final int JSON_VALUE = 6;
  /**
   * <pre>
   * .kts
   * </pre>
   *
   * <code>KOTLIN_SCRIPT = 7;</code>
   */
  public static final int KOTLIN_SCRIPT_VALUE = 7;
  /**
   * <pre>
   * .c, .cpp, .h, etc.
   * </pre>
   *
   * <code>NATIVE = 8;</code>
   */
  public static final int NATIVE_VALUE = 8;
  /**
   * <pre>
   * AndroidManifest.xml
   * </pre>
   *
   * <code>XML_MANIFEST = 9;</code>
   */
  public static final int XML_MANIFEST_VALUE = 9;
  /**
   * <pre>
   * XML resource types come from com.android.resources.ResourceFolderType.
   * </pre>
   *
   * <code>XML_RES_ANIM = 10;</code>
   */
  public static final int XML_RES_ANIM_VALUE = 10;
  /**
   * <code>XML_RES_ANIMATOR = 11;</code>
   */
  public static final int XML_RES_ANIMATOR_VALUE = 11;
  /**
   * <code>XML_RES_COLOR = 12;</code>
   */
  public static final int XML_RES_COLOR_VALUE = 12;
  /**
   * <code>XML_RES_DRAWABLE = 13;</code>
   */
  public static final int XML_RES_DRAWABLE_VALUE = 13;
  /**
   * <code>XML_RES_FONT = 14;</code>
   */
  public static final int XML_RES_FONT_VALUE = 14;
  /**
   * <code>XML_RES_INTERPOLATOR = 15;</code>
   */
  public static final int XML_RES_INTERPOLATOR_VALUE = 15;
  /**
   * <code>XML_RES_LAYOUT = 16;</code>
   */
  public static final int XML_RES_LAYOUT_VALUE = 16;
  /**
   * <code>XML_RES_MENU = 17;</code>
   */
  public static final int XML_RES_MENU_VALUE = 17;
  /**
   * <code>XML_RES_MIPMAP = 18;</code>
   */
  public static final int XML_RES_MIPMAP_VALUE = 18;
  /**
   * <code>XML_RES_NAVIGATION = 19;</code>
   */
  public static final int XML_RES_NAVIGATION_VALUE = 19;
  /**
   * <code>XML_RES_RAW = 20;</code>
   */
  public static final int XML_RES_RAW_VALUE = 20;
  /**
   * <code>XML_RES_TRANSITION = 21;</code>
   */
  public static final int XML_RES_TRANSITION_VALUE = 21;
  /**
   * <code>XML_RES_VALUES = 22;</code>
   */
  public static final int XML_RES_VALUES_VALUE = 22;
  /**
   * <code>XML_RES_XML = 23;</code>
   */
  public static final int XML_RES_XML_VALUE = 23;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EditorFileType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static EditorFileType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN;
      case 1: return JAVA;
      case 2: return KOTLIN;
      case 3: return XML;
      case 4: return GROOVY;
      case 5: return PROPERTIES;
      case 6: return JSON;
      case 7: return KOTLIN_SCRIPT;
      case 8: return NATIVE;
      case 9: return XML_MANIFEST;
      case 10: return XML_RES_ANIM;
      case 11: return XML_RES_ANIMATOR;
      case 12: return XML_RES_COLOR;
      case 13: return XML_RES_DRAWABLE;
      case 14: return XML_RES_FONT;
      case 15: return XML_RES_INTERPOLATOR;
      case 16: return XML_RES_LAYOUT;
      case 17: return XML_RES_MENU;
      case 18: return XML_RES_MIPMAP;
      case 19: return XML_RES_NAVIGATION;
      case 20: return XML_RES_RAW;
      case 21: return XML_RES_TRANSITION;
      case 22: return XML_RES_VALUES;
      case 23: return XML_RES_XML;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EditorFileType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EditorFileType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EditorFileType>() {
          public EditorFileType findValueByNumber(int number) {
            return EditorFileType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.getDescriptor().getEnumTypes().get(5);
  }

  private static final EditorFileType[] VALUES = values();

  public static EditorFileType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EditorFileType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:android_studio.EditorFileType)
}

