// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface LintSessionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.LintSession)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * analysis type - build, ide batch, ide incremental
   * </pre>
   *
   * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
   * @return Whether the analysisType field is set.
   */
  boolean hasAnalysisType();
  /**
   * <pre>
   * analysis type - build, ide batch, ide incremental
   * </pre>
   *
   * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
   * @return The analysisType.
   */
  com.google.wireless.android.sdk.stats.LintSession.AnalysisType getAnalysisType();

  /**
   * <pre>
   * performance metrics regarding this session
   * </pre>
   *
   * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
   * @return Whether the lintPerformance field is set.
   */
  boolean hasLintPerformance();
  /**
   * <pre>
   * performance metrics regarding this session
   * </pre>
   *
   * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
   * @return The lintPerformance.
   */
  com.google.wireless.android.sdk.stats.LintPerformance getLintPerformance();
  /**
   * <pre>
   * performance metrics regarding this session
   * </pre>
   *
   * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
   */
  com.google.wireless.android.sdk.stats.LintPerformanceOrBuilder getLintPerformanceOrBuilder();

  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.LintIssueId>
      getIssueIdsList();
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  com.google.wireless.android.sdk.stats.LintIssueId getIssueIds(int index);
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  int getIssueIdsCount();
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder>
      getIssueIdsOrBuilderList();
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder getIssueIdsOrBuilder(
      int index);

  /**
   * <pre>
   * Client-side salted, sha256 of the root project path.
   * This exists to allow multiple instant run builds in one project by one
   * user to be correlated.
   * The salt is rotated every 28 days, so it is not a permanent pseudonymous
   * identifier. It is anonymized and is unique per user, but has a 1-N
   * relation.
   * </pre>
   *
   * <code>optional string project_id = 4;</code>
   * @return Whether the projectId field is set.
   */
  boolean hasProjectId();
  /**
   * <pre>
   * Client-side salted, sha256 of the root project path.
   * This exists to allow multiple instant run builds in one project by one
   * user to be correlated.
   * The salt is rotated every 28 days, so it is not a permanent pseudonymous
   * identifier. It is anonymized and is unique per user, but has a 1-N
   * relation.
   * </pre>
   *
   * <code>optional string project_id = 4;</code>
   * @return The projectId.
   */
  java.lang.String getProjectId();
  /**
   * <pre>
   * Client-side salted, sha256 of the root project path.
   * This exists to allow multiple instant run builds in one project by one
   * user to be correlated.
   * The salt is rotated every 28 days, so it is not a permanent pseudonymous
   * identifier. It is anonymized and is unique per user, but has a 1-N
   * relation.
   * </pre>
   *
   * <code>optional string project_id = 4;</code>
   * @return The bytes for projectId.
   */
  com.google.protobuf.ByteString
      getProjectIdBytes();

  /**
   * <pre>
   * true if user is using baselines
   * </pre>
   *
   * <code>optional bool baseline_enabled = 5;</code>
   * @return Whether the baselineEnabled field is set.
   */
  boolean hasBaselineEnabled();
  /**
   * <pre>
   * true if user is using baselines
   * </pre>
   *
   * <code>optional bool baseline_enabled = 5;</code>
   * @return The baselineEnabled.
   */
  boolean getBaselineEnabled();

  /**
   * <pre>
   * true if user is analyzing test sources
   * </pre>
   *
   * <code>optional bool including_test_sources = 6;</code>
   * @return Whether the includingTestSources field is set.
   */
  boolean hasIncludingTestSources();
  /**
   * <pre>
   * true if user is analyzing test sources
   * </pre>
   *
   * <code>optional bool including_test_sources = 6;</code>
   * @return The includingTestSources.
   */
  boolean getIncludingTestSources();

  /**
   * <pre>
   * true if user is analyzing generated sources
   * </pre>
   *
   * <code>optional bool including_generated_sources = 7;</code>
   * @return Whether the includingGeneratedSources field is set.
   */
  boolean hasIncludingGeneratedSources();
  /**
   * <pre>
   * true if user is analyzing generated sources
   * </pre>
   *
   * <code>optional bool including_generated_sources = 7;</code>
   * @return The includingGeneratedSources.
   */
  boolean getIncludingGeneratedSources();

  /**
   * <pre>
   * true if user is analyzing dependencies
   * </pre>
   *
   * <code>optional bool including_dependencies = 8;</code>
   * @return Whether the includingDependencies field is set.
   */
  boolean hasIncludingDependencies();
  /**
   * <pre>
   * true if user is analyzing dependencies
   * </pre>
   *
   * <code>optional bool including_dependencies = 8;</code>
   * @return The includingDependencies.
   */
  boolean getIncludingDependencies();

  /**
   * <pre>
   * true if the build is configured to abort on error
   * </pre>
   *
   * <code>optional bool abort_on_error = 9;</code>
   * @return Whether the abortOnError field is set.
   */
  boolean hasAbortOnError();
  /**
   * <pre>
   * true if the build is configured to abort on error
   * </pre>
   *
   * <code>optional bool abort_on_error = 9;</code>
   * @return The abortOnError.
   */
  boolean getAbortOnError();

  /**
   * <pre>
   * true if the build is configured to only check errors, not warnings
   * </pre>
   *
   * <code>optional bool ignore_warnings = 10;</code>
   * @return Whether the ignoreWarnings field is set.
   */
  boolean hasIgnoreWarnings();
  /**
   * <pre>
   * true if the build is configured to only check errors, not warnings
   * </pre>
   *
   * <code>optional bool ignore_warnings = 10;</code>
   * @return The ignoreWarnings.
   */
  boolean getIgnoreWarnings();

  /**
   * <pre>
   * true if the build is configured to promote all warnings to errors
   * </pre>
   *
   * <code>optional bool warnings_as_errors = 11;</code>
   * @return Whether the warningsAsErrors field is set.
   */
  boolean hasWarningsAsErrors();
  /**
   * <pre>
   * true if the build is configured to promote all warnings to errors
   * </pre>
   *
   * <code>optional bool warnings_as_errors = 11;</code>
   * @return The warningsAsErrors.
   */
  boolean getWarningsAsErrors();
}
