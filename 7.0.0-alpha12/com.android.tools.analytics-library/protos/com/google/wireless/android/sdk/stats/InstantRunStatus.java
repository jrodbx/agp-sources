// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * Protobuf type {@code android_studio.InstantRunStatus}
 */
public  final class InstantRunStatus extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.InstantRunStatus)
    InstantRunStatusOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InstantRunStatus.newBuilder() to construct.
  private InstantRunStatus(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InstantRunStatus() {
    buildMode_ = 0;
    patchingPolicy_ = 0;
    verifierStatus_ = 0;
    artifact_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InstantRunStatus();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InstantRunStatus(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode value = com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              bitField0_ |= 0x00000001;
              buildMode_ = rawValue;
            }
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy value = com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              patchingPolicy_ = rawValue;
            }
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus value = com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(3, rawValue);
            } else {
              bitField0_ |= 0x00000004;
              verifierStatus_ = rawValue;
            }
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              artifact_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.InstantRunArtifact>();
              mutable_bitField0_ |= 0x00000008;
            }
            artifact_.add(
                input.readMessage(com.google.wireless.android.sdk.stats.InstantRunArtifact.PARSER, extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        artifact_ = java.util.Collections.unmodifiableList(artifact_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_InstantRunStatus_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_InstantRunStatus_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.InstantRunStatus.class, com.google.wireless.android.sdk.stats.InstantRunStatus.Builder.class);
  }

  /**
   * Protobuf enum {@code android_studio.InstantRunStatus.BuildMode}
   */
  public enum BuildMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_BUILD_MODE = 0;</code>
     */
    UNKNOWN_BUILD_MODE(0),
    /**
     * <code>HOT_WARM = 1;</code>
     */
    HOT_WARM(1),
    /**
     * <code>COLD = 2;</code>
     */
    COLD(2),
    /**
     * <code>FULL = 3;</code>
     */
    FULL(3),
    ;

    /**
     * <code>UNKNOWN_BUILD_MODE = 0;</code>
     */
    public static final int UNKNOWN_BUILD_MODE_VALUE = 0;
    /**
     * <code>HOT_WARM = 1;</code>
     */
    public static final int HOT_WARM_VALUE = 1;
    /**
     * <code>COLD = 2;</code>
     */
    public static final int COLD_VALUE = 2;
    /**
     * <code>FULL = 3;</code>
     */
    public static final int FULL_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BuildMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BuildMode forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_BUILD_MODE;
        case 1: return HOT_WARM;
        case 2: return COLD;
        case 3: return FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BuildMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BuildMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BuildMode>() {
            public BuildMode findValueByNumber(int number) {
              return BuildMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.InstantRunStatus.getDescriptor().getEnumTypes().get(0);
    }

    private static final BuildMode[] VALUES = values();

    public static BuildMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BuildMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.InstantRunStatus.BuildMode)
  }

  /**
   * Protobuf enum {@code android_studio.InstantRunStatus.PatchingPolicy}
   */
  public enum PatchingPolicy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_PATCHING_POLICY = 0;</code>
     */
    UNKNOWN_PATCHING_POLICY(0),
    /**
     * <pre>
     * No Cold swap is possible
     * </pre>
     *
     * <code>PRE_LOLLIPOP = 1;</code>
     */
    PRE_LOLLIPOP(1),
    /**
     * <pre>
     * Cold swap done by shipping dex classes to the Instant Run runtime
     * </pre>
     *
     * <code>MULTI_DEX = 2;</code>
     */
    MULTI_DEX(2),
    /**
     * <pre>
     * Cold swap done by reinstalling APK splits.
     * </pre>
     *
     * <code>MULTI_APK = 3;</code>
     */
    MULTI_APK(3),
    /**
     * <pre>
     * Cold swap done by reinstalling APK splits, resources in separate APK.
     * </pre>
     *
     * <code>MULTI_APK_SEPARATE_RESOURCES = 4;</code>
     */
    MULTI_APK_SEPARATE_RESOURCES(4),
    ;

    /**
     * <code>UNKNOWN_PATCHING_POLICY = 0;</code>
     */
    public static final int UNKNOWN_PATCHING_POLICY_VALUE = 0;
    /**
     * <pre>
     * No Cold swap is possible
     * </pre>
     *
     * <code>PRE_LOLLIPOP = 1;</code>
     */
    public static final int PRE_LOLLIPOP_VALUE = 1;
    /**
     * <pre>
     * Cold swap done by shipping dex classes to the Instant Run runtime
     * </pre>
     *
     * <code>MULTI_DEX = 2;</code>
     */
    public static final int MULTI_DEX_VALUE = 2;
    /**
     * <pre>
     * Cold swap done by reinstalling APK splits.
     * </pre>
     *
     * <code>MULTI_APK = 3;</code>
     */
    public static final int MULTI_APK_VALUE = 3;
    /**
     * <pre>
     * Cold swap done by reinstalling APK splits, resources in separate APK.
     * </pre>
     *
     * <code>MULTI_APK_SEPARATE_RESOURCES = 4;</code>
     */
    public static final int MULTI_APK_SEPARATE_RESOURCES_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PatchingPolicy valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PatchingPolicy forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_PATCHING_POLICY;
        case 1: return PRE_LOLLIPOP;
        case 2: return MULTI_DEX;
        case 3: return MULTI_APK;
        case 4: return MULTI_APK_SEPARATE_RESOURCES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PatchingPolicy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PatchingPolicy> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PatchingPolicy>() {
            public PatchingPolicy findValueByNumber(int number) {
              return PatchingPolicy.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.InstantRunStatus.getDescriptor().getEnumTypes().get(1);
    }

    private static final PatchingPolicy[] VALUES = values();

    public static PatchingPolicy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PatchingPolicy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.InstantRunStatus.PatchingPolicy)
  }

  /**
   * Protobuf enum {@code android_studio.InstantRunStatus.VerifierStatus}
   */
  public enum VerifierStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_VERIFIER_STATUS = 0;</code>
     */
    UNKNOWN_VERIFIER_STATUS(0),
    /**
     * <code>COMPATIBLE = 1;</code>
     */
    COMPATIBLE(1),
    /**
     * <pre>
     * the verifier did not run successfully.
     * </pre>
     *
     * <code>NOT_RUN = 2;</code>
     */
    NOT_RUN(2),
    /**
     * <pre>
     * InstantRun disabled on element like a method, class or package.
     * </pre>
     *
     * <code>INSTANT_RUN_DISABLED = 3;</code>
     */
    INSTANT_RUN_DISABLED(3),
    /**
     * <pre>
     * Any inability to run the verifier on a file will be tagged as such
     * </pre>
     *
     * <code>INSTANT_RUN_FAILURE = 4;</code>
     */
    INSTANT_RUN_FAILURE(4),
    /**
     * <pre>
     * A new class was added.
     * </pre>
     *
     * <code>CLASS_ADDED = 5;</code>
     */
    CLASS_ADDED(5),
    /**
     * <pre>
     * changes in the hierarchy
     * </pre>
     *
     * <code>PARENT_CLASS_CHANGED = 6;</code>
     */
    PARENT_CLASS_CHANGED(6),
    /**
     * <code>IMPLEMENTED_INTERFACES_CHANGE = 7;</code>
     */
    IMPLEMENTED_INTERFACES_CHANGE(7),
    /**
     * <pre>
     * class related changes.
     * </pre>
     *
     * <code>CLASS_ANNOTATION_CHANGE = 8;</code>
     */
    CLASS_ANNOTATION_CHANGE(8),
    /**
     * <code>STATIC_INITIALIZER_CHANGE = 9;</code>
     */
    STATIC_INITIALIZER_CHANGE(9),
    /**
     * <pre>
     * changes in constructors,
     * </pre>
     *
     * <code>CONSTRUCTOR_SIGNATURE_CHANGE = 10;</code>
     */
    CONSTRUCTOR_SIGNATURE_CHANGE(10),
    /**
     * <pre>
     * changes in method
     * </pre>
     *
     * <code>METHOD_SIGNATURE_CHANGE = 11;</code>
     */
    METHOD_SIGNATURE_CHANGE(11),
    /**
     * <code>METHOD_ANNOTATION_CHANGE = 12;</code>
     */
    METHOD_ANNOTATION_CHANGE(12),
    /**
     * <code>METHOD_DELETED = 13;</code>
     */
    METHOD_DELETED(13),
    /**
     * <code>METHOD_ADDED = 14;</code>
     */
    METHOD_ADDED(14),
    /**
     * <pre>
     * changes in fields.
     * </pre>
     *
     * <code>FIELD_ADDED = 15;</code>
     */
    FIELD_ADDED(15),
    /**
     * <code>FIELD_REMOVED = 16;</code>
     */
    FIELD_REMOVED(16),
    /**
     * <pre>
     * change of field type or kind (static | instance)
     * </pre>
     *
     * <code>FIELD_TYPE_CHANGE = 17;</code>
     */
    FIELD_TYPE_CHANGE(17),
    /**
     * <code>R_CLASS_CHANGE = 18;</code>
     */
    R_CLASS_CHANGE(18),
    /**
     * <pre>
     * reflection use
     * </pre>
     *
     * <code>REFLECTION_USED = 19;</code>
     */
    REFLECTION_USED(19),
    /**
     * <code>JAVA_RESOURCES_CHANGED = 20;</code>
     */
    JAVA_RESOURCES_CHANGED(20),
    /**
     * <code>DEPENDENCY_CHANGED = 21;</code>
     */
    DEPENDENCY_CHANGED(21),
    /**
     * <code>MANIFEST_FILE_CHANGE = 22;</code>
     */
    MANIFEST_FILE_CHANGE(22),
    /**
     * <pre>
     * the binary manifest file changed, probably due to references to resources
     * which ID changed since last build.
     * </pre>
     *
     * <code>BINARY_MANIFEST_FILE_CHANGE = 23;</code>
     */
    BINARY_MANIFEST_FILE_CHANGE(23),
    /**
     * <code>COLD_SWAP_REQUESTED = 24;</code>
     */
    COLD_SWAP_REQUESTED(24),
    /**
     * <code>FULL_BUILD_REQUESTED = 25;</code>
     */
    FULL_BUILD_REQUESTED(25),
    /**
     * <code>INITIAL_BUILD = 26;</code>
     */
    INITIAL_BUILD(26),
    /**
     * <code>NO_CHANGES = 27;</code>
     */
    NO_CHANGES(27),
    /**
     * <code>CHANGE_IN_SERIALIZABLE_CLASS_WITHOUT_VERSION_UID = 28;</code>
     */
    CHANGE_IN_SERIALIZABLE_CLASS_WITHOUT_VERSION_UID(28),
    /**
     * <code>BUILD_NOT_INCREMENTAL = 29;</code>
     */
    BUILD_NOT_INCREMENTAL(29),
    /**
     * <pre>
     * abstract method became implemented | method with code became abstract.
     * </pre>
     *
     * <code>ABSTRACT_METHOD_CHANGE = 30;</code>
     */
    ABSTRACT_METHOD_CHANGE(30),
    /**
     * <pre>
     * a synthetic constructor was changed.
     * </pre>
     *
     * <code>SYNTHETIC_CONSTRUCTOR_CHANGE = 31;</code>
     */
    SYNTHETIC_CONSTRUCTOR_CHANGE(31),
    ;

    /**
     * <code>UNKNOWN_VERIFIER_STATUS = 0;</code>
     */
    public static final int UNKNOWN_VERIFIER_STATUS_VALUE = 0;
    /**
     * <code>COMPATIBLE = 1;</code>
     */
    public static final int COMPATIBLE_VALUE = 1;
    /**
     * <pre>
     * the verifier did not run successfully.
     * </pre>
     *
     * <code>NOT_RUN = 2;</code>
     */
    public static final int NOT_RUN_VALUE = 2;
    /**
     * <pre>
     * InstantRun disabled on element like a method, class or package.
     * </pre>
     *
     * <code>INSTANT_RUN_DISABLED = 3;</code>
     */
    public static final int INSTANT_RUN_DISABLED_VALUE = 3;
    /**
     * <pre>
     * Any inability to run the verifier on a file will be tagged as such
     * </pre>
     *
     * <code>INSTANT_RUN_FAILURE = 4;</code>
     */
    public static final int INSTANT_RUN_FAILURE_VALUE = 4;
    /**
     * <pre>
     * A new class was added.
     * </pre>
     *
     * <code>CLASS_ADDED = 5;</code>
     */
    public static final int CLASS_ADDED_VALUE = 5;
    /**
     * <pre>
     * changes in the hierarchy
     * </pre>
     *
     * <code>PARENT_CLASS_CHANGED = 6;</code>
     */
    public static final int PARENT_CLASS_CHANGED_VALUE = 6;
    /**
     * <code>IMPLEMENTED_INTERFACES_CHANGE = 7;</code>
     */
    public static final int IMPLEMENTED_INTERFACES_CHANGE_VALUE = 7;
    /**
     * <pre>
     * class related changes.
     * </pre>
     *
     * <code>CLASS_ANNOTATION_CHANGE = 8;</code>
     */
    public static final int CLASS_ANNOTATION_CHANGE_VALUE = 8;
    /**
     * <code>STATIC_INITIALIZER_CHANGE = 9;</code>
     */
    public static final int STATIC_INITIALIZER_CHANGE_VALUE = 9;
    /**
     * <pre>
     * changes in constructors,
     * </pre>
     *
     * <code>CONSTRUCTOR_SIGNATURE_CHANGE = 10;</code>
     */
    public static final int CONSTRUCTOR_SIGNATURE_CHANGE_VALUE = 10;
    /**
     * <pre>
     * changes in method
     * </pre>
     *
     * <code>METHOD_SIGNATURE_CHANGE = 11;</code>
     */
    public static final int METHOD_SIGNATURE_CHANGE_VALUE = 11;
    /**
     * <code>METHOD_ANNOTATION_CHANGE = 12;</code>
     */
    public static final int METHOD_ANNOTATION_CHANGE_VALUE = 12;
    /**
     * <code>METHOD_DELETED = 13;</code>
     */
    public static final int METHOD_DELETED_VALUE = 13;
    /**
     * <code>METHOD_ADDED = 14;</code>
     */
    public static final int METHOD_ADDED_VALUE = 14;
    /**
     * <pre>
     * changes in fields.
     * </pre>
     *
     * <code>FIELD_ADDED = 15;</code>
     */
    public static final int FIELD_ADDED_VALUE = 15;
    /**
     * <code>FIELD_REMOVED = 16;</code>
     */
    public static final int FIELD_REMOVED_VALUE = 16;
    /**
     * <pre>
     * change of field type or kind (static | instance)
     * </pre>
     *
     * <code>FIELD_TYPE_CHANGE = 17;</code>
     */
    public static final int FIELD_TYPE_CHANGE_VALUE = 17;
    /**
     * <code>R_CLASS_CHANGE = 18;</code>
     */
    public static final int R_CLASS_CHANGE_VALUE = 18;
    /**
     * <pre>
     * reflection use
     * </pre>
     *
     * <code>REFLECTION_USED = 19;</code>
     */
    public static final int REFLECTION_USED_VALUE = 19;
    /**
     * <code>JAVA_RESOURCES_CHANGED = 20;</code>
     */
    public static final int JAVA_RESOURCES_CHANGED_VALUE = 20;
    /**
     * <code>DEPENDENCY_CHANGED = 21;</code>
     */
    public static final int DEPENDENCY_CHANGED_VALUE = 21;
    /**
     * <code>MANIFEST_FILE_CHANGE = 22;</code>
     */
    public static final int MANIFEST_FILE_CHANGE_VALUE = 22;
    /**
     * <pre>
     * the binary manifest file changed, probably due to references to resources
     * which ID changed since last build.
     * </pre>
     *
     * <code>BINARY_MANIFEST_FILE_CHANGE = 23;</code>
     */
    public static final int BINARY_MANIFEST_FILE_CHANGE_VALUE = 23;
    /**
     * <code>COLD_SWAP_REQUESTED = 24;</code>
     */
    public static final int COLD_SWAP_REQUESTED_VALUE = 24;
    /**
     * <code>FULL_BUILD_REQUESTED = 25;</code>
     */
    public static final int FULL_BUILD_REQUESTED_VALUE = 25;
    /**
     * <code>INITIAL_BUILD = 26;</code>
     */
    public static final int INITIAL_BUILD_VALUE = 26;
    /**
     * <code>NO_CHANGES = 27;</code>
     */
    public static final int NO_CHANGES_VALUE = 27;
    /**
     * <code>CHANGE_IN_SERIALIZABLE_CLASS_WITHOUT_VERSION_UID = 28;</code>
     */
    public static final int CHANGE_IN_SERIALIZABLE_CLASS_WITHOUT_VERSION_UID_VALUE = 28;
    /**
     * <code>BUILD_NOT_INCREMENTAL = 29;</code>
     */
    public static final int BUILD_NOT_INCREMENTAL_VALUE = 29;
    /**
     * <pre>
     * abstract method became implemented | method with code became abstract.
     * </pre>
     *
     * <code>ABSTRACT_METHOD_CHANGE = 30;</code>
     */
    public static final int ABSTRACT_METHOD_CHANGE_VALUE = 30;
    /**
     * <pre>
     * a synthetic constructor was changed.
     * </pre>
     *
     * <code>SYNTHETIC_CONSTRUCTOR_CHANGE = 31;</code>
     */
    public static final int SYNTHETIC_CONSTRUCTOR_CHANGE_VALUE = 31;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VerifierStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static VerifierStatus forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_VERIFIER_STATUS;
        case 1: return COMPATIBLE;
        case 2: return NOT_RUN;
        case 3: return INSTANT_RUN_DISABLED;
        case 4: return INSTANT_RUN_FAILURE;
        case 5: return CLASS_ADDED;
        case 6: return PARENT_CLASS_CHANGED;
        case 7: return IMPLEMENTED_INTERFACES_CHANGE;
        case 8: return CLASS_ANNOTATION_CHANGE;
        case 9: return STATIC_INITIALIZER_CHANGE;
        case 10: return CONSTRUCTOR_SIGNATURE_CHANGE;
        case 11: return METHOD_SIGNATURE_CHANGE;
        case 12: return METHOD_ANNOTATION_CHANGE;
        case 13: return METHOD_DELETED;
        case 14: return METHOD_ADDED;
        case 15: return FIELD_ADDED;
        case 16: return FIELD_REMOVED;
        case 17: return FIELD_TYPE_CHANGE;
        case 18: return R_CLASS_CHANGE;
        case 19: return REFLECTION_USED;
        case 20: return JAVA_RESOURCES_CHANGED;
        case 21: return DEPENDENCY_CHANGED;
        case 22: return MANIFEST_FILE_CHANGE;
        case 23: return BINARY_MANIFEST_FILE_CHANGE;
        case 24: return COLD_SWAP_REQUESTED;
        case 25: return FULL_BUILD_REQUESTED;
        case 26: return INITIAL_BUILD;
        case 27: return NO_CHANGES;
        case 28: return CHANGE_IN_SERIALIZABLE_CLASS_WITHOUT_VERSION_UID;
        case 29: return BUILD_NOT_INCREMENTAL;
        case 30: return ABSTRACT_METHOD_CHANGE;
        case 31: return SYNTHETIC_CONSTRUCTOR_CHANGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<VerifierStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        VerifierStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<VerifierStatus>() {
            public VerifierStatus findValueByNumber(int number) {
              return VerifierStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.InstantRunStatus.getDescriptor().getEnumTypes().get(2);
    }

    private static final VerifierStatus[] VALUES = values();

    public static VerifierStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private VerifierStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.InstantRunStatus.VerifierStatus)
  }

  private int bitField0_;
  public static final int BUILD_MODE_FIELD_NUMBER = 1;
  private int buildMode_;
  /**
   * <pre>
   * The type of artifacts built in this invocation.
   * e.g. COLD for when the changes cannot be hot-swapped, either due to the
   * app not running on the users device or the changes cannot be hot swapped.
   * </pre>
   *
   * <code>optional .android_studio.InstantRunStatus.BuildMode build_mode = 1;</code>
   * @return Whether the buildMode field is set.
   */
  public boolean hasBuildMode() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The type of artifacts built in this invocation.
   * e.g. COLD for when the changes cannot be hot-swapped, either due to the
   * app not running on the users device or the changes cannot be hot swapped.
   * </pre>
   *
   * <code>optional .android_studio.InstantRunStatus.BuildMode build_mode = 1;</code>
   * @return The buildMode.
   */
  public com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode getBuildMode() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode result = com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode.valueOf(buildMode_);
    return result == null ? com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode.UNKNOWN_BUILD_MODE : result;
  }

  public static final int PATCHING_POLICY_FIELD_NUMBER = 2;
  private int patchingPolicy_;
  /**
   * <pre>
   * The type of deploy that the build can generate artifacts for.
   * </pre>
   *
   * <code>optional .android_studio.InstantRunStatus.PatchingPolicy patching_policy = 2;</code>
   * @return Whether the patchingPolicy field is set.
   */
  public boolean hasPatchingPolicy() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The type of deploy that the build can generate artifacts for.
   * </pre>
   *
   * <code>optional .android_studio.InstantRunStatus.PatchingPolicy patching_policy = 2;</code>
   * @return The patchingPolicy.
   */
  public com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy getPatchingPolicy() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy result = com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy.valueOf(patchingPolicy_);
    return result == null ? com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy.UNKNOWN_PATCHING_POLICY : result;
  }

  public static final int VERIFIER_STATUS_FIELD_NUMBER = 3;
  private int verifierStatus_;
  /**
   * <pre>
   * The result of the verifier run, whether the users change can be hot-swapped
   * or requires a cold swap or full build is determined by the verifier.
   * </pre>
   *
   * <code>optional .android_studio.InstantRunStatus.VerifierStatus verifier_status = 3;</code>
   * @return Whether the verifierStatus field is set.
   */
  public boolean hasVerifierStatus() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The result of the verifier run, whether the users change can be hot-swapped
   * or requires a cold swap or full build is determined by the verifier.
   * </pre>
   *
   * <code>optional .android_studio.InstantRunStatus.VerifierStatus verifier_status = 3;</code>
   * @return The verifierStatus.
   */
  public com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus getVerifierStatus() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus result = com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus.valueOf(verifierStatus_);
    return result == null ? com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus.UNKNOWN_VERIFIER_STATUS : result;
  }

  public static final int ARTIFACT_FIELD_NUMBER = 4;
  private java.util.List<com.google.wireless.android.sdk.stats.InstantRunArtifact> artifact_;
  /**
   * <pre>
   * The built artifacts stored in the build info.
   * Artifacts that were built, but superseeded (e.g. a main APK contains
   * resources, so the resources do not need to be reported separately) are
   * not included.
   * </pre>
   *
   * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
   */
  public java.util.List<com.google.wireless.android.sdk.stats.InstantRunArtifact> getArtifactList() {
    return artifact_;
  }
  /**
   * <pre>
   * The built artifacts stored in the build info.
   * Artifacts that were built, but superseeded (e.g. a main APK contains
   * resources, so the resources do not need to be reported separately) are
   * not included.
   * </pre>
   *
   * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
   */
  public java.util.List<? extends com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder>
      getArtifactOrBuilderList() {
    return artifact_;
  }
  /**
   * <pre>
   * The built artifacts stored in the build info.
   * Artifacts that were built, but superseeded (e.g. a main APK contains
   * resources, so the resources do not need to be reported separately) are
   * not included.
   * </pre>
   *
   * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
   */
  public int getArtifactCount() {
    return artifact_.size();
  }
  /**
   * <pre>
   * The built artifacts stored in the build info.
   * Artifacts that were built, but superseeded (e.g. a main APK contains
   * resources, so the resources do not need to be reported separately) are
   * not included.
   * </pre>
   *
   * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
   */
  public com.google.wireless.android.sdk.stats.InstantRunArtifact getArtifact(int index) {
    return artifact_.get(index);
  }
  /**
   * <pre>
   * The built artifacts stored in the build info.
   * Artifacts that were built, but superseeded (e.g. a main APK contains
   * resources, so the resources do not need to be reported separately) are
   * not included.
   * </pre>
   *
   * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
   */
  public com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder getArtifactOrBuilder(
      int index) {
    return artifact_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, buildMode_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeEnum(2, patchingPolicy_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeEnum(3, verifierStatus_);
    }
    for (int i = 0; i < artifact_.size(); i++) {
      output.writeMessage(4, artifact_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, buildMode_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, patchingPolicy_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, verifierStatus_);
    }
    for (int i = 0; i < artifact_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, artifact_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.InstantRunStatus)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.InstantRunStatus other = (com.google.wireless.android.sdk.stats.InstantRunStatus) obj;

    if (hasBuildMode() != other.hasBuildMode()) return false;
    if (hasBuildMode()) {
      if (buildMode_ != other.buildMode_) return false;
    }
    if (hasPatchingPolicy() != other.hasPatchingPolicy()) return false;
    if (hasPatchingPolicy()) {
      if (patchingPolicy_ != other.patchingPolicy_) return false;
    }
    if (hasVerifierStatus() != other.hasVerifierStatus()) return false;
    if (hasVerifierStatus()) {
      if (verifierStatus_ != other.verifierStatus_) return false;
    }
    if (!getArtifactList()
        .equals(other.getArtifactList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasBuildMode()) {
      hash = (37 * hash) + BUILD_MODE_FIELD_NUMBER;
      hash = (53 * hash) + buildMode_;
    }
    if (hasPatchingPolicy()) {
      hash = (37 * hash) + PATCHING_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + patchingPolicy_;
    }
    if (hasVerifierStatus()) {
      hash = (37 * hash) + VERIFIER_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + verifierStatus_;
    }
    if (getArtifactCount() > 0) {
      hash = (37 * hash) + ARTIFACT_FIELD_NUMBER;
      hash = (53 * hash) + getArtifactList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.InstantRunStatus parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.InstantRunStatus prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code android_studio.InstantRunStatus}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.InstantRunStatus)
      com.google.wireless.android.sdk.stats.InstantRunStatusOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_InstantRunStatus_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_InstantRunStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.InstantRunStatus.class, com.google.wireless.android.sdk.stats.InstantRunStatus.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.InstantRunStatus.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getArtifactFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      buildMode_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      patchingPolicy_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      verifierStatus_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      if (artifactBuilder_ == null) {
        artifact_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        artifactBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_InstantRunStatus_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.InstantRunStatus getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.InstantRunStatus.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.InstantRunStatus build() {
      com.google.wireless.android.sdk.stats.InstantRunStatus result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.InstantRunStatus buildPartial() {
      com.google.wireless.android.sdk.stats.InstantRunStatus result = new com.google.wireless.android.sdk.stats.InstantRunStatus(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.buildMode_ = buildMode_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        to_bitField0_ |= 0x00000002;
      }
      result.patchingPolicy_ = patchingPolicy_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        to_bitField0_ |= 0x00000004;
      }
      result.verifierStatus_ = verifierStatus_;
      if (artifactBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          artifact_ = java.util.Collections.unmodifiableList(artifact_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.artifact_ = artifact_;
      } else {
        result.artifact_ = artifactBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.InstantRunStatus) {
        return mergeFrom((com.google.wireless.android.sdk.stats.InstantRunStatus)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.InstantRunStatus other) {
      if (other == com.google.wireless.android.sdk.stats.InstantRunStatus.getDefaultInstance()) return this;
      if (other.hasBuildMode()) {
        setBuildMode(other.getBuildMode());
      }
      if (other.hasPatchingPolicy()) {
        setPatchingPolicy(other.getPatchingPolicy());
      }
      if (other.hasVerifierStatus()) {
        setVerifierStatus(other.getVerifierStatus());
      }
      if (artifactBuilder_ == null) {
        if (!other.artifact_.isEmpty()) {
          if (artifact_.isEmpty()) {
            artifact_ = other.artifact_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureArtifactIsMutable();
            artifact_.addAll(other.artifact_);
          }
          onChanged();
        }
      } else {
        if (!other.artifact_.isEmpty()) {
          if (artifactBuilder_.isEmpty()) {
            artifactBuilder_.dispose();
            artifactBuilder_ = null;
            artifact_ = other.artifact_;
            bitField0_ = (bitField0_ & ~0x00000008);
            artifactBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getArtifactFieldBuilder() : null;
          } else {
            artifactBuilder_.addAllMessages(other.artifact_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.wireless.android.sdk.stats.InstantRunStatus parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.wireless.android.sdk.stats.InstantRunStatus) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int buildMode_ = 0;
    /**
     * <pre>
     * The type of artifacts built in this invocation.
     * e.g. COLD for when the changes cannot be hot-swapped, either due to the
     * app not running on the users device or the changes cannot be hot swapped.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.BuildMode build_mode = 1;</code>
     * @return Whether the buildMode field is set.
     */
    public boolean hasBuildMode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The type of artifacts built in this invocation.
     * e.g. COLD for when the changes cannot be hot-swapped, either due to the
     * app not running on the users device or the changes cannot be hot swapped.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.BuildMode build_mode = 1;</code>
     * @return The buildMode.
     */
    public com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode getBuildMode() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode result = com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode.valueOf(buildMode_);
      return result == null ? com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode.UNKNOWN_BUILD_MODE : result;
    }
    /**
     * <pre>
     * The type of artifacts built in this invocation.
     * e.g. COLD for when the changes cannot be hot-swapped, either due to the
     * app not running on the users device or the changes cannot be hot swapped.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.BuildMode build_mode = 1;</code>
     * @param value The buildMode to set.
     * @return This builder for chaining.
     */
    public Builder setBuildMode(com.google.wireless.android.sdk.stats.InstantRunStatus.BuildMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      buildMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of artifacts built in this invocation.
     * e.g. COLD for when the changes cannot be hot-swapped, either due to the
     * app not running on the users device or the changes cannot be hot swapped.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.BuildMode build_mode = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearBuildMode() {
      bitField0_ = (bitField0_ & ~0x00000001);
      buildMode_ = 0;
      onChanged();
      return this;
    }

    private int patchingPolicy_ = 0;
    /**
     * <pre>
     * The type of deploy that the build can generate artifacts for.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.PatchingPolicy patching_policy = 2;</code>
     * @return Whether the patchingPolicy field is set.
     */
    public boolean hasPatchingPolicy() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The type of deploy that the build can generate artifacts for.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.PatchingPolicy patching_policy = 2;</code>
     * @return The patchingPolicy.
     */
    public com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy getPatchingPolicy() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy result = com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy.valueOf(patchingPolicy_);
      return result == null ? com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy.UNKNOWN_PATCHING_POLICY : result;
    }
    /**
     * <pre>
     * The type of deploy that the build can generate artifacts for.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.PatchingPolicy patching_policy = 2;</code>
     * @param value The patchingPolicy to set.
     * @return This builder for chaining.
     */
    public Builder setPatchingPolicy(com.google.wireless.android.sdk.stats.InstantRunStatus.PatchingPolicy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      patchingPolicy_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of deploy that the build can generate artifacts for.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.PatchingPolicy patching_policy = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPatchingPolicy() {
      bitField0_ = (bitField0_ & ~0x00000002);
      patchingPolicy_ = 0;
      onChanged();
      return this;
    }

    private int verifierStatus_ = 0;
    /**
     * <pre>
     * The result of the verifier run, whether the users change can be hot-swapped
     * or requires a cold swap or full build is determined by the verifier.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.VerifierStatus verifier_status = 3;</code>
     * @return Whether the verifierStatus field is set.
     */
    public boolean hasVerifierStatus() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The result of the verifier run, whether the users change can be hot-swapped
     * or requires a cold swap or full build is determined by the verifier.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.VerifierStatus verifier_status = 3;</code>
     * @return The verifierStatus.
     */
    public com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus getVerifierStatus() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus result = com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus.valueOf(verifierStatus_);
      return result == null ? com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus.UNKNOWN_VERIFIER_STATUS : result;
    }
    /**
     * <pre>
     * The result of the verifier run, whether the users change can be hot-swapped
     * or requires a cold swap or full build is determined by the verifier.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.VerifierStatus verifier_status = 3;</code>
     * @param value The verifierStatus to set.
     * @return This builder for chaining.
     */
    public Builder setVerifierStatus(com.google.wireless.android.sdk.stats.InstantRunStatus.VerifierStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      verifierStatus_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The result of the verifier run, whether the users change can be hot-swapped
     * or requires a cold swap or full build is determined by the verifier.
     * </pre>
     *
     * <code>optional .android_studio.InstantRunStatus.VerifierStatus verifier_status = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearVerifierStatus() {
      bitField0_ = (bitField0_ & ~0x00000004);
      verifierStatus_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.google.wireless.android.sdk.stats.InstantRunArtifact> artifact_ =
      java.util.Collections.emptyList();
    private void ensureArtifactIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        artifact_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.InstantRunArtifact>(artifact_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.InstantRunArtifact, com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder, com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder> artifactBuilder_;

    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.InstantRunArtifact> getArtifactList() {
      if (artifactBuilder_ == null) {
        return java.util.Collections.unmodifiableList(artifact_);
      } else {
        return artifactBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public int getArtifactCount() {
      if (artifactBuilder_ == null) {
        return artifact_.size();
      } else {
        return artifactBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public com.google.wireless.android.sdk.stats.InstantRunArtifact getArtifact(int index) {
      if (artifactBuilder_ == null) {
        return artifact_.get(index);
      } else {
        return artifactBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder setArtifact(
        int index, com.google.wireless.android.sdk.stats.InstantRunArtifact value) {
      if (artifactBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArtifactIsMutable();
        artifact_.set(index, value);
        onChanged();
      } else {
        artifactBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder setArtifact(
        int index, com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder builderForValue) {
      if (artifactBuilder_ == null) {
        ensureArtifactIsMutable();
        artifact_.set(index, builderForValue.build());
        onChanged();
      } else {
        artifactBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder addArtifact(com.google.wireless.android.sdk.stats.InstantRunArtifact value) {
      if (artifactBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArtifactIsMutable();
        artifact_.add(value);
        onChanged();
      } else {
        artifactBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder addArtifact(
        int index, com.google.wireless.android.sdk.stats.InstantRunArtifact value) {
      if (artifactBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArtifactIsMutable();
        artifact_.add(index, value);
        onChanged();
      } else {
        artifactBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder addArtifact(
        com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder builderForValue) {
      if (artifactBuilder_ == null) {
        ensureArtifactIsMutable();
        artifact_.add(builderForValue.build());
        onChanged();
      } else {
        artifactBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder addArtifact(
        int index, com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder builderForValue) {
      if (artifactBuilder_ == null) {
        ensureArtifactIsMutable();
        artifact_.add(index, builderForValue.build());
        onChanged();
      } else {
        artifactBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder addAllArtifact(
        java.lang.Iterable<? extends com.google.wireless.android.sdk.stats.InstantRunArtifact> values) {
      if (artifactBuilder_ == null) {
        ensureArtifactIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, artifact_);
        onChanged();
      } else {
        artifactBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder clearArtifact() {
      if (artifactBuilder_ == null) {
        artifact_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        artifactBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public Builder removeArtifact(int index) {
      if (artifactBuilder_ == null) {
        ensureArtifactIsMutable();
        artifact_.remove(index);
        onChanged();
      } else {
        artifactBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder getArtifactBuilder(
        int index) {
      return getArtifactFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder getArtifactOrBuilder(
        int index) {
      if (artifactBuilder_ == null) {
        return artifact_.get(index);  } else {
        return artifactBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public java.util.List<? extends com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder>
         getArtifactOrBuilderList() {
      if (artifactBuilder_ != null) {
        return artifactBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(artifact_);
      }
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder addArtifactBuilder() {
      return getArtifactFieldBuilder().addBuilder(
          com.google.wireless.android.sdk.stats.InstantRunArtifact.getDefaultInstance());
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder addArtifactBuilder(
        int index) {
      return getArtifactFieldBuilder().addBuilder(
          index, com.google.wireless.android.sdk.stats.InstantRunArtifact.getDefaultInstance());
    }
    /**
     * <pre>
     * The built artifacts stored in the build info.
     * Artifacts that were built, but superseeded (e.g. a main APK contains
     * resources, so the resources do not need to be reported separately) are
     * not included.
     * </pre>
     *
     * <code>repeated .android_studio.InstantRunArtifact artifact = 4;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder>
         getArtifactBuilderList() {
      return getArtifactFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.InstantRunArtifact, com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder, com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder>
        getArtifactFieldBuilder() {
      if (artifactBuilder_ == null) {
        artifactBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.wireless.android.sdk.stats.InstantRunArtifact, com.google.wireless.android.sdk.stats.InstantRunArtifact.Builder, com.google.wireless.android.sdk.stats.InstantRunArtifactOrBuilder>(
                artifact_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        artifact_ = null;
      }
      return artifactBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.InstantRunStatus)
  }

  // @@protoc_insertion_point(class_scope:android_studio.InstantRunStatus)
  private static final com.google.wireless.android.sdk.stats.InstantRunStatus DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.InstantRunStatus();
  }

  public static com.google.wireless.android.sdk.stats.InstantRunStatus getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<InstantRunStatus>
      PARSER = new com.google.protobuf.AbstractParser<InstantRunStatus>() {
    @java.lang.Override
    public InstantRunStatus parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InstantRunStatus(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InstantRunStatus> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InstantRunStatus> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.InstantRunStatus getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

