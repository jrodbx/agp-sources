// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Data about configuration cache compatibility
 * </pre>
 *
 * Protobuf type {@code android_studio.ConfigurationCacheCompatibilityData}
 */
public  final class ConfigurationCacheCompatibilityData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.ConfigurationCacheCompatibilityData)
    ConfigurationCacheCompatibilityDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConfigurationCacheCompatibilityData.newBuilder() to construct.
  private ConfigurationCacheCompatibilityData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConfigurationCacheCompatibilityData() {
    compatibilityState_ = 0;
    incompatiblePlugins_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConfigurationCacheCompatibilityData();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConfigurationCacheCompatibilityData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState value = com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              bitField0_ |= 0x00000001;
              compatibilityState_ = rawValue;
            }
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              incompatiblePlugins_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier>();
              mutable_bitField0_ |= 0x00000002;
            }
            incompatiblePlugins_.add(
                input.readMessage(com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.PARSER, extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        incompatiblePlugins_ = java.util.Collections.unmodifiableList(incompatiblePlugins_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_ConfigurationCacheCompatibilityData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_ConfigurationCacheCompatibilityData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.class, com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.Builder.class);
  }

  /**
   * Protobuf enum {@code android_studio.ConfigurationCacheCompatibilityData.CompatibilityState}
   */
  public enum CompatibilityState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_STATE = 0;</code>
     */
    UNKNOWN_STATE(0),
    /**
     * <code>AGP_NOT_COMPATIBLE = 1;</code>
     */
    AGP_NOT_COMPATIBLE(1),
    /**
     * <code>AGP_DOES_NOT_PROVIDE_PLUGINS_DATA = 2;</code>
     */
    AGP_DOES_NOT_PROVIDE_PLUGINS_DATA(2),
    /**
     * <code>INCOMPATIBLE_PLUGINS_DETECTED = 3;</code>
     */
    INCOMPATIBLE_PLUGINS_DETECTED(3),
    /**
     * <code>INCOMPATIBLE_PLUGINS_NOT_DETECTED = 4;</code>
     */
    INCOMPATIBLE_PLUGINS_NOT_DETECTED(4),
    /**
     * <code>CONFIGURATION_CACHE_TURNED_ON = 5;</code>
     */
    CONFIGURATION_CACHE_TURNED_ON(5),
    ;

    /**
     * <code>UNKNOWN_STATE = 0;</code>
     */
    public static final int UNKNOWN_STATE_VALUE = 0;
    /**
     * <code>AGP_NOT_COMPATIBLE = 1;</code>
     */
    public static final int AGP_NOT_COMPATIBLE_VALUE = 1;
    /**
     * <code>AGP_DOES_NOT_PROVIDE_PLUGINS_DATA = 2;</code>
     */
    public static final int AGP_DOES_NOT_PROVIDE_PLUGINS_DATA_VALUE = 2;
    /**
     * <code>INCOMPATIBLE_PLUGINS_DETECTED = 3;</code>
     */
    public static final int INCOMPATIBLE_PLUGINS_DETECTED_VALUE = 3;
    /**
     * <code>INCOMPATIBLE_PLUGINS_NOT_DETECTED = 4;</code>
     */
    public static final int INCOMPATIBLE_PLUGINS_NOT_DETECTED_VALUE = 4;
    /**
     * <code>CONFIGURATION_CACHE_TURNED_ON = 5;</code>
     */
    public static final int CONFIGURATION_CACHE_TURNED_ON_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompatibilityState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompatibilityState forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_STATE;
        case 1: return AGP_NOT_COMPATIBLE;
        case 2: return AGP_DOES_NOT_PROVIDE_PLUGINS_DATA;
        case 3: return INCOMPATIBLE_PLUGINS_DETECTED;
        case 4: return INCOMPATIBLE_PLUGINS_NOT_DETECTED;
        case 5: return CONFIGURATION_CACHE_TURNED_ON;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompatibilityState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompatibilityState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompatibilityState>() {
            public CompatibilityState findValueByNumber(int number) {
              return CompatibilityState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompatibilityState[] VALUES = values();

    public static CompatibilityState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompatibilityState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.ConfigurationCacheCompatibilityData.CompatibilityState)
  }

  private int bitField0_;
  public static final int COMPATIBILITY_STATE_FIELD_NUMBER = 1;
  private int compatibilityState_;
  /**
   * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
   * @return Whether the compatibilityState field is set.
   */
  public boolean hasCompatibilityState() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
   * @return The compatibilityState.
   */
  public com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState getCompatibilityState() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState result = com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState.valueOf(compatibilityState_);
    return result == null ? com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState.UNKNOWN_STATE : result;
  }

  public static final int INCOMPATIBLE_PLUGINS_FIELD_NUMBER = 2;
  private java.util.List<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier> incompatiblePlugins_;
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  public java.util.List<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier> getIncompatiblePluginsList() {
    return incompatiblePlugins_;
  }
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  public java.util.List<? extends com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder>
      getIncompatiblePluginsOrBuilderList() {
    return incompatiblePlugins_;
  }
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  public int getIncompatiblePluginsCount() {
    return incompatiblePlugins_.size();
  }
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier getIncompatiblePlugins(int index) {
    return incompatiblePlugins_.get(index);
  }
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder getIncompatiblePluginsOrBuilder(
      int index) {
    return incompatiblePlugins_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, compatibilityState_);
    }
    for (int i = 0; i < incompatiblePlugins_.size(); i++) {
      output.writeMessage(2, incompatiblePlugins_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, compatibilityState_);
    }
    for (int i = 0; i < incompatiblePlugins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, incompatiblePlugins_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData other = (com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData) obj;

    if (hasCompatibilityState() != other.hasCompatibilityState()) return false;
    if (hasCompatibilityState()) {
      if (compatibilityState_ != other.compatibilityState_) return false;
    }
    if (!getIncompatiblePluginsList()
        .equals(other.getIncompatiblePluginsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCompatibilityState()) {
      hash = (37 * hash) + COMPATIBILITY_STATE_FIELD_NUMBER;
      hash = (53 * hash) + compatibilityState_;
    }
    if (getIncompatiblePluginsCount() > 0) {
      hash = (37 * hash) + INCOMPATIBLE_PLUGINS_FIELD_NUMBER;
      hash = (53 * hash) + getIncompatiblePluginsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Data about configuration cache compatibility
   * </pre>
   *
   * Protobuf type {@code android_studio.ConfigurationCacheCompatibilityData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.ConfigurationCacheCompatibilityData)
      com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_ConfigurationCacheCompatibilityData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_ConfigurationCacheCompatibilityData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.class, com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getIncompatiblePluginsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      compatibilityState_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (incompatiblePluginsBuilder_ == null) {
        incompatiblePlugins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        incompatiblePluginsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_ConfigurationCacheCompatibilityData_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData build() {
      com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData buildPartial() {
      com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData result = new com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.compatibilityState_ = compatibilityState_;
      if (incompatiblePluginsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          incompatiblePlugins_ = java.util.Collections.unmodifiableList(incompatiblePlugins_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.incompatiblePlugins_ = incompatiblePlugins_;
      } else {
        result.incompatiblePlugins_ = incompatiblePluginsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData) {
        return mergeFrom((com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData other) {
      if (other == com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.getDefaultInstance()) return this;
      if (other.hasCompatibilityState()) {
        setCompatibilityState(other.getCompatibilityState());
      }
      if (incompatiblePluginsBuilder_ == null) {
        if (!other.incompatiblePlugins_.isEmpty()) {
          if (incompatiblePlugins_.isEmpty()) {
            incompatiblePlugins_ = other.incompatiblePlugins_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureIncompatiblePluginsIsMutable();
            incompatiblePlugins_.addAll(other.incompatiblePlugins_);
          }
          onChanged();
        }
      } else {
        if (!other.incompatiblePlugins_.isEmpty()) {
          if (incompatiblePluginsBuilder_.isEmpty()) {
            incompatiblePluginsBuilder_.dispose();
            incompatiblePluginsBuilder_ = null;
            incompatiblePlugins_ = other.incompatiblePlugins_;
            bitField0_ = (bitField0_ & ~0x00000002);
            incompatiblePluginsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getIncompatiblePluginsFieldBuilder() : null;
          } else {
            incompatiblePluginsBuilder_.addAllMessages(other.incompatiblePlugins_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int compatibilityState_ = 0;
    /**
     * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
     * @return Whether the compatibilityState field is set.
     */
    public boolean hasCompatibilityState() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
     * @return The compatibilityState.
     */
    public com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState getCompatibilityState() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState result = com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState.valueOf(compatibilityState_);
      return result == null ? com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState.UNKNOWN_STATE : result;
    }
    /**
     * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
     * @param value The compatibilityState to set.
     * @return This builder for chaining.
     */
    public Builder setCompatibilityState(com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      compatibilityState_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCompatibilityState() {
      bitField0_ = (bitField0_ & ~0x00000001);
      compatibilityState_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier> incompatiblePlugins_ =
      java.util.Collections.emptyList();
    private void ensureIncompatiblePluginsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        incompatiblePlugins_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier>(incompatiblePlugins_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder> incompatiblePluginsBuilder_;

    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier> getIncompatiblePluginsList() {
      if (incompatiblePluginsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(incompatiblePlugins_);
      } else {
        return incompatiblePluginsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public int getIncompatiblePluginsCount() {
      if (incompatiblePluginsBuilder_ == null) {
        return incompatiblePlugins_.size();
      } else {
        return incompatiblePluginsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier getIncompatiblePlugins(int index) {
      if (incompatiblePluginsBuilder_ == null) {
        return incompatiblePlugins_.get(index);
      } else {
        return incompatiblePluginsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder setIncompatiblePlugins(
        int index, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier value) {
      if (incompatiblePluginsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.set(index, value);
        onChanged();
      } else {
        incompatiblePluginsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder setIncompatiblePlugins(
        int index, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder builderForValue) {
      if (incompatiblePluginsBuilder_ == null) {
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.set(index, builderForValue.build());
        onChanged();
      } else {
        incompatiblePluginsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder addIncompatiblePlugins(com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier value) {
      if (incompatiblePluginsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.add(value);
        onChanged();
      } else {
        incompatiblePluginsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder addIncompatiblePlugins(
        int index, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier value) {
      if (incompatiblePluginsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.add(index, value);
        onChanged();
      } else {
        incompatiblePluginsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder addIncompatiblePlugins(
        com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder builderForValue) {
      if (incompatiblePluginsBuilder_ == null) {
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.add(builderForValue.build());
        onChanged();
      } else {
        incompatiblePluginsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder addIncompatiblePlugins(
        int index, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder builderForValue) {
      if (incompatiblePluginsBuilder_ == null) {
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.add(index, builderForValue.build());
        onChanged();
      } else {
        incompatiblePluginsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder addAllIncompatiblePlugins(
        java.lang.Iterable<? extends com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier> values) {
      if (incompatiblePluginsBuilder_ == null) {
        ensureIncompatiblePluginsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, incompatiblePlugins_);
        onChanged();
      } else {
        incompatiblePluginsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder clearIncompatiblePlugins() {
      if (incompatiblePluginsBuilder_ == null) {
        incompatiblePlugins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        incompatiblePluginsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public Builder removeIncompatiblePlugins(int index) {
      if (incompatiblePluginsBuilder_ == null) {
        ensureIncompatiblePluginsIsMutable();
        incompatiblePlugins_.remove(index);
        onChanged();
      } else {
        incompatiblePluginsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder getIncompatiblePluginsBuilder(
        int index) {
      return getIncompatiblePluginsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder getIncompatiblePluginsOrBuilder(
        int index) {
      if (incompatiblePluginsBuilder_ == null) {
        return incompatiblePlugins_.get(index);  } else {
        return incompatiblePluginsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public java.util.List<? extends com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder>
         getIncompatiblePluginsOrBuilderList() {
      if (incompatiblePluginsBuilder_ != null) {
        return incompatiblePluginsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(incompatiblePlugins_);
      }
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder addIncompatiblePluginsBuilder() {
      return getIncompatiblePluginsFieldBuilder().addBuilder(
          com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance());
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder addIncompatiblePluginsBuilder(
        int index) {
      return getIncompatiblePluginsFieldBuilder().addBuilder(
          index, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.getDefaultInstance());
    }
    /**
     * <pre>
     * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
     * </pre>
     *
     * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder>
         getIncompatiblePluginsBuilderList() {
      return getIncompatiblePluginsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder>
        getIncompatiblePluginsFieldBuilder() {
      if (incompatiblePluginsBuilder_ == null) {
        incompatiblePluginsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier.Builder, com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder>(
                incompatiblePlugins_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        incompatiblePlugins_ = null;
      }
      return incompatiblePluginsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.ConfigurationCacheCompatibilityData)
  }

  // @@protoc_insertion_point(class_scope:android_studio.ConfigurationCacheCompatibilityData)
  private static final com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData();
  }

  public static com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<ConfigurationCacheCompatibilityData>
      PARSER = new com.google.protobuf.AbstractParser<ConfigurationCacheCompatibilityData>() {
    @java.lang.Override
    public ConfigurationCacheCompatibilityData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConfigurationCacheCompatibilityData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConfigurationCacheCompatibilityData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConfigurationCacheCompatibilityData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

