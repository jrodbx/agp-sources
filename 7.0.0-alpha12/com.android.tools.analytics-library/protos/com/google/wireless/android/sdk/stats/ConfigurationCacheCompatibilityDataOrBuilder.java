// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface ConfigurationCacheCompatibilityDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.ConfigurationCacheCompatibilityData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
   * @return Whether the compatibilityState field is set.
   */
  boolean hasCompatibilityState();
  /**
   * <code>optional .android_studio.ConfigurationCacheCompatibilityData.CompatibilityState compatibility_state = 1;</code>
   * @return The compatibilityState.
   */
  com.google.wireless.android.sdk.stats.ConfigurationCacheCompatibilityData.CompatibilityState getCompatibilityState();

  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  java.util.List<com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier>
      getIncompatiblePluginsList();
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifier getIncompatiblePlugins(int index);
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  int getIncompatiblePluginsCount();
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  java.util.List<? extends com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder>
      getIncompatiblePluginsOrBuilderList();
  /**
   * <pre>
   * Non empty only if INCOMPATIBLE_PLUGINS_DETECTED state.
   * </pre>
   *
   * <code>repeated .android_studio.BuildAttributionPluginIdentifier incompatible_plugins = 2;</code>
   */
  com.google.wireless.android.sdk.stats.BuildAttributionPluginIdentifierOrBuilder getIncompatiblePluginsOrBuilder(
      int index);
}
