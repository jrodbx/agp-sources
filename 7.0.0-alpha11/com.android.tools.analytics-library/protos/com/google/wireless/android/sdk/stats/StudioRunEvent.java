// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * Protobuf type {@code android_studio.StudioRunEvent}
 */
@java.lang.Deprecated public  final class StudioRunEvent extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.StudioRunEvent)
    StudioRunEventOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StudioRunEvent.newBuilder() to construct.
  private StudioRunEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StudioRunEvent() {
    runId_ = "";
    runType_ = 0;
    sectionType_ = 0;
    eventType_ = 0;
    buildMode_ = 0;
    deployTask_ = 0;
    artifactDetails_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new StudioRunEvent();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private StudioRunEvent(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000001;
            runId_ = bs;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.StudioRunEvent.RunType value = com.google.wireless.android.sdk.stats.StudioRunEvent.RunType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              runType_ = rawValue;
            }
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType value = com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(3, rawValue);
            } else {
              bitField0_ |= 0x00000004;
              sectionType_ = rawValue;
            }
            break;
          }
          case 32: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.StudioRunEvent.EventType value = com.google.wireless.android.sdk.stats.StudioRunEvent.EventType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(4, rawValue);
            } else {
              bitField0_ |= 0x00000008;
              eventType_ = rawValue;
            }
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            durationMs_ = input.readUInt32();
            break;
          }
          case 48: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode value = com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(6, rawValue);
            } else {
              bitField0_ |= 0x00000020;
              buildMode_ = rawValue;
            }
            break;
          }
          case 56: {
            bitField0_ |= 0x00000040;
            isSuccessful_ = input.readBool();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            artifactCount_ = input.readUInt32();
            break;
          }
          case 72: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask value = com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(9, rawValue);
            } else {
              bitField0_ |= 0x00000100;
              deployTask_ = rawValue;
            }
            break;
          }
          case 88: {
            bitField0_ |= 0x00000200;
            disabledDynamicFeaturesCount_ = input.readUInt32();
            break;
          }
          case 96: {
            bitField0_ |= 0x00000400;
            instantRun_ = input.readBool();
            break;
          }
          case 104: {
            bitField0_ |= 0x00000800;
            patchBuild_ = input.readBool();
            break;
          }
          case 112: {
            bitField0_ |= 0x00001000;
            doNotRestart_ = input.readBool();
            break;
          }
          case 120: {
            bitField0_ |= 0x00002000;
            debuggable_ = input.readBool();
            break;
          }
          case 128: {
            bitField0_ |= 0x00004000;
            userSelectedTarget_ = input.readBool();
            break;
          }
          case 138: {
            if (!((mutable_bitField0_ & 0x00008000) != 0)) {
              artifactDetails_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.ArtifactDetail>();
              mutable_bitField0_ |= 0x00008000;
            }
            artifactDetails_.add(
                input.readMessage(com.google.wireless.android.sdk.stats.ArtifactDetail.PARSER, extensionRegistry));
            break;
          }
          case 144: {
            bitField0_ |= 0x00008000;
            forceColdswap_ = input.readBool();
            break;
          }
          case 152: {
            bitField0_ |= 0x00010000;
            instantRunEnabled_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00008000) != 0)) {
        artifactDetails_ = java.util.Collections.unmodifiableList(artifactDetails_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioRunEvent_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioRunEvent_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.StudioRunEvent.class, com.google.wireless.android.sdk.stats.StudioRunEvent.Builder.class);
  }

  /**
   * Protobuf enum {@code android_studio.StudioRunEvent.RunType}
   */
  public enum RunType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>RUN = 1;</code>
     */
    RUN(1),
    /**
     * <code>DEBUG = 2;</code>
     */
    DEBUG(2),
    /**
     * <code>PROFILE = 3;</code>
     */
    PROFILE(3),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>RUN = 1;</code>
     */
    public static final int RUN_VALUE = 1;
    /**
     * <code>DEBUG = 2;</code>
     */
    public static final int DEBUG_VALUE = 2;
    /**
     * <code>PROFILE = 3;</code>
     */
    public static final int PROFILE_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RunType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RunType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return RUN;
        case 2: return DEBUG;
        case 3: return PROFILE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RunType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RunType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RunType>() {
            public RunType findValueByNumber(int number) {
              return RunType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.StudioRunEvent.getDescriptor().getEnumTypes().get(0);
    }

    private static final RunType[] VALUES = values();

    public static RunType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RunType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.StudioRunEvent.RunType)
  }

  /**
   * Protobuf enum {@code android_studio.StudioRunEvent.SectionType}
   */
  public enum SectionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_SECTION = 0;</code>
     */
    UNKNOWN_SECTION(0),
    /**
     * <code>TOTAL = 1;</code>
     */
    TOTAL(1),
    /**
     * <code>STUDIO = 2;</code>
     */
    STUDIO(2),
    /**
     * <code>GRADLE = 3;</code>
     */
    GRADLE(3),
    /**
     * <code>EMULATOR = 4;</code>
     */
    EMULATOR(4),
    /**
     * <code>DEPLOY = 5;</code>
     */
    DEPLOY(5),
    ;

    /**
     * <code>UNKNOWN_SECTION = 0;</code>
     */
    public static final int UNKNOWN_SECTION_VALUE = 0;
    /**
     * <code>TOTAL = 1;</code>
     */
    public static final int TOTAL_VALUE = 1;
    /**
     * <code>STUDIO = 2;</code>
     */
    public static final int STUDIO_VALUE = 2;
    /**
     * <code>GRADLE = 3;</code>
     */
    public static final int GRADLE_VALUE = 3;
    /**
     * <code>EMULATOR = 4;</code>
     */
    public static final int EMULATOR_VALUE = 4;
    /**
     * <code>DEPLOY = 5;</code>
     */
    public static final int DEPLOY_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SectionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SectionType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_SECTION;
        case 1: return TOTAL;
        case 2: return STUDIO;
        case 3: return GRADLE;
        case 4: return EMULATOR;
        case 5: return DEPLOY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SectionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SectionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SectionType>() {
            public SectionType findValueByNumber(int number) {
              return SectionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.StudioRunEvent.getDescriptor().getEnumTypes().get(1);
    }

    private static final SectionType[] VALUES = values();

    public static SectionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SectionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.StudioRunEvent.SectionType)
  }

  /**
   * Protobuf enum {@code android_studio.StudioRunEvent.EventType}
   */
  public enum EventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <code>START = 1;</code>
     */
    START(1),
    /**
     * <code>FINISH = 2;</code>
     */
    FINISH(2),
    ;

    /**
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <code>START = 1;</code>
     */
    public static final int START_VALUE = 1;
    /**
     * <code>FINISH = 2;</code>
     */
    public static final int FINISH_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EventType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EventType forNumber(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return START;
        case 2: return FINISH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EventType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
            public EventType findValueByNumber(int number) {
              return EventType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.StudioRunEvent.getDescriptor().getEnumTypes().get(2);
    }

    private static final EventType[] VALUES = values();

    public static EventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EventType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.StudioRunEvent.EventType)
  }

  /**
   * <pre>
   * mirrors com.android.tools.idea.gradle.util.BuildMode
   * </pre>
   *
   * Protobuf enum {@code android_studio.StudioRunEvent.BuildMode}
   */
  public enum BuildMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_BUILD_MODE = 0;</code>
     */
    UNKNOWN_BUILD_MODE(0),
    /**
     * <pre>
     ** Cleans the project.
     * </pre>
     *
     * <code>CLEAN = 1;</code>
     */
    CLEAN(1),
    /**
     * <pre>
     ** Compiles Java code and invokes Android build tools.
     * </pre>
     *
     * <code>ASSEMBLE = 2;</code>
     */
    ASSEMBLE(2),
    /**
     * <pre>
     ** Clean project and then {&#64;link #ASSEMBLE}.
     * </pre>
     *
     * <code>REBUILD = 3;</code>
     */
    REBUILD(3),
    /**
     * <pre>
     ** Compiles Java code, in selected modules, without invoking Android
     * build tools.
     * </pre>
     *
     * <code>COMPILE_JAVA = 4;</code>
     */
    COMPILE_JAVA(4),
    /**
     * <pre>
     ** Generate Java source only (e.g. R.java).
     * </pre>
     *
     * <code>SOURCE_GEN = 5;</code>
     */
    SOURCE_GEN(5),
    /**
     * <pre>
     ** Build project with translation support.
     * </pre>
     *
     * <code>ASSEMBLE_TRANSLATE = 6;</code>
     */
    ASSEMBLE_TRANSLATE(6),
    /**
     * <pre>
     ** Build with the Gradle "bundle" task
     * </pre>
     *
     * <code>BUNDLE = 7;</code>
     */
    BUNDLE(7),
    /**
     * <pre>
     ** Build APKS from the Gradle "bundle" task
     * </pre>
     *
     * <code>APK_FROM_BUNDLE = 8;</code>
     */
    APK_FROM_BUNDLE(8),
    ;

    /**
     * <code>UNKNOWN_BUILD_MODE = 0;</code>
     */
    public static final int UNKNOWN_BUILD_MODE_VALUE = 0;
    /**
     * <pre>
     ** Cleans the project.
     * </pre>
     *
     * <code>CLEAN = 1;</code>
     */
    public static final int CLEAN_VALUE = 1;
    /**
     * <pre>
     ** Compiles Java code and invokes Android build tools.
     * </pre>
     *
     * <code>ASSEMBLE = 2;</code>
     */
    public static final int ASSEMBLE_VALUE = 2;
    /**
     * <pre>
     ** Clean project and then {&#64;link #ASSEMBLE}.
     * </pre>
     *
     * <code>REBUILD = 3;</code>
     */
    public static final int REBUILD_VALUE = 3;
    /**
     * <pre>
     ** Compiles Java code, in selected modules, without invoking Android
     * build tools.
     * </pre>
     *
     * <code>COMPILE_JAVA = 4;</code>
     */
    public static final int COMPILE_JAVA_VALUE = 4;
    /**
     * <pre>
     ** Generate Java source only (e.g. R.java).
     * </pre>
     *
     * <code>SOURCE_GEN = 5;</code>
     */
    public static final int SOURCE_GEN_VALUE = 5;
    /**
     * <pre>
     ** Build project with translation support.
     * </pre>
     *
     * <code>ASSEMBLE_TRANSLATE = 6;</code>
     */
    public static final int ASSEMBLE_TRANSLATE_VALUE = 6;
    /**
     * <pre>
     ** Build with the Gradle "bundle" task
     * </pre>
     *
     * <code>BUNDLE = 7;</code>
     */
    public static final int BUNDLE_VALUE = 7;
    /**
     * <pre>
     ** Build APKS from the Gradle "bundle" task
     * </pre>
     *
     * <code>APK_FROM_BUNDLE = 8;</code>
     */
    public static final int APK_FROM_BUNDLE_VALUE = 8;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BuildMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BuildMode forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_BUILD_MODE;
        case 1: return CLEAN;
        case 2: return ASSEMBLE;
        case 3: return REBUILD;
        case 4: return COMPILE_JAVA;
        case 5: return SOURCE_GEN;
        case 6: return ASSEMBLE_TRANSLATE;
        case 7: return BUNDLE;
        case 8: return APK_FROM_BUNDLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BuildMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BuildMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BuildMode>() {
            public BuildMode findValueByNumber(int number) {
              return BuildMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.StudioRunEvent.getDescriptor().getEnumTypes().get(3);
    }

    private static final BuildMode[] VALUES = values();

    public static BuildMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BuildMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.StudioRunEvent.BuildMode)
  }

  /**
   * Protobuf enum {@code android_studio.StudioRunEvent.DeployTask}
   */
  public enum DeployTask
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_TASK = 0;</code>
     */
    UNKNOWN_TASK(0),
    /**
     * <code>DEPLOY_APK = 1;</code>
     */
    DEPLOY_APK(1),
    /**
     * <code>DEPLOY_INSTANT_APP = 2;</code>
     */
    DEPLOY_INSTANT_APP(2),
    /**
     * <code>HOTSWAP = 3;</code>
     */
    HOTSWAP(3),
    /**
     * <code>SPLIT_APK_DEPLOY = 4;</code>
     */
    SPLIT_APK_DEPLOY(4),
    ;

    /**
     * <code>UNKNOWN_TASK = 0;</code>
     */
    public static final int UNKNOWN_TASK_VALUE = 0;
    /**
     * <code>DEPLOY_APK = 1;</code>
     */
    public static final int DEPLOY_APK_VALUE = 1;
    /**
     * <code>DEPLOY_INSTANT_APP = 2;</code>
     */
    public static final int DEPLOY_INSTANT_APP_VALUE = 2;
    /**
     * <code>HOTSWAP = 3;</code>
     */
    public static final int HOTSWAP_VALUE = 3;
    /**
     * <code>SPLIT_APK_DEPLOY = 4;</code>
     */
    public static final int SPLIT_APK_DEPLOY_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeployTask valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DeployTask forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_TASK;
        case 1: return DEPLOY_APK;
        case 2: return DEPLOY_INSTANT_APP;
        case 3: return HOTSWAP;
        case 4: return SPLIT_APK_DEPLOY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeployTask>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeployTask> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeployTask>() {
            public DeployTask findValueByNumber(int number) {
              return DeployTask.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.StudioRunEvent.getDescriptor().getEnumTypes().get(4);
    }

    private static final DeployTask[] VALUES = values();

    public static DeployTask valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DeployTask(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.StudioRunEvent.DeployTask)
  }

  private int bitField0_;
  public static final int RUN_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object runId_;
  /**
   * <pre>
   * The run id is a UUID within a single run of Android Studio
   * for tracking a single run through various events
   * </pre>
   *
   * <code>optional string run_id = 1;</code>
   * @return Whether the runId field is set.
   */
  public boolean hasRunId() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The run id is a UUID within a single run of Android Studio
   * for tracking a single run through various events
   * </pre>
   *
   * <code>optional string run_id = 1;</code>
   * @return The runId.
   */
  public java.lang.String getRunId() {
    java.lang.Object ref = runId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        runId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The run id is a UUID within a single run of Android Studio
   * for tracking a single run through various events
   * </pre>
   *
   * <code>optional string run_id = 1;</code>
   * @return The bytes for runId.
   */
  public com.google.protobuf.ByteString
      getRunIdBytes() {
    java.lang.Object ref = runId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      runId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RUN_TYPE_FIELD_NUMBER = 2;
  private int runType_;
  /**
   * <pre>
   * The type of "Run" Studio is performing
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
   * @return Whether the runType field is set.
   */
  public boolean hasRunType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The type of "Run" Studio is performing
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
   * @return The runType.
   */
  public com.google.wireless.android.sdk.stats.StudioRunEvent.RunType getRunType() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.StudioRunEvent.RunType result = com.google.wireless.android.sdk.stats.StudioRunEvent.RunType.valueOf(runType_);
    return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.RunType.UNKNOWN : result;
  }

  public static final int SECTION_TYPE_FIELD_NUMBER = 3;
  private int sectionType_;
  /**
   * <pre>
   * The section of the run this event is tracking
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
   * @return Whether the sectionType field is set.
   */
  public boolean hasSectionType() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The section of the run this event is tracking
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
   * @return The sectionType.
   */
  public com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType getSectionType() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType result = com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType.valueOf(sectionType_);
    return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType.UNKNOWN_SECTION : result;
  }

  public static final int EVENT_TYPE_FIELD_NUMBER = 4;
  private int eventType_;
  /**
   * <pre>
   * The type of event: start or end or error
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
   * @return Whether the eventType field is set.
   */
  public boolean hasEventType() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The type of event: start or end or error
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
   * @return The eventType.
   */
  public com.google.wireless.android.sdk.stats.StudioRunEvent.EventType getEventType() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.StudioRunEvent.EventType result = com.google.wireless.android.sdk.stats.StudioRunEvent.EventType.valueOf(eventType_);
    return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.EventType.NONE : result;
  }

  public static final int DURATION_MS_FIELD_NUMBER = 5;
  private int durationMs_;
  /**
   * <pre>
   * How long this section took, set when EventType is Finish or Failed
   * </pre>
   *
   * <code>optional uint32 duration_ms = 5;</code>
   * @return Whether the durationMs field is set.
   */
  public boolean hasDurationMs() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * How long this section took, set when EventType is Finish or Failed
   * </pre>
   *
   * <code>optional uint32 duration_ms = 5;</code>
   * @return The durationMs.
   */
  public int getDurationMs() {
    return durationMs_;
  }

  public static final int BUILD_MODE_FIELD_NUMBER = 6;
  private int buildMode_;
  /**
   * <pre>
   * Set if SectionType = Gradle AND EventType = Start
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
   * @return Whether the buildMode field is set.
   */
  public boolean hasBuildMode() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Set if SectionType = Gradle AND EventType = Start
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
   * @return The buildMode.
   */
  public com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode getBuildMode() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode result = com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode.valueOf(buildMode_);
    return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode.UNKNOWN_BUILD_MODE : result;
  }

  public static final int IS_SUCCESSFUL_FIELD_NUMBER = 7;
  private boolean isSuccessful_;
  /**
   * <pre>
   * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
   * </pre>
   *
   * <code>optional bool is_successful = 7;</code>
   * @return Whether the isSuccessful field is set.
   */
  public boolean hasIsSuccessful() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
   * </pre>
   *
   * <code>optional bool is_successful = 7;</code>
   * @return The isSuccessful.
   */
  public boolean getIsSuccessful() {
    return isSuccessful_;
  }

  public static final int ARTIFACT_COUNT_FIELD_NUMBER = 8;
  private int artifactCount_;
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional uint32 artifact_count = 8;</code>
   * @return Whether the artifactCount field is set.
   */
  public boolean hasArtifactCount() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional uint32 artifact_count = 8;</code>
   * @return The artifactCount.
   */
  public int getArtifactCount() {
    return artifactCount_;
  }

  public static final int DEPLOY_TASK_FIELD_NUMBER = 9;
  private int deployTask_;
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
   * @return Whether the deployTask field is set.
   */
  public boolean hasDeployTask() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * </pre>
   *
   * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
   * @return The deployTask.
   */
  public com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask getDeployTask() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask result = com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask.valueOf(deployTask_);
    return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask.UNKNOWN_TASK : result;
  }

  public static final int DISABLED_DYNAMIC_FEATURES_COUNT_FIELD_NUMBER = 11;
  private int disabledDynamicFeaturesCount_;
  /**
   * <pre>
   * The number of features disabled by the user
   * Set if SectionType = DEPLOY and EventType = START and
   * BuildMode = BUNDLE/APK_FROM_BUNDLE
   * </pre>
   *
   * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
   * @return Whether the disabledDynamicFeaturesCount field is set.
   */
  public boolean hasDisabledDynamicFeaturesCount() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * The number of features disabled by the user
   * Set if SectionType = DEPLOY and EventType = START and
   * BuildMode = BUNDLE/APK_FROM_BUNDLE
   * </pre>
   *
   * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
   * @return The disabledDynamicFeaturesCount.
   */
  public int getDisabledDynamicFeaturesCount() {
    return disabledDynamicFeaturesCount_;
  }

  public static final int INSTANT_RUN_FIELD_NUMBER = 12;
  private boolean instantRun_;
  /**
   * <pre>
   * If this Run is using Instant Run, which may use HOTSWAP deploy task
   * but could also use other deploy tasks.
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool instant_run = 12;</code>
   * @return Whether the instantRun field is set.
   */
  public boolean hasInstantRun() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * If this Run is using Instant Run, which may use HOTSWAP deploy task
   * but could also use other deploy tasks.
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool instant_run = 12;</code>
   * @return The instantRun.
   */
  public boolean getInstantRun() {
    return instantRun_;
  }

  public static final int PATCH_BUILD_FIELD_NUMBER = 13;
  private boolean patchBuild_;
  /**
   * <pre>
   * If using SplitApkDeployTask and doing a partial install
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool patch_build = 13;</code>
   * @return Whether the patchBuild field is set.
   */
  public boolean hasPatchBuild() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * If using SplitApkDeployTask and doing a partial install
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool patch_build = 13;</code>
   * @return The patchBuild.
   */
  public boolean getPatchBuild() {
    return patchBuild_;
  }

  public static final int DO_NOT_RESTART_FIELD_NUMBER = 14;
  private boolean doNotRestart_;
  /**
   * <pre>
   * If using SplitApkDeployTask and doing a resource only swap that
   * does not restart the app
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool do_not_restart = 14;</code>
   * @return Whether the doNotRestart field is set.
   */
  public boolean hasDoNotRestart() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * If using SplitApkDeployTask and doing a resource only swap that
   * does not restart the app
   * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
   * </pre>
   *
   * <code>optional bool do_not_restart = 14;</code>
   * @return The doNotRestart.
   */
  public boolean getDoNotRestart() {
    return doNotRestart_;
  }

  public static final int DEBUGGABLE_FIELD_NUMBER = 15;
  private boolean debuggable_;
  /**
   * <pre>
   * If the app's debuggable flag is set to true
   * Set if SectionType = TOTAL and EventType = START
   * </pre>
   *
   * <code>optional bool debuggable = 15;</code>
   * @return Whether the debuggable field is set.
   */
  public boolean hasDebuggable() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * If the app's debuggable flag is set to true
   * Set if SectionType = TOTAL and EventType = START
   * </pre>
   *
   * <code>optional bool debuggable = 15;</code>
   * @return The debuggable.
   */
  public boolean getDebuggable() {
    return debuggable_;
  }

  public static final int USER_SELECTED_TARGET_FIELD_NUMBER = 16;
  private boolean userSelectedTarget_;
  /**
   * <pre>
   * If the deploy target was picked by the user or auto selected by dialog
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool user_selected_target = 16;</code>
   * @return Whether the userSelectedTarget field is set.
   */
  public boolean hasUserSelectedTarget() {
    return ((bitField0_ & 0x00004000) != 0);
  }
  /**
   * <pre>
   * If the deploy target was picked by the user or auto selected by dialog
   * Set if SectionType = STUDIO and EventType = FINISH
   * </pre>
   *
   * <code>optional bool user_selected_target = 16;</code>
   * @return The userSelectedTarget.
   */
  public boolean getUserSelectedTarget() {
    return userSelectedTarget_;
  }

  public static final int ARTIFACT_DETAILS_FIELD_NUMBER = 17;
  private java.util.List<com.google.wireless.android.sdk.stats.ArtifactDetail> artifactDetails_;
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  public java.util.List<com.google.wireless.android.sdk.stats.ArtifactDetail> getArtifactDetailsList() {
    return artifactDetails_;
  }
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  public java.util.List<? extends com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder>
      getArtifactDetailsOrBuilderList() {
    return artifactDetails_;
  }
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  public int getArtifactDetailsCount() {
    return artifactDetails_.size();
  }
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  public com.google.wireless.android.sdk.stats.ArtifactDetail getArtifactDetails(int index) {
    return artifactDetails_.get(index);
  }
  /**
   * <pre>
   * Set if EventType = START and SectionType = DEPLOY
   * Details of each artifact being deployed.
   * </pre>
   *
   * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
   */
  public com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder getArtifactDetailsOrBuilder(
      int index) {
    return artifactDetails_.get(index);
  }

  public static final int FORCE_COLDSWAP_FIELD_NUMBER = 18;
  private boolean forceColdswap_;
  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If user clicked the Run button instead of Apply Changes
   * </pre>
   *
   * <code>optional bool force_coldswap = 18;</code>
   * @return Whether the forceColdswap field is set.
   */
  public boolean hasForceColdswap() {
    return ((bitField0_ & 0x00008000) != 0);
  }
  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If user clicked the Run button instead of Apply Changes
   * </pre>
   *
   * <code>optional bool force_coldswap = 18;</code>
   * @return The forceColdswap.
   */
  public boolean getForceColdswap() {
    return forceColdswap_;
  }

  public static final int INSTANT_RUN_ENABLED_FIELD_NUMBER = 19;
  private boolean instantRunEnabled_;
  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If Instant Run setting is enabled
   * </pre>
   *
   * <code>optional bool instant_run_enabled = 19;</code>
   * @return Whether the instantRunEnabled field is set.
   */
  public boolean hasInstantRunEnabled() {
    return ((bitField0_ & 0x00010000) != 0);
  }
  /**
   * <pre>
   * Set when EventType = START and SectionType = TOTAL
   * If Instant Run setting is enabled
   * </pre>
   *
   * <code>optional bool instant_run_enabled = 19;</code>
   * @return The instantRunEnabled.
   */
  public boolean getInstantRunEnabled() {
    return instantRunEnabled_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, runId_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeEnum(2, runType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeEnum(3, sectionType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeEnum(4, eventType_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeUInt32(5, durationMs_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeEnum(6, buildMode_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeBool(7, isSuccessful_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeUInt32(8, artifactCount_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeEnum(9, deployTask_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeUInt32(11, disabledDynamicFeaturesCount_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      output.writeBool(12, instantRun_);
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      output.writeBool(13, patchBuild_);
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      output.writeBool(14, doNotRestart_);
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      output.writeBool(15, debuggable_);
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      output.writeBool(16, userSelectedTarget_);
    }
    for (int i = 0; i < artifactDetails_.size(); i++) {
      output.writeMessage(17, artifactDetails_.get(i));
    }
    if (((bitField0_ & 0x00008000) != 0)) {
      output.writeBool(18, forceColdswap_);
    }
    if (((bitField0_ & 0x00010000) != 0)) {
      output.writeBool(19, instantRunEnabled_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, runId_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, runType_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, sectionType_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, eventType_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, durationMs_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, buildMode_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, isSuccessful_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(8, artifactCount_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, deployTask_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, disabledDynamicFeaturesCount_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, instantRun_);
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(13, patchBuild_);
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(14, doNotRestart_);
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(15, debuggable_);
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(16, userSelectedTarget_);
    }
    for (int i = 0; i < artifactDetails_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, artifactDetails_.get(i));
    }
    if (((bitField0_ & 0x00008000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(18, forceColdswap_);
    }
    if (((bitField0_ & 0x00010000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(19, instantRunEnabled_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.StudioRunEvent)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.StudioRunEvent other = (com.google.wireless.android.sdk.stats.StudioRunEvent) obj;

    if (hasRunId() != other.hasRunId()) return false;
    if (hasRunId()) {
      if (!getRunId()
          .equals(other.getRunId())) return false;
    }
    if (hasRunType() != other.hasRunType()) return false;
    if (hasRunType()) {
      if (runType_ != other.runType_) return false;
    }
    if (hasSectionType() != other.hasSectionType()) return false;
    if (hasSectionType()) {
      if (sectionType_ != other.sectionType_) return false;
    }
    if (hasEventType() != other.hasEventType()) return false;
    if (hasEventType()) {
      if (eventType_ != other.eventType_) return false;
    }
    if (hasDurationMs() != other.hasDurationMs()) return false;
    if (hasDurationMs()) {
      if (getDurationMs()
          != other.getDurationMs()) return false;
    }
    if (hasBuildMode() != other.hasBuildMode()) return false;
    if (hasBuildMode()) {
      if (buildMode_ != other.buildMode_) return false;
    }
    if (hasIsSuccessful() != other.hasIsSuccessful()) return false;
    if (hasIsSuccessful()) {
      if (getIsSuccessful()
          != other.getIsSuccessful()) return false;
    }
    if (hasArtifactCount() != other.hasArtifactCount()) return false;
    if (hasArtifactCount()) {
      if (getArtifactCount()
          != other.getArtifactCount()) return false;
    }
    if (hasDeployTask() != other.hasDeployTask()) return false;
    if (hasDeployTask()) {
      if (deployTask_ != other.deployTask_) return false;
    }
    if (hasDisabledDynamicFeaturesCount() != other.hasDisabledDynamicFeaturesCount()) return false;
    if (hasDisabledDynamicFeaturesCount()) {
      if (getDisabledDynamicFeaturesCount()
          != other.getDisabledDynamicFeaturesCount()) return false;
    }
    if (hasInstantRun() != other.hasInstantRun()) return false;
    if (hasInstantRun()) {
      if (getInstantRun()
          != other.getInstantRun()) return false;
    }
    if (hasPatchBuild() != other.hasPatchBuild()) return false;
    if (hasPatchBuild()) {
      if (getPatchBuild()
          != other.getPatchBuild()) return false;
    }
    if (hasDoNotRestart() != other.hasDoNotRestart()) return false;
    if (hasDoNotRestart()) {
      if (getDoNotRestart()
          != other.getDoNotRestart()) return false;
    }
    if (hasDebuggable() != other.hasDebuggable()) return false;
    if (hasDebuggable()) {
      if (getDebuggable()
          != other.getDebuggable()) return false;
    }
    if (hasUserSelectedTarget() != other.hasUserSelectedTarget()) return false;
    if (hasUserSelectedTarget()) {
      if (getUserSelectedTarget()
          != other.getUserSelectedTarget()) return false;
    }
    if (!getArtifactDetailsList()
        .equals(other.getArtifactDetailsList())) return false;
    if (hasForceColdswap() != other.hasForceColdswap()) return false;
    if (hasForceColdswap()) {
      if (getForceColdswap()
          != other.getForceColdswap()) return false;
    }
    if (hasInstantRunEnabled() != other.hasInstantRunEnabled()) return false;
    if (hasInstantRunEnabled()) {
      if (getInstantRunEnabled()
          != other.getInstantRunEnabled()) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRunId()) {
      hash = (37 * hash) + RUN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getRunId().hashCode();
    }
    if (hasRunType()) {
      hash = (37 * hash) + RUN_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + runType_;
    }
    if (hasSectionType()) {
      hash = (37 * hash) + SECTION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + sectionType_;
    }
    if (hasEventType()) {
      hash = (37 * hash) + EVENT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + eventType_;
    }
    if (hasDurationMs()) {
      hash = (37 * hash) + DURATION_MS_FIELD_NUMBER;
      hash = (53 * hash) + getDurationMs();
    }
    if (hasBuildMode()) {
      hash = (37 * hash) + BUILD_MODE_FIELD_NUMBER;
      hash = (53 * hash) + buildMode_;
    }
    if (hasIsSuccessful()) {
      hash = (37 * hash) + IS_SUCCESSFUL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsSuccessful());
    }
    if (hasArtifactCount()) {
      hash = (37 * hash) + ARTIFACT_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getArtifactCount();
    }
    if (hasDeployTask()) {
      hash = (37 * hash) + DEPLOY_TASK_FIELD_NUMBER;
      hash = (53 * hash) + deployTask_;
    }
    if (hasDisabledDynamicFeaturesCount()) {
      hash = (37 * hash) + DISABLED_DYNAMIC_FEATURES_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDisabledDynamicFeaturesCount();
    }
    if (hasInstantRun()) {
      hash = (37 * hash) + INSTANT_RUN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInstantRun());
    }
    if (hasPatchBuild()) {
      hash = (37 * hash) + PATCH_BUILD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPatchBuild());
    }
    if (hasDoNotRestart()) {
      hash = (37 * hash) + DO_NOT_RESTART_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDoNotRestart());
    }
    if (hasDebuggable()) {
      hash = (37 * hash) + DEBUGGABLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDebuggable());
    }
    if (hasUserSelectedTarget()) {
      hash = (37 * hash) + USER_SELECTED_TARGET_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUserSelectedTarget());
    }
    if (getArtifactDetailsCount() > 0) {
      hash = (37 * hash) + ARTIFACT_DETAILS_FIELD_NUMBER;
      hash = (53 * hash) + getArtifactDetailsList().hashCode();
    }
    if (hasForceColdswap()) {
      hash = (37 * hash) + FORCE_COLDSWAP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getForceColdswap());
    }
    if (hasInstantRunEnabled()) {
      hash = (37 * hash) + INSTANT_RUN_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInstantRunEnabled());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.StudioRunEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.StudioRunEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code android_studio.StudioRunEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.StudioRunEvent)
      com.google.wireless.android.sdk.stats.StudioRunEventOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioRunEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioRunEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.StudioRunEvent.class, com.google.wireless.android.sdk.stats.StudioRunEvent.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.StudioRunEvent.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getArtifactDetailsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      runId_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      runType_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      sectionType_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      eventType_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      durationMs_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      buildMode_ = 0;
      bitField0_ = (bitField0_ & ~0x00000020);
      isSuccessful_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      artifactCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000080);
      deployTask_ = 0;
      bitField0_ = (bitField0_ & ~0x00000100);
      disabledDynamicFeaturesCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000200);
      instantRun_ = false;
      bitField0_ = (bitField0_ & ~0x00000400);
      patchBuild_ = false;
      bitField0_ = (bitField0_ & ~0x00000800);
      doNotRestart_ = false;
      bitField0_ = (bitField0_ & ~0x00001000);
      debuggable_ = false;
      bitField0_ = (bitField0_ & ~0x00002000);
      userSelectedTarget_ = false;
      bitField0_ = (bitField0_ & ~0x00004000);
      if (artifactDetailsBuilder_ == null) {
        artifactDetails_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
      } else {
        artifactDetailsBuilder_.clear();
      }
      forceColdswap_ = false;
      bitField0_ = (bitField0_ & ~0x00010000);
      instantRunEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00020000);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_StudioRunEvent_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.StudioRunEvent getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.StudioRunEvent.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.StudioRunEvent build() {
      com.google.wireless.android.sdk.stats.StudioRunEvent result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.StudioRunEvent buildPartial() {
      com.google.wireless.android.sdk.stats.StudioRunEvent result = new com.google.wireless.android.sdk.stats.StudioRunEvent(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.runId_ = runId_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        to_bitField0_ |= 0x00000002;
      }
      result.runType_ = runType_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        to_bitField0_ |= 0x00000004;
      }
      result.sectionType_ = sectionType_;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        to_bitField0_ |= 0x00000008;
      }
      result.eventType_ = eventType_;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.durationMs_ = durationMs_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        to_bitField0_ |= 0x00000020;
      }
      result.buildMode_ = buildMode_;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.isSuccessful_ = isSuccessful_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.artifactCount_ = artifactCount_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        to_bitField0_ |= 0x00000100;
      }
      result.deployTask_ = deployTask_;
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.disabledDynamicFeaturesCount_ = disabledDynamicFeaturesCount_;
        to_bitField0_ |= 0x00000200;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.instantRun_ = instantRun_;
        to_bitField0_ |= 0x00000400;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.patchBuild_ = patchBuild_;
        to_bitField0_ |= 0x00000800;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.doNotRestart_ = doNotRestart_;
        to_bitField0_ |= 0x00001000;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.debuggable_ = debuggable_;
        to_bitField0_ |= 0x00002000;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.userSelectedTarget_ = userSelectedTarget_;
        to_bitField0_ |= 0x00004000;
      }
      if (artifactDetailsBuilder_ == null) {
        if (((bitField0_ & 0x00008000) != 0)) {
          artifactDetails_ = java.util.Collections.unmodifiableList(artifactDetails_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.artifactDetails_ = artifactDetails_;
      } else {
        result.artifactDetails_ = artifactDetailsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00010000) != 0)) {
        result.forceColdswap_ = forceColdswap_;
        to_bitField0_ |= 0x00008000;
      }
      if (((from_bitField0_ & 0x00020000) != 0)) {
        result.instantRunEnabled_ = instantRunEnabled_;
        to_bitField0_ |= 0x00010000;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.StudioRunEvent) {
        return mergeFrom((com.google.wireless.android.sdk.stats.StudioRunEvent)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.StudioRunEvent other) {
      if (other == com.google.wireless.android.sdk.stats.StudioRunEvent.getDefaultInstance()) return this;
      if (other.hasRunId()) {
        bitField0_ |= 0x00000001;
        runId_ = other.runId_;
        onChanged();
      }
      if (other.hasRunType()) {
        setRunType(other.getRunType());
      }
      if (other.hasSectionType()) {
        setSectionType(other.getSectionType());
      }
      if (other.hasEventType()) {
        setEventType(other.getEventType());
      }
      if (other.hasDurationMs()) {
        setDurationMs(other.getDurationMs());
      }
      if (other.hasBuildMode()) {
        setBuildMode(other.getBuildMode());
      }
      if (other.hasIsSuccessful()) {
        setIsSuccessful(other.getIsSuccessful());
      }
      if (other.hasArtifactCount()) {
        setArtifactCount(other.getArtifactCount());
      }
      if (other.hasDeployTask()) {
        setDeployTask(other.getDeployTask());
      }
      if (other.hasDisabledDynamicFeaturesCount()) {
        setDisabledDynamicFeaturesCount(other.getDisabledDynamicFeaturesCount());
      }
      if (other.hasInstantRun()) {
        setInstantRun(other.getInstantRun());
      }
      if (other.hasPatchBuild()) {
        setPatchBuild(other.getPatchBuild());
      }
      if (other.hasDoNotRestart()) {
        setDoNotRestart(other.getDoNotRestart());
      }
      if (other.hasDebuggable()) {
        setDebuggable(other.getDebuggable());
      }
      if (other.hasUserSelectedTarget()) {
        setUserSelectedTarget(other.getUserSelectedTarget());
      }
      if (artifactDetailsBuilder_ == null) {
        if (!other.artifactDetails_.isEmpty()) {
          if (artifactDetails_.isEmpty()) {
            artifactDetails_ = other.artifactDetails_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureArtifactDetailsIsMutable();
            artifactDetails_.addAll(other.artifactDetails_);
          }
          onChanged();
        }
      } else {
        if (!other.artifactDetails_.isEmpty()) {
          if (artifactDetailsBuilder_.isEmpty()) {
            artifactDetailsBuilder_.dispose();
            artifactDetailsBuilder_ = null;
            artifactDetails_ = other.artifactDetails_;
            bitField0_ = (bitField0_ & ~0x00008000);
            artifactDetailsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getArtifactDetailsFieldBuilder() : null;
          } else {
            artifactDetailsBuilder_.addAllMessages(other.artifactDetails_);
          }
        }
      }
      if (other.hasForceColdswap()) {
        setForceColdswap(other.getForceColdswap());
      }
      if (other.hasInstantRunEnabled()) {
        setInstantRunEnabled(other.getInstantRunEnabled());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.wireless.android.sdk.stats.StudioRunEvent parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.wireless.android.sdk.stats.StudioRunEvent) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object runId_ = "";
    /**
     * <pre>
     * The run id is a UUID within a single run of Android Studio
     * for tracking a single run through various events
     * </pre>
     *
     * <code>optional string run_id = 1;</code>
     * @return Whether the runId field is set.
     */
    public boolean hasRunId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The run id is a UUID within a single run of Android Studio
     * for tracking a single run through various events
     * </pre>
     *
     * <code>optional string run_id = 1;</code>
     * @return The runId.
     */
    public java.lang.String getRunId() {
      java.lang.Object ref = runId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          runId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The run id is a UUID within a single run of Android Studio
     * for tracking a single run through various events
     * </pre>
     *
     * <code>optional string run_id = 1;</code>
     * @return The bytes for runId.
     */
    public com.google.protobuf.ByteString
        getRunIdBytes() {
      java.lang.Object ref = runId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        runId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The run id is a UUID within a single run of Android Studio
     * for tracking a single run through various events
     * </pre>
     *
     * <code>optional string run_id = 1;</code>
     * @param value The runId to set.
     * @return This builder for chaining.
     */
    public Builder setRunId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      runId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The run id is a UUID within a single run of Android Studio
     * for tracking a single run through various events
     * </pre>
     *
     * <code>optional string run_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      runId_ = getDefaultInstance().getRunId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The run id is a UUID within a single run of Android Studio
     * for tracking a single run through various events
     * </pre>
     *
     * <code>optional string run_id = 1;</code>
     * @param value The bytes for runId to set.
     * @return This builder for chaining.
     */
    public Builder setRunIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      runId_ = value;
      onChanged();
      return this;
    }

    private int runType_ = 0;
    /**
     * <pre>
     * The type of "Run" Studio is performing
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
     * @return Whether the runType field is set.
     */
    public boolean hasRunType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The type of "Run" Studio is performing
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
     * @return The runType.
     */
    public com.google.wireless.android.sdk.stats.StudioRunEvent.RunType getRunType() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.StudioRunEvent.RunType result = com.google.wireless.android.sdk.stats.StudioRunEvent.RunType.valueOf(runType_);
      return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.RunType.UNKNOWN : result;
    }
    /**
     * <pre>
     * The type of "Run" Studio is performing
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
     * @param value The runType to set.
     * @return This builder for chaining.
     */
    public Builder setRunType(com.google.wireless.android.sdk.stats.StudioRunEvent.RunType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      runType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of "Run" Studio is performing
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.RunType run_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearRunType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      runType_ = 0;
      onChanged();
      return this;
    }

    private int sectionType_ = 0;
    /**
     * <pre>
     * The section of the run this event is tracking
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
     * @return Whether the sectionType field is set.
     */
    public boolean hasSectionType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The section of the run this event is tracking
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
     * @return The sectionType.
     */
    public com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType getSectionType() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType result = com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType.valueOf(sectionType_);
      return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType.UNKNOWN_SECTION : result;
    }
    /**
     * <pre>
     * The section of the run this event is tracking
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
     * @param value The sectionType to set.
     * @return This builder for chaining.
     */
    public Builder setSectionType(com.google.wireless.android.sdk.stats.StudioRunEvent.SectionType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      sectionType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The section of the run this event is tracking
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.SectionType section_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSectionType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      sectionType_ = 0;
      onChanged();
      return this;
    }

    private int eventType_ = 0;
    /**
     * <pre>
     * The type of event: start or end or error
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
     * @return Whether the eventType field is set.
     */
    public boolean hasEventType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The type of event: start or end or error
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
     * @return The eventType.
     */
    public com.google.wireless.android.sdk.stats.StudioRunEvent.EventType getEventType() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.StudioRunEvent.EventType result = com.google.wireless.android.sdk.stats.StudioRunEvent.EventType.valueOf(eventType_);
      return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.EventType.NONE : result;
    }
    /**
     * <pre>
     * The type of event: start or end or error
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
     * @param value The eventType to set.
     * @return This builder for chaining.
     */
    public Builder setEventType(com.google.wireless.android.sdk.stats.StudioRunEvent.EventType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      eventType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of event: start or end or error
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.EventType event_type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEventType() {
      bitField0_ = (bitField0_ & ~0x00000008);
      eventType_ = 0;
      onChanged();
      return this;
    }

    private int durationMs_ ;
    /**
     * <pre>
     * How long this section took, set when EventType is Finish or Failed
     * </pre>
     *
     * <code>optional uint32 duration_ms = 5;</code>
     * @return Whether the durationMs field is set.
     */
    public boolean hasDurationMs() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * How long this section took, set when EventType is Finish or Failed
     * </pre>
     *
     * <code>optional uint32 duration_ms = 5;</code>
     * @return The durationMs.
     */
    public int getDurationMs() {
      return durationMs_;
    }
    /**
     * <pre>
     * How long this section took, set when EventType is Finish or Failed
     * </pre>
     *
     * <code>optional uint32 duration_ms = 5;</code>
     * @param value The durationMs to set.
     * @return This builder for chaining.
     */
    public Builder setDurationMs(int value) {
      bitField0_ |= 0x00000010;
      durationMs_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * How long this section took, set when EventType is Finish or Failed
     * </pre>
     *
     * <code>optional uint32 duration_ms = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDurationMs() {
      bitField0_ = (bitField0_ & ~0x00000010);
      durationMs_ = 0;
      onChanged();
      return this;
    }

    private int buildMode_ = 0;
    /**
     * <pre>
     * Set if SectionType = Gradle AND EventType = Start
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
     * @return Whether the buildMode field is set.
     */
    public boolean hasBuildMode() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Set if SectionType = Gradle AND EventType = Start
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
     * @return The buildMode.
     */
    public com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode getBuildMode() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode result = com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode.valueOf(buildMode_);
      return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode.UNKNOWN_BUILD_MODE : result;
    }
    /**
     * <pre>
     * Set if SectionType = Gradle AND EventType = Start
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
     * @param value The buildMode to set.
     * @return This builder for chaining.
     */
    public Builder setBuildMode(com.google.wireless.android.sdk.stats.StudioRunEvent.BuildMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      buildMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set if SectionType = Gradle AND EventType = Start
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.BuildMode build_mode = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearBuildMode() {
      bitField0_ = (bitField0_ & ~0x00000020);
      buildMode_ = 0;
      onChanged();
      return this;
    }

    private boolean isSuccessful_ ;
    /**
     * <pre>
     * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
     * </pre>
     *
     * <code>optional bool is_successful = 7;</code>
     * @return Whether the isSuccessful field is set.
     */
    public boolean hasIsSuccessful() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
     * </pre>
     *
     * <code>optional bool is_successful = 7;</code>
     * @return The isSuccessful.
     */
    public boolean getIsSuccessful() {
      return isSuccessful_;
    }
    /**
     * <pre>
     * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
     * </pre>
     *
     * <code>optional bool is_successful = 7;</code>
     * @param value The isSuccessful to set.
     * @return This builder for chaining.
     */
    public Builder setIsSuccessful(boolean value) {
      bitField0_ |= 0x00000040;
      isSuccessful_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set if EventType = FINISH and SectionType = DEPLOY/TOTAL
     * </pre>
     *
     * <code>optional bool is_successful = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsSuccessful() {
      bitField0_ = (bitField0_ & ~0x00000040);
      isSuccessful_ = false;
      onChanged();
      return this;
    }

    private int artifactCount_ ;
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional uint32 artifact_count = 8;</code>
     * @return Whether the artifactCount field is set.
     */
    public boolean hasArtifactCount() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional uint32 artifact_count = 8;</code>
     * @return The artifactCount.
     */
    public int getArtifactCount() {
      return artifactCount_;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional uint32 artifact_count = 8;</code>
     * @param value The artifactCount to set.
     * @return This builder for chaining.
     */
    public Builder setArtifactCount(int value) {
      bitField0_ |= 0x00000080;
      artifactCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional uint32 artifact_count = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearArtifactCount() {
      bitField0_ = (bitField0_ & ~0x00000080);
      artifactCount_ = 0;
      onChanged();
      return this;
    }

    private int deployTask_ = 0;
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
     * @return Whether the deployTask field is set.
     */
    public boolean hasDeployTask() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
     * @return The deployTask.
     */
    public com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask getDeployTask() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask result = com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask.valueOf(deployTask_);
      return result == null ? com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask.UNKNOWN_TASK : result;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
     * @param value The deployTask to set.
     * @return This builder for chaining.
     */
    public Builder setDeployTask(com.google.wireless.android.sdk.stats.StudioRunEvent.DeployTask value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      deployTask_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * </pre>
     *
     * <code>optional .android_studio.StudioRunEvent.DeployTask deploy_task = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeployTask() {
      bitField0_ = (bitField0_ & ~0x00000100);
      deployTask_ = 0;
      onChanged();
      return this;
    }

    private int disabledDynamicFeaturesCount_ ;
    /**
     * <pre>
     * The number of features disabled by the user
     * Set if SectionType = DEPLOY and EventType = START and
     * BuildMode = BUNDLE/APK_FROM_BUNDLE
     * </pre>
     *
     * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
     * @return Whether the disabledDynamicFeaturesCount field is set.
     */
    public boolean hasDisabledDynamicFeaturesCount() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * The number of features disabled by the user
     * Set if SectionType = DEPLOY and EventType = START and
     * BuildMode = BUNDLE/APK_FROM_BUNDLE
     * </pre>
     *
     * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
     * @return The disabledDynamicFeaturesCount.
     */
    public int getDisabledDynamicFeaturesCount() {
      return disabledDynamicFeaturesCount_;
    }
    /**
     * <pre>
     * The number of features disabled by the user
     * Set if SectionType = DEPLOY and EventType = START and
     * BuildMode = BUNDLE/APK_FROM_BUNDLE
     * </pre>
     *
     * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
     * @param value The disabledDynamicFeaturesCount to set.
     * @return This builder for chaining.
     */
    public Builder setDisabledDynamicFeaturesCount(int value) {
      bitField0_ |= 0x00000200;
      disabledDynamicFeaturesCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of features disabled by the user
     * Set if SectionType = DEPLOY and EventType = START and
     * BuildMode = BUNDLE/APK_FROM_BUNDLE
     * </pre>
     *
     * <code>optional uint32 disabled_dynamic_features_count = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisabledDynamicFeaturesCount() {
      bitField0_ = (bitField0_ & ~0x00000200);
      disabledDynamicFeaturesCount_ = 0;
      onChanged();
      return this;
    }

    private boolean instantRun_ ;
    /**
     * <pre>
     * If this Run is using Instant Run, which may use HOTSWAP deploy task
     * but could also use other deploy tasks.
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool instant_run = 12;</code>
     * @return Whether the instantRun field is set.
     */
    public boolean hasInstantRun() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * If this Run is using Instant Run, which may use HOTSWAP deploy task
     * but could also use other deploy tasks.
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool instant_run = 12;</code>
     * @return The instantRun.
     */
    public boolean getInstantRun() {
      return instantRun_;
    }
    /**
     * <pre>
     * If this Run is using Instant Run, which may use HOTSWAP deploy task
     * but could also use other deploy tasks.
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool instant_run = 12;</code>
     * @param value The instantRun to set.
     * @return This builder for chaining.
     */
    public Builder setInstantRun(boolean value) {
      bitField0_ |= 0x00000400;
      instantRun_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this Run is using Instant Run, which may use HOTSWAP deploy task
     * but could also use other deploy tasks.
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool instant_run = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearInstantRun() {
      bitField0_ = (bitField0_ & ~0x00000400);
      instantRun_ = false;
      onChanged();
      return this;
    }

    private boolean patchBuild_ ;
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a partial install
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool patch_build = 13;</code>
     * @return Whether the patchBuild field is set.
     */
    public boolean hasPatchBuild() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a partial install
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool patch_build = 13;</code>
     * @return The patchBuild.
     */
    public boolean getPatchBuild() {
      return patchBuild_;
    }
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a partial install
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool patch_build = 13;</code>
     * @param value The patchBuild to set.
     * @return This builder for chaining.
     */
    public Builder setPatchBuild(boolean value) {
      bitField0_ |= 0x00000800;
      patchBuild_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a partial install
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool patch_build = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearPatchBuild() {
      bitField0_ = (bitField0_ & ~0x00000800);
      patchBuild_ = false;
      onChanged();
      return this;
    }

    private boolean doNotRestart_ ;
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a resource only swap that
     * does not restart the app
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool do_not_restart = 14;</code>
     * @return Whether the doNotRestart field is set.
     */
    public boolean hasDoNotRestart() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a resource only swap that
     * does not restart the app
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool do_not_restart = 14;</code>
     * @return The doNotRestart.
     */
    public boolean getDoNotRestart() {
      return doNotRestart_;
    }
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a resource only swap that
     * does not restart the app
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool do_not_restart = 14;</code>
     * @param value The doNotRestart to set.
     * @return This builder for chaining.
     */
    public Builder setDoNotRestart(boolean value) {
      bitField0_ |= 0x00001000;
      doNotRestart_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If using SplitApkDeployTask and doing a resource only swap that
     * does not restart the app
     * Set if SectionType = DEPLOY and DeployTask = SPLIT_APK_DEPLOY
     * </pre>
     *
     * <code>optional bool do_not_restart = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearDoNotRestart() {
      bitField0_ = (bitField0_ & ~0x00001000);
      doNotRestart_ = false;
      onChanged();
      return this;
    }

    private boolean debuggable_ ;
    /**
     * <pre>
     * If the app's debuggable flag is set to true
     * Set if SectionType = TOTAL and EventType = START
     * </pre>
     *
     * <code>optional bool debuggable = 15;</code>
     * @return Whether the debuggable field is set.
     */
    public boolean hasDebuggable() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * If the app's debuggable flag is set to true
     * Set if SectionType = TOTAL and EventType = START
     * </pre>
     *
     * <code>optional bool debuggable = 15;</code>
     * @return The debuggable.
     */
    public boolean getDebuggable() {
      return debuggable_;
    }
    /**
     * <pre>
     * If the app's debuggable flag is set to true
     * Set if SectionType = TOTAL and EventType = START
     * </pre>
     *
     * <code>optional bool debuggable = 15;</code>
     * @param value The debuggable to set.
     * @return This builder for chaining.
     */
    public Builder setDebuggable(boolean value) {
      bitField0_ |= 0x00002000;
      debuggable_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the app's debuggable flag is set to true
     * Set if SectionType = TOTAL and EventType = START
     * </pre>
     *
     * <code>optional bool debuggable = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearDebuggable() {
      bitField0_ = (bitField0_ & ~0x00002000);
      debuggable_ = false;
      onChanged();
      return this;
    }

    private boolean userSelectedTarget_ ;
    /**
     * <pre>
     * If the deploy target was picked by the user or auto selected by dialog
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool user_selected_target = 16;</code>
     * @return Whether the userSelectedTarget field is set.
     */
    public boolean hasUserSelectedTarget() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * If the deploy target was picked by the user or auto selected by dialog
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool user_selected_target = 16;</code>
     * @return The userSelectedTarget.
     */
    public boolean getUserSelectedTarget() {
      return userSelectedTarget_;
    }
    /**
     * <pre>
     * If the deploy target was picked by the user or auto selected by dialog
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool user_selected_target = 16;</code>
     * @param value The userSelectedTarget to set.
     * @return This builder for chaining.
     */
    public Builder setUserSelectedTarget(boolean value) {
      bitField0_ |= 0x00004000;
      userSelectedTarget_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the deploy target was picked by the user or auto selected by dialog
     * Set if SectionType = STUDIO and EventType = FINISH
     * </pre>
     *
     * <code>optional bool user_selected_target = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserSelectedTarget() {
      bitField0_ = (bitField0_ & ~0x00004000);
      userSelectedTarget_ = false;
      onChanged();
      return this;
    }

    private java.util.List<com.google.wireless.android.sdk.stats.ArtifactDetail> artifactDetails_ =
      java.util.Collections.emptyList();
    private void ensureArtifactDetailsIsMutable() {
      if (!((bitField0_ & 0x00008000) != 0)) {
        artifactDetails_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.ArtifactDetail>(artifactDetails_);
        bitField0_ |= 0x00008000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.ArtifactDetail, com.google.wireless.android.sdk.stats.ArtifactDetail.Builder, com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder> artifactDetailsBuilder_;

    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.ArtifactDetail> getArtifactDetailsList() {
      if (artifactDetailsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(artifactDetails_);
      } else {
        return artifactDetailsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public int getArtifactDetailsCount() {
      if (artifactDetailsBuilder_ == null) {
        return artifactDetails_.size();
      } else {
        return artifactDetailsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public com.google.wireless.android.sdk.stats.ArtifactDetail getArtifactDetails(int index) {
      if (artifactDetailsBuilder_ == null) {
        return artifactDetails_.get(index);
      } else {
        return artifactDetailsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder setArtifactDetails(
        int index, com.google.wireless.android.sdk.stats.ArtifactDetail value) {
      if (artifactDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArtifactDetailsIsMutable();
        artifactDetails_.set(index, value);
        onChanged();
      } else {
        artifactDetailsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder setArtifactDetails(
        int index, com.google.wireless.android.sdk.stats.ArtifactDetail.Builder builderForValue) {
      if (artifactDetailsBuilder_ == null) {
        ensureArtifactDetailsIsMutable();
        artifactDetails_.set(index, builderForValue.build());
        onChanged();
      } else {
        artifactDetailsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder addArtifactDetails(com.google.wireless.android.sdk.stats.ArtifactDetail value) {
      if (artifactDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArtifactDetailsIsMutable();
        artifactDetails_.add(value);
        onChanged();
      } else {
        artifactDetailsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder addArtifactDetails(
        int index, com.google.wireless.android.sdk.stats.ArtifactDetail value) {
      if (artifactDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArtifactDetailsIsMutable();
        artifactDetails_.add(index, value);
        onChanged();
      } else {
        artifactDetailsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder addArtifactDetails(
        com.google.wireless.android.sdk.stats.ArtifactDetail.Builder builderForValue) {
      if (artifactDetailsBuilder_ == null) {
        ensureArtifactDetailsIsMutable();
        artifactDetails_.add(builderForValue.build());
        onChanged();
      } else {
        artifactDetailsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder addArtifactDetails(
        int index, com.google.wireless.android.sdk.stats.ArtifactDetail.Builder builderForValue) {
      if (artifactDetailsBuilder_ == null) {
        ensureArtifactDetailsIsMutable();
        artifactDetails_.add(index, builderForValue.build());
        onChanged();
      } else {
        artifactDetailsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder addAllArtifactDetails(
        java.lang.Iterable<? extends com.google.wireless.android.sdk.stats.ArtifactDetail> values) {
      if (artifactDetailsBuilder_ == null) {
        ensureArtifactDetailsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, artifactDetails_);
        onChanged();
      } else {
        artifactDetailsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder clearArtifactDetails() {
      if (artifactDetailsBuilder_ == null) {
        artifactDetails_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
      } else {
        artifactDetailsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public Builder removeArtifactDetails(int index) {
      if (artifactDetailsBuilder_ == null) {
        ensureArtifactDetailsIsMutable();
        artifactDetails_.remove(index);
        onChanged();
      } else {
        artifactDetailsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public com.google.wireless.android.sdk.stats.ArtifactDetail.Builder getArtifactDetailsBuilder(
        int index) {
      return getArtifactDetailsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder getArtifactDetailsOrBuilder(
        int index) {
      if (artifactDetailsBuilder_ == null) {
        return artifactDetails_.get(index);  } else {
        return artifactDetailsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public java.util.List<? extends com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder>
         getArtifactDetailsOrBuilderList() {
      if (artifactDetailsBuilder_ != null) {
        return artifactDetailsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(artifactDetails_);
      }
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public com.google.wireless.android.sdk.stats.ArtifactDetail.Builder addArtifactDetailsBuilder() {
      return getArtifactDetailsFieldBuilder().addBuilder(
          com.google.wireless.android.sdk.stats.ArtifactDetail.getDefaultInstance());
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public com.google.wireless.android.sdk.stats.ArtifactDetail.Builder addArtifactDetailsBuilder(
        int index) {
      return getArtifactDetailsFieldBuilder().addBuilder(
          index, com.google.wireless.android.sdk.stats.ArtifactDetail.getDefaultInstance());
    }
    /**
     * <pre>
     * Set if EventType = START and SectionType = DEPLOY
     * Details of each artifact being deployed.
     * </pre>
     *
     * <code>repeated .android_studio.ArtifactDetail artifact_details = 17;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.ArtifactDetail.Builder>
         getArtifactDetailsBuilderList() {
      return getArtifactDetailsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.ArtifactDetail, com.google.wireless.android.sdk.stats.ArtifactDetail.Builder, com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder>
        getArtifactDetailsFieldBuilder() {
      if (artifactDetailsBuilder_ == null) {
        artifactDetailsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.wireless.android.sdk.stats.ArtifactDetail, com.google.wireless.android.sdk.stats.ArtifactDetail.Builder, com.google.wireless.android.sdk.stats.ArtifactDetailOrBuilder>(
                artifactDetails_,
                ((bitField0_ & 0x00008000) != 0),
                getParentForChildren(),
                isClean());
        artifactDetails_ = null;
      }
      return artifactDetailsBuilder_;
    }

    private boolean forceColdswap_ ;
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If user clicked the Run button instead of Apply Changes
     * </pre>
     *
     * <code>optional bool force_coldswap = 18;</code>
     * @return Whether the forceColdswap field is set.
     */
    public boolean hasForceColdswap() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If user clicked the Run button instead of Apply Changes
     * </pre>
     *
     * <code>optional bool force_coldswap = 18;</code>
     * @return The forceColdswap.
     */
    public boolean getForceColdswap() {
      return forceColdswap_;
    }
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If user clicked the Run button instead of Apply Changes
     * </pre>
     *
     * <code>optional bool force_coldswap = 18;</code>
     * @param value The forceColdswap to set.
     * @return This builder for chaining.
     */
    public Builder setForceColdswap(boolean value) {
      bitField0_ |= 0x00010000;
      forceColdswap_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If user clicked the Run button instead of Apply Changes
     * </pre>
     *
     * <code>optional bool force_coldswap = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearForceColdswap() {
      bitField0_ = (bitField0_ & ~0x00010000);
      forceColdswap_ = false;
      onChanged();
      return this;
    }

    private boolean instantRunEnabled_ ;
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If Instant Run setting is enabled
     * </pre>
     *
     * <code>optional bool instant_run_enabled = 19;</code>
     * @return Whether the instantRunEnabled field is set.
     */
    public boolean hasInstantRunEnabled() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If Instant Run setting is enabled
     * </pre>
     *
     * <code>optional bool instant_run_enabled = 19;</code>
     * @return The instantRunEnabled.
     */
    public boolean getInstantRunEnabled() {
      return instantRunEnabled_;
    }
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If Instant Run setting is enabled
     * </pre>
     *
     * <code>optional bool instant_run_enabled = 19;</code>
     * @param value The instantRunEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setInstantRunEnabled(boolean value) {
      bitField0_ |= 0x00020000;
      instantRunEnabled_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set when EventType = START and SectionType = TOTAL
     * If Instant Run setting is enabled
     * </pre>
     *
     * <code>optional bool instant_run_enabled = 19;</code>
     * @return This builder for chaining.
     */
    public Builder clearInstantRunEnabled() {
      bitField0_ = (bitField0_ & ~0x00020000);
      instantRunEnabled_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.StudioRunEvent)
  }

  // @@protoc_insertion_point(class_scope:android_studio.StudioRunEvent)
  private static final com.google.wireless.android.sdk.stats.StudioRunEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.StudioRunEvent();
  }

  public static com.google.wireless.android.sdk.stats.StudioRunEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<StudioRunEvent>
      PARSER = new com.google.protobuf.AbstractParser<StudioRunEvent>() {
    @java.lang.Override
    public StudioRunEvent parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new StudioRunEvent(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StudioRunEvent> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StudioRunEvent> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.StudioRunEvent getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

