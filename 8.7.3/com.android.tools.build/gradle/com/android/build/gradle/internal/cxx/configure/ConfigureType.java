// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cxx_configure.proto

package com.android.build.gradle.internal.cxx.configure;

/**
 * <pre>
 * Whether to configure C/C++ and what type of configure it should be.
 * </pre>
 *
 * Protobuf enum {@code ConfigureType}
 */
public enum ConfigureType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_CONFIGURE_TYPE = 0;</code>
   */
  UNKNOWN_CONFIGURE_TYPE(0),
  /**
   * <pre>
   * No configure is needed.
   * </pre>
   *
   * <code>NO_CONFIGURE = 1;</code>
   */
  NO_CONFIGURE(1),
  /**
   * <pre>
   * Okay to run C/C++ configure without first deleting the configure
   * output folder.
   * </pre>
   *
   * <code>SOFT_CONFIGURE = 2;</code>
   */
  SOFT_CONFIGURE(2),
  /**
   * <pre>
   * Configure also requires first deleting the configure output folder.
   * </pre>
   *
   * <code>HARD_CONFIGURE = 3;</code>
   */
  HARD_CONFIGURE(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_CONFIGURE_TYPE = 0;</code>
   */
  public static final int UNKNOWN_CONFIGURE_TYPE_VALUE = 0;
  /**
   * <pre>
   * No configure is needed.
   * </pre>
   *
   * <code>NO_CONFIGURE = 1;</code>
   */
  public static final int NO_CONFIGURE_VALUE = 1;
  /**
   * <pre>
   * Okay to run C/C++ configure without first deleting the configure
   * output folder.
   * </pre>
   *
   * <code>SOFT_CONFIGURE = 2;</code>
   */
  public static final int SOFT_CONFIGURE_VALUE = 2;
  /**
   * <pre>
   * Configure also requires first deleting the configure output folder.
   * </pre>
   *
   * <code>HARD_CONFIGURE = 3;</code>
   */
  public static final int HARD_CONFIGURE_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ConfigureType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ConfigureType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_CONFIGURE_TYPE;
      case 1: return NO_CONFIGURE;
      case 2: return SOFT_CONFIGURE;
      case 3: return HARD_CONFIGURE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ConfigureType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ConfigureType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ConfigureType>() {
          public ConfigureType findValueByNumber(int number) {
            return ConfigureType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.android.build.gradle.internal.cxx.configure.CxxConfigure.getDescriptor().getEnumTypes().get(0);
  }

  private static final ConfigureType[] VALUES = values();

  public static ConfigureType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ConfigureType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:ConfigureType)
}

