// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

/**
 * <pre>
 * Information about a session running lint -- in build, in IDE, etc
 * </pre>
 *
 * Protobuf type {@code android_studio.LintSession}
 */
public  final class LintSession extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:android_studio.LintSession)
    LintSessionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LintSession.newBuilder() to construct.
  private LintSession(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LintSession() {
    analysisType_ = 0;
    issueIds_ = java.util.Collections.emptyList();
    projectId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LintSession();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LintSession(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
            com.google.wireless.android.sdk.stats.LintSession.AnalysisType value = com.google.wireless.android.sdk.stats.LintSession.AnalysisType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              bitField0_ |= 0x00000001;
              analysisType_ = rawValue;
            }
            break;
          }
          case 18: {
            com.google.wireless.android.sdk.stats.LintPerformance.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) != 0)) {
              subBuilder = lintPerformance_.toBuilder();
            }
            lintPerformance_ = input.readMessage(com.google.wireless.android.sdk.stats.LintPerformance.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(lintPerformance_);
              lintPerformance_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              issueIds_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.LintIssueId>();
              mutable_bitField0_ |= 0x00000004;
            }
            issueIds_.add(
                input.readMessage(com.google.wireless.android.sdk.stats.LintIssueId.PARSER, extensionRegistry));
            break;
          }
          case 34: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000004;
            projectId_ = bs;
            break;
          }
          case 40: {
            bitField0_ |= 0x00000008;
            baselineEnabled_ = input.readBool();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000010;
            includingTestSources_ = input.readBool();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000020;
            includingGeneratedSources_ = input.readBool();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000040;
            includingDependencies_ = input.readBool();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000080;
            abortOnError_ = input.readBool();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000100;
            ignoreWarnings_ = input.readBool();
            break;
          }
          case 88: {
            bitField0_ |= 0x00000200;
            warningsAsErrors_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        issueIds_ = java.util.Collections.unmodifiableList(issueIds_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_LintSession_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_LintSession_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.wireless.android.sdk.stats.LintSession.class, com.google.wireless.android.sdk.stats.LintSession.Builder.class);
  }

  /**
   * <pre>
   * The type of lint run that was performed: in IDE, from build, etc
   * </pre>
   *
   * Protobuf enum {@code android_studio.LintSession.AnalysisType}
   */
  public enum AnalysisType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Other
     * </pre>
     *
     * <code>UNKNOWN_ANALYSIS_TYPE = 0;</code>
     */
    UNKNOWN_ANALYSIS_TYPE(0),
    /**
     * <pre>
     * Explicit lint (batch) execution, typically for a single variant
     * If reporting statistics for a complete multi-variant analysis (which
     * involves running lint repeatedly on each variant and then combining
     * the results) use BUILD_ALL_VARIANTS instead
     * </pre>
     *
     * <code>BUILD = 1;</code>
     */
    BUILD(1),
    /**
     * <pre>
     * Running lint implicitly as part of a release build, with a small
     * subset of checks enabled
     * </pre>
     *
     * <code>VITAL = 2;</code>
     */
    VITAL(2),
    /**
     * <pre>
     * Running a full lint analysis from the IDE (Analyze &gt; Inspect Code)
     * </pre>
     *
     * <code>IDE_BATCH = 3;</code>
     */
    IDE_BATCH(3),
    /**
     * <pre>
     * Running lint on the fly in the editor for a single file
     * </pre>
     *
     * <code>IDE_FILE = 4;</code>
     */
    IDE_FILE(4),
    /**
     * <pre>
     * Running the "lint" target on a project to compute results for all
     * variants and product flavors
     * </pre>
     *
     * <code>BUILD_ALL_VARIANTS = 5;</code>
     */
    BUILD_ALL_VARIANTS(5),
    ;

    /**
     * <pre>
     * Other
     * </pre>
     *
     * <code>UNKNOWN_ANALYSIS_TYPE = 0;</code>
     */
    public static final int UNKNOWN_ANALYSIS_TYPE_VALUE = 0;
    /**
     * <pre>
     * Explicit lint (batch) execution, typically for a single variant
     * If reporting statistics for a complete multi-variant analysis (which
     * involves running lint repeatedly on each variant and then combining
     * the results) use BUILD_ALL_VARIANTS instead
     * </pre>
     *
     * <code>BUILD = 1;</code>
     */
    public static final int BUILD_VALUE = 1;
    /**
     * <pre>
     * Running lint implicitly as part of a release build, with a small
     * subset of checks enabled
     * </pre>
     *
     * <code>VITAL = 2;</code>
     */
    public static final int VITAL_VALUE = 2;
    /**
     * <pre>
     * Running a full lint analysis from the IDE (Analyze &gt; Inspect Code)
     * </pre>
     *
     * <code>IDE_BATCH = 3;</code>
     */
    public static final int IDE_BATCH_VALUE = 3;
    /**
     * <pre>
     * Running lint on the fly in the editor for a single file
     * </pre>
     *
     * <code>IDE_FILE = 4;</code>
     */
    public static final int IDE_FILE_VALUE = 4;
    /**
     * <pre>
     * Running the "lint" target on a project to compute results for all
     * variants and product flavors
     * </pre>
     *
     * <code>BUILD_ALL_VARIANTS = 5;</code>
     */
    public static final int BUILD_ALL_VARIANTS_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AnalysisType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AnalysisType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_ANALYSIS_TYPE;
        case 1: return BUILD;
        case 2: return VITAL;
        case 3: return IDE_BATCH;
        case 4: return IDE_FILE;
        case 5: return BUILD_ALL_VARIANTS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AnalysisType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AnalysisType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AnalysisType>() {
            public AnalysisType findValueByNumber(int number) {
              return AnalysisType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.LintSession.getDescriptor().getEnumTypes().get(0);
    }

    private static final AnalysisType[] VALUES = values();

    public static AnalysisType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AnalysisType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:android_studio.LintSession.AnalysisType)
  }

  private int bitField0_;
  public static final int ANALYSIS_TYPE_FIELD_NUMBER = 1;
  private int analysisType_;
  /**
   * <pre>
   * analysis type - build, ide batch, ide incremental
   * </pre>
   *
   * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
   * @return Whether the analysisType field is set.
   */
  public boolean hasAnalysisType() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * analysis type - build, ide batch, ide incremental
   * </pre>
   *
   * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
   * @return The analysisType.
   */
  public com.google.wireless.android.sdk.stats.LintSession.AnalysisType getAnalysisType() {
    @SuppressWarnings("deprecation")
    com.google.wireless.android.sdk.stats.LintSession.AnalysisType result = com.google.wireless.android.sdk.stats.LintSession.AnalysisType.valueOf(analysisType_);
    return result == null ? com.google.wireless.android.sdk.stats.LintSession.AnalysisType.UNKNOWN_ANALYSIS_TYPE : result;
  }

  public static final int LINT_PERFORMANCE_FIELD_NUMBER = 2;
  private com.google.wireless.android.sdk.stats.LintPerformance lintPerformance_;
  /**
   * <pre>
   * performance metrics regarding this session
   * </pre>
   *
   * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
   * @return Whether the lintPerformance field is set.
   */
  public boolean hasLintPerformance() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * performance metrics regarding this session
   * </pre>
   *
   * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
   * @return The lintPerformance.
   */
  public com.google.wireless.android.sdk.stats.LintPerformance getLintPerformance() {
    return lintPerformance_ == null ? com.google.wireless.android.sdk.stats.LintPerformance.getDefaultInstance() : lintPerformance_;
  }
  /**
   * <pre>
   * performance metrics regarding this session
   * </pre>
   *
   * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
   */
  public com.google.wireless.android.sdk.stats.LintPerformanceOrBuilder getLintPerformanceOrBuilder() {
    return lintPerformance_ == null ? com.google.wireless.android.sdk.stats.LintPerformance.getDefaultInstance() : lintPerformance_;
  }

  public static final int ISSUE_IDS_FIELD_NUMBER = 3;
  private java.util.List<com.google.wireless.android.sdk.stats.LintIssueId> issueIds_;
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  public java.util.List<com.google.wireless.android.sdk.stats.LintIssueId> getIssueIdsList() {
    return issueIds_;
  }
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  public java.util.List<? extends com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder>
      getIssueIdsOrBuilderList() {
    return issueIds_;
  }
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  public int getIssueIdsCount() {
    return issueIds_.size();
  }
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  public com.google.wireless.android.sdk.stats.LintIssueId getIssueIds(int index) {
    return issueIds_.get(index);
  }
  /**
   * <pre>
   * lint issue id's (counts, severity, etc)
   * </pre>
   *
   * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
   */
  public com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder getIssueIdsOrBuilder(
      int index) {
    return issueIds_.get(index);
  }

  public static final int PROJECT_ID_FIELD_NUMBER = 4;
  private volatile java.lang.Object projectId_;
  /**
   * <pre>
   * Client-side salted, sha256 of the root project path.
   * This exists to allow multiple instant run builds in one project by one
   * user to be correlated.
   * The salt is rotated every 28 days, so it is not a permanent pseudonymous
   * identifier. It is anonymized and is unique per user, but has a 1-N
   * relation.
   * </pre>
   *
   * <code>optional string project_id = 4;</code>
   * @return Whether the projectId field is set.
   */
  public boolean hasProjectId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Client-side salted, sha256 of the root project path.
   * This exists to allow multiple instant run builds in one project by one
   * user to be correlated.
   * The salt is rotated every 28 days, so it is not a permanent pseudonymous
   * identifier. It is anonymized and is unique per user, but has a 1-N
   * relation.
   * </pre>
   *
   * <code>optional string project_id = 4;</code>
   * @return The projectId.
   */
  public java.lang.String getProjectId() {
    java.lang.Object ref = projectId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        projectId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Client-side salted, sha256 of the root project path.
   * This exists to allow multiple instant run builds in one project by one
   * user to be correlated.
   * The salt is rotated every 28 days, so it is not a permanent pseudonymous
   * identifier. It is anonymized and is unique per user, but has a 1-N
   * relation.
   * </pre>
   *
   * <code>optional string project_id = 4;</code>
   * @return The bytes for projectId.
   */
  public com.google.protobuf.ByteString
      getProjectIdBytes() {
    java.lang.Object ref = projectId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      projectId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BASELINE_ENABLED_FIELD_NUMBER = 5;
  private boolean baselineEnabled_;
  /**
   * <pre>
   * true if user is using baselines
   * </pre>
   *
   * <code>optional bool baseline_enabled = 5;</code>
   * @return Whether the baselineEnabled field is set.
   */
  public boolean hasBaselineEnabled() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * true if user is using baselines
   * </pre>
   *
   * <code>optional bool baseline_enabled = 5;</code>
   * @return The baselineEnabled.
   */
  public boolean getBaselineEnabled() {
    return baselineEnabled_;
  }

  public static final int INCLUDING_TEST_SOURCES_FIELD_NUMBER = 6;
  private boolean includingTestSources_;
  /**
   * <pre>
   * true if user is analyzing test sources
   * </pre>
   *
   * <code>optional bool including_test_sources = 6;</code>
   * @return Whether the includingTestSources field is set.
   */
  public boolean hasIncludingTestSources() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * true if user is analyzing test sources
   * </pre>
   *
   * <code>optional bool including_test_sources = 6;</code>
   * @return The includingTestSources.
   */
  public boolean getIncludingTestSources() {
    return includingTestSources_;
  }

  public static final int INCLUDING_GENERATED_SOURCES_FIELD_NUMBER = 7;
  private boolean includingGeneratedSources_;
  /**
   * <pre>
   * true if user is analyzing generated sources
   * </pre>
   *
   * <code>optional bool including_generated_sources = 7;</code>
   * @return Whether the includingGeneratedSources field is set.
   */
  public boolean hasIncludingGeneratedSources() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * true if user is analyzing generated sources
   * </pre>
   *
   * <code>optional bool including_generated_sources = 7;</code>
   * @return The includingGeneratedSources.
   */
  public boolean getIncludingGeneratedSources() {
    return includingGeneratedSources_;
  }

  public static final int INCLUDING_DEPENDENCIES_FIELD_NUMBER = 8;
  private boolean includingDependencies_;
  /**
   * <pre>
   * true if user is analyzing dependencies
   * </pre>
   *
   * <code>optional bool including_dependencies = 8;</code>
   * @return Whether the includingDependencies field is set.
   */
  public boolean hasIncludingDependencies() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * true if user is analyzing dependencies
   * </pre>
   *
   * <code>optional bool including_dependencies = 8;</code>
   * @return The includingDependencies.
   */
  public boolean getIncludingDependencies() {
    return includingDependencies_;
  }

  public static final int ABORT_ON_ERROR_FIELD_NUMBER = 9;
  private boolean abortOnError_;
  /**
   * <pre>
   * true if the build is configured to abort on error
   * </pre>
   *
   * <code>optional bool abort_on_error = 9;</code>
   * @return Whether the abortOnError field is set.
   */
  public boolean hasAbortOnError() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * true if the build is configured to abort on error
   * </pre>
   *
   * <code>optional bool abort_on_error = 9;</code>
   * @return The abortOnError.
   */
  public boolean getAbortOnError() {
    return abortOnError_;
  }

  public static final int IGNORE_WARNINGS_FIELD_NUMBER = 10;
  private boolean ignoreWarnings_;
  /**
   * <pre>
   * true if the build is configured to only check errors, not warnings
   * </pre>
   *
   * <code>optional bool ignore_warnings = 10;</code>
   * @return Whether the ignoreWarnings field is set.
   */
  public boolean hasIgnoreWarnings() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * true if the build is configured to only check errors, not warnings
   * </pre>
   *
   * <code>optional bool ignore_warnings = 10;</code>
   * @return The ignoreWarnings.
   */
  public boolean getIgnoreWarnings() {
    return ignoreWarnings_;
  }

  public static final int WARNINGS_AS_ERRORS_FIELD_NUMBER = 11;
  private boolean warningsAsErrors_;
  /**
   * <pre>
   * true if the build is configured to promote all warnings to errors
   * </pre>
   *
   * <code>optional bool warnings_as_errors = 11;</code>
   * @return Whether the warningsAsErrors field is set.
   */
  public boolean hasWarningsAsErrors() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * true if the build is configured to promote all warnings to errors
   * </pre>
   *
   * <code>optional bool warnings_as_errors = 11;</code>
   * @return The warningsAsErrors.
   */
  public boolean getWarningsAsErrors() {
    return warningsAsErrors_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, analysisType_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getLintPerformance());
    }
    for (int i = 0; i < issueIds_.size(); i++) {
      output.writeMessage(3, issueIds_.get(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, projectId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeBool(5, baselineEnabled_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeBool(6, includingTestSources_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeBool(7, includingGeneratedSources_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeBool(8, includingDependencies_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeBool(9, abortOnError_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeBool(10, ignoreWarnings_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeBool(11, warningsAsErrors_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, analysisType_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getLintPerformance());
    }
    for (int i = 0; i < issueIds_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, issueIds_.get(i));
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, projectId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, baselineEnabled_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, includingTestSources_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, includingGeneratedSources_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, includingDependencies_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, abortOnError_);
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, ignoreWarnings_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, warningsAsErrors_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.wireless.android.sdk.stats.LintSession)) {
      return super.equals(obj);
    }
    com.google.wireless.android.sdk.stats.LintSession other = (com.google.wireless.android.sdk.stats.LintSession) obj;

    if (hasAnalysisType() != other.hasAnalysisType()) return false;
    if (hasAnalysisType()) {
      if (analysisType_ != other.analysisType_) return false;
    }
    if (hasLintPerformance() != other.hasLintPerformance()) return false;
    if (hasLintPerformance()) {
      if (!getLintPerformance()
          .equals(other.getLintPerformance())) return false;
    }
    if (!getIssueIdsList()
        .equals(other.getIssueIdsList())) return false;
    if (hasProjectId() != other.hasProjectId()) return false;
    if (hasProjectId()) {
      if (!getProjectId()
          .equals(other.getProjectId())) return false;
    }
    if (hasBaselineEnabled() != other.hasBaselineEnabled()) return false;
    if (hasBaselineEnabled()) {
      if (getBaselineEnabled()
          != other.getBaselineEnabled()) return false;
    }
    if (hasIncludingTestSources() != other.hasIncludingTestSources()) return false;
    if (hasIncludingTestSources()) {
      if (getIncludingTestSources()
          != other.getIncludingTestSources()) return false;
    }
    if (hasIncludingGeneratedSources() != other.hasIncludingGeneratedSources()) return false;
    if (hasIncludingGeneratedSources()) {
      if (getIncludingGeneratedSources()
          != other.getIncludingGeneratedSources()) return false;
    }
    if (hasIncludingDependencies() != other.hasIncludingDependencies()) return false;
    if (hasIncludingDependencies()) {
      if (getIncludingDependencies()
          != other.getIncludingDependencies()) return false;
    }
    if (hasAbortOnError() != other.hasAbortOnError()) return false;
    if (hasAbortOnError()) {
      if (getAbortOnError()
          != other.getAbortOnError()) return false;
    }
    if (hasIgnoreWarnings() != other.hasIgnoreWarnings()) return false;
    if (hasIgnoreWarnings()) {
      if (getIgnoreWarnings()
          != other.getIgnoreWarnings()) return false;
    }
    if (hasWarningsAsErrors() != other.hasWarningsAsErrors()) return false;
    if (hasWarningsAsErrors()) {
      if (getWarningsAsErrors()
          != other.getWarningsAsErrors()) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasAnalysisType()) {
      hash = (37 * hash) + ANALYSIS_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + analysisType_;
    }
    if (hasLintPerformance()) {
      hash = (37 * hash) + LINT_PERFORMANCE_FIELD_NUMBER;
      hash = (53 * hash) + getLintPerformance().hashCode();
    }
    if (getIssueIdsCount() > 0) {
      hash = (37 * hash) + ISSUE_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getIssueIdsList().hashCode();
    }
    if (hasProjectId()) {
      hash = (37 * hash) + PROJECT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getProjectId().hashCode();
    }
    if (hasBaselineEnabled()) {
      hash = (37 * hash) + BASELINE_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBaselineEnabled());
    }
    if (hasIncludingTestSources()) {
      hash = (37 * hash) + INCLUDING_TEST_SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludingTestSources());
    }
    if (hasIncludingGeneratedSources()) {
      hash = (37 * hash) + INCLUDING_GENERATED_SOURCES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludingGeneratedSources());
    }
    if (hasIncludingDependencies()) {
      hash = (37 * hash) + INCLUDING_DEPENDENCIES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludingDependencies());
    }
    if (hasAbortOnError()) {
      hash = (37 * hash) + ABORT_ON_ERROR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAbortOnError());
    }
    if (hasIgnoreWarnings()) {
      hash = (37 * hash) + IGNORE_WARNINGS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIgnoreWarnings());
    }
    if (hasWarningsAsErrors()) {
      hash = (37 * hash) + WARNINGS_AS_ERRORS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getWarningsAsErrors());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.wireless.android.sdk.stats.LintSession parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.wireless.android.sdk.stats.LintSession prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Information about a session running lint -- in build, in IDE, etc
   * </pre>
   *
   * Protobuf type {@code android_studio.LintSession}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:android_studio.LintSession)
      com.google.wireless.android.sdk.stats.LintSessionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_LintSession_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_LintSession_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.wireless.android.sdk.stats.LintSession.class, com.google.wireless.android.sdk.stats.LintSession.Builder.class);
    }

    // Construct using com.google.wireless.android.sdk.stats.LintSession.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLintPerformanceFieldBuilder();
        getIssueIdsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      analysisType_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (lintPerformanceBuilder_ == null) {
        lintPerformance_ = null;
      } else {
        lintPerformanceBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (issueIdsBuilder_ == null) {
        issueIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        issueIdsBuilder_.clear();
      }
      projectId_ = "";
      bitField0_ = (bitField0_ & ~0x00000008);
      baselineEnabled_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      includingTestSources_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      includingGeneratedSources_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      includingDependencies_ = false;
      bitField0_ = (bitField0_ & ~0x00000080);
      abortOnError_ = false;
      bitField0_ = (bitField0_ & ~0x00000100);
      ignoreWarnings_ = false;
      bitField0_ = (bitField0_ & ~0x00000200);
      warningsAsErrors_ = false;
      bitField0_ = (bitField0_ & ~0x00000400);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.wireless.android.sdk.stats.AndroidStudioStats.internal_static_android_studio_LintSession_descriptor;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.LintSession getDefaultInstanceForType() {
      return com.google.wireless.android.sdk.stats.LintSession.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.LintSession build() {
      com.google.wireless.android.sdk.stats.LintSession result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.wireless.android.sdk.stats.LintSession buildPartial() {
      com.google.wireless.android.sdk.stats.LintSession result = new com.google.wireless.android.sdk.stats.LintSession(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.analysisType_ = analysisType_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        if (lintPerformanceBuilder_ == null) {
          result.lintPerformance_ = lintPerformance_;
        } else {
          result.lintPerformance_ = lintPerformanceBuilder_.build();
        }
        to_bitField0_ |= 0x00000002;
      }
      if (issueIdsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          issueIds_ = java.util.Collections.unmodifiableList(issueIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.issueIds_ = issueIds_;
      } else {
        result.issueIds_ = issueIdsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        to_bitField0_ |= 0x00000004;
      }
      result.projectId_ = projectId_;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.baselineEnabled_ = baselineEnabled_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.includingTestSources_ = includingTestSources_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.includingGeneratedSources_ = includingGeneratedSources_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.includingDependencies_ = includingDependencies_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.abortOnError_ = abortOnError_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.ignoreWarnings_ = ignoreWarnings_;
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.warningsAsErrors_ = warningsAsErrors_;
        to_bitField0_ |= 0x00000200;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.wireless.android.sdk.stats.LintSession) {
        return mergeFrom((com.google.wireless.android.sdk.stats.LintSession)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.wireless.android.sdk.stats.LintSession other) {
      if (other == com.google.wireless.android.sdk.stats.LintSession.getDefaultInstance()) return this;
      if (other.hasAnalysisType()) {
        setAnalysisType(other.getAnalysisType());
      }
      if (other.hasLintPerformance()) {
        mergeLintPerformance(other.getLintPerformance());
      }
      if (issueIdsBuilder_ == null) {
        if (!other.issueIds_.isEmpty()) {
          if (issueIds_.isEmpty()) {
            issueIds_ = other.issueIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureIssueIdsIsMutable();
            issueIds_.addAll(other.issueIds_);
          }
          onChanged();
        }
      } else {
        if (!other.issueIds_.isEmpty()) {
          if (issueIdsBuilder_.isEmpty()) {
            issueIdsBuilder_.dispose();
            issueIdsBuilder_ = null;
            issueIds_ = other.issueIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
            issueIdsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getIssueIdsFieldBuilder() : null;
          } else {
            issueIdsBuilder_.addAllMessages(other.issueIds_);
          }
        }
      }
      if (other.hasProjectId()) {
        bitField0_ |= 0x00000008;
        projectId_ = other.projectId_;
        onChanged();
      }
      if (other.hasBaselineEnabled()) {
        setBaselineEnabled(other.getBaselineEnabled());
      }
      if (other.hasIncludingTestSources()) {
        setIncludingTestSources(other.getIncludingTestSources());
      }
      if (other.hasIncludingGeneratedSources()) {
        setIncludingGeneratedSources(other.getIncludingGeneratedSources());
      }
      if (other.hasIncludingDependencies()) {
        setIncludingDependencies(other.getIncludingDependencies());
      }
      if (other.hasAbortOnError()) {
        setAbortOnError(other.getAbortOnError());
      }
      if (other.hasIgnoreWarnings()) {
        setIgnoreWarnings(other.getIgnoreWarnings());
      }
      if (other.hasWarningsAsErrors()) {
        setWarningsAsErrors(other.getWarningsAsErrors());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.wireless.android.sdk.stats.LintSession parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.wireless.android.sdk.stats.LintSession) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int analysisType_ = 0;
    /**
     * <pre>
     * analysis type - build, ide batch, ide incremental
     * </pre>
     *
     * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
     * @return Whether the analysisType field is set.
     */
    public boolean hasAnalysisType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * analysis type - build, ide batch, ide incremental
     * </pre>
     *
     * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
     * @return The analysisType.
     */
    public com.google.wireless.android.sdk.stats.LintSession.AnalysisType getAnalysisType() {
      @SuppressWarnings("deprecation")
      com.google.wireless.android.sdk.stats.LintSession.AnalysisType result = com.google.wireless.android.sdk.stats.LintSession.AnalysisType.valueOf(analysisType_);
      return result == null ? com.google.wireless.android.sdk.stats.LintSession.AnalysisType.UNKNOWN_ANALYSIS_TYPE : result;
    }
    /**
     * <pre>
     * analysis type - build, ide batch, ide incremental
     * </pre>
     *
     * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
     * @param value The analysisType to set.
     * @return This builder for chaining.
     */
    public Builder setAnalysisType(com.google.wireless.android.sdk.stats.LintSession.AnalysisType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      analysisType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * analysis type - build, ide batch, ide incremental
     * </pre>
     *
     * <code>optional .android_studio.LintSession.AnalysisType analysis_type = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearAnalysisType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      analysisType_ = 0;
      onChanged();
      return this;
    }

    private com.google.wireless.android.sdk.stats.LintPerformance lintPerformance_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.LintPerformance, com.google.wireless.android.sdk.stats.LintPerformance.Builder, com.google.wireless.android.sdk.stats.LintPerformanceOrBuilder> lintPerformanceBuilder_;
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     * @return Whether the lintPerformance field is set.
     */
    public boolean hasLintPerformance() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     * @return The lintPerformance.
     */
    public com.google.wireless.android.sdk.stats.LintPerformance getLintPerformance() {
      if (lintPerformanceBuilder_ == null) {
        return lintPerformance_ == null ? com.google.wireless.android.sdk.stats.LintPerformance.getDefaultInstance() : lintPerformance_;
      } else {
        return lintPerformanceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    public Builder setLintPerformance(com.google.wireless.android.sdk.stats.LintPerformance value) {
      if (lintPerformanceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        lintPerformance_ = value;
        onChanged();
      } else {
        lintPerformanceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    public Builder setLintPerformance(
        com.google.wireless.android.sdk.stats.LintPerformance.Builder builderForValue) {
      if (lintPerformanceBuilder_ == null) {
        lintPerformance_ = builderForValue.build();
        onChanged();
      } else {
        lintPerformanceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    public Builder mergeLintPerformance(com.google.wireless.android.sdk.stats.LintPerformance value) {
      if (lintPerformanceBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
            lintPerformance_ != null &&
            lintPerformance_ != com.google.wireless.android.sdk.stats.LintPerformance.getDefaultInstance()) {
          lintPerformance_ =
            com.google.wireless.android.sdk.stats.LintPerformance.newBuilder(lintPerformance_).mergeFrom(value).buildPartial();
        } else {
          lintPerformance_ = value;
        }
        onChanged();
      } else {
        lintPerformanceBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    public Builder clearLintPerformance() {
      if (lintPerformanceBuilder_ == null) {
        lintPerformance_ = null;
        onChanged();
      } else {
        lintPerformanceBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.LintPerformance.Builder getLintPerformanceBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getLintPerformanceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    public com.google.wireless.android.sdk.stats.LintPerformanceOrBuilder getLintPerformanceOrBuilder() {
      if (lintPerformanceBuilder_ != null) {
        return lintPerformanceBuilder_.getMessageOrBuilder();
      } else {
        return lintPerformance_ == null ?
            com.google.wireless.android.sdk.stats.LintPerformance.getDefaultInstance() : lintPerformance_;
      }
    }
    /**
     * <pre>
     * performance metrics regarding this session
     * </pre>
     *
     * <code>optional .android_studio.LintPerformance lint_performance = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.wireless.android.sdk.stats.LintPerformance, com.google.wireless.android.sdk.stats.LintPerformance.Builder, com.google.wireless.android.sdk.stats.LintPerformanceOrBuilder>
        getLintPerformanceFieldBuilder() {
      if (lintPerformanceBuilder_ == null) {
        lintPerformanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.wireless.android.sdk.stats.LintPerformance, com.google.wireless.android.sdk.stats.LintPerformance.Builder, com.google.wireless.android.sdk.stats.LintPerformanceOrBuilder>(
                getLintPerformance(),
                getParentForChildren(),
                isClean());
        lintPerformance_ = null;
      }
      return lintPerformanceBuilder_;
    }

    private java.util.List<com.google.wireless.android.sdk.stats.LintIssueId> issueIds_ =
      java.util.Collections.emptyList();
    private void ensureIssueIdsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        issueIds_ = new java.util.ArrayList<com.google.wireless.android.sdk.stats.LintIssueId>(issueIds_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.LintIssueId, com.google.wireless.android.sdk.stats.LintIssueId.Builder, com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder> issueIdsBuilder_;

    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.LintIssueId> getIssueIdsList() {
      if (issueIdsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(issueIds_);
      } else {
        return issueIdsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public int getIssueIdsCount() {
      if (issueIdsBuilder_ == null) {
        return issueIds_.size();
      } else {
        return issueIdsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public com.google.wireless.android.sdk.stats.LintIssueId getIssueIds(int index) {
      if (issueIdsBuilder_ == null) {
        return issueIds_.get(index);
      } else {
        return issueIdsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder setIssueIds(
        int index, com.google.wireless.android.sdk.stats.LintIssueId value) {
      if (issueIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIssueIdsIsMutable();
        issueIds_.set(index, value);
        onChanged();
      } else {
        issueIdsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder setIssueIds(
        int index, com.google.wireless.android.sdk.stats.LintIssueId.Builder builderForValue) {
      if (issueIdsBuilder_ == null) {
        ensureIssueIdsIsMutable();
        issueIds_.set(index, builderForValue.build());
        onChanged();
      } else {
        issueIdsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder addIssueIds(com.google.wireless.android.sdk.stats.LintIssueId value) {
      if (issueIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIssueIdsIsMutable();
        issueIds_.add(value);
        onChanged();
      } else {
        issueIdsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder addIssueIds(
        int index, com.google.wireless.android.sdk.stats.LintIssueId value) {
      if (issueIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIssueIdsIsMutable();
        issueIds_.add(index, value);
        onChanged();
      } else {
        issueIdsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder addIssueIds(
        com.google.wireless.android.sdk.stats.LintIssueId.Builder builderForValue) {
      if (issueIdsBuilder_ == null) {
        ensureIssueIdsIsMutable();
        issueIds_.add(builderForValue.build());
        onChanged();
      } else {
        issueIdsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder addIssueIds(
        int index, com.google.wireless.android.sdk.stats.LintIssueId.Builder builderForValue) {
      if (issueIdsBuilder_ == null) {
        ensureIssueIdsIsMutable();
        issueIds_.add(index, builderForValue.build());
        onChanged();
      } else {
        issueIdsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder addAllIssueIds(
        java.lang.Iterable<? extends com.google.wireless.android.sdk.stats.LintIssueId> values) {
      if (issueIdsBuilder_ == null) {
        ensureIssueIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, issueIds_);
        onChanged();
      } else {
        issueIdsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder clearIssueIds() {
      if (issueIdsBuilder_ == null) {
        issueIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        issueIdsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public Builder removeIssueIds(int index) {
      if (issueIdsBuilder_ == null) {
        ensureIssueIdsIsMutable();
        issueIds_.remove(index);
        onChanged();
      } else {
        issueIdsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public com.google.wireless.android.sdk.stats.LintIssueId.Builder getIssueIdsBuilder(
        int index) {
      return getIssueIdsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder getIssueIdsOrBuilder(
        int index) {
      if (issueIdsBuilder_ == null) {
        return issueIds_.get(index);  } else {
        return issueIdsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public java.util.List<? extends com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder>
         getIssueIdsOrBuilderList() {
      if (issueIdsBuilder_ != null) {
        return issueIdsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(issueIds_);
      }
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public com.google.wireless.android.sdk.stats.LintIssueId.Builder addIssueIdsBuilder() {
      return getIssueIdsFieldBuilder().addBuilder(
          com.google.wireless.android.sdk.stats.LintIssueId.getDefaultInstance());
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public com.google.wireless.android.sdk.stats.LintIssueId.Builder addIssueIdsBuilder(
        int index) {
      return getIssueIdsFieldBuilder().addBuilder(
          index, com.google.wireless.android.sdk.stats.LintIssueId.getDefaultInstance());
    }
    /**
     * <pre>
     * lint issue id's (counts, severity, etc)
     * </pre>
     *
     * <code>repeated .android_studio.LintIssueId issue_ids = 3;</code>
     */
    public java.util.List<com.google.wireless.android.sdk.stats.LintIssueId.Builder>
         getIssueIdsBuilderList() {
      return getIssueIdsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.wireless.android.sdk.stats.LintIssueId, com.google.wireless.android.sdk.stats.LintIssueId.Builder, com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder>
        getIssueIdsFieldBuilder() {
      if (issueIdsBuilder_ == null) {
        issueIdsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.wireless.android.sdk.stats.LintIssueId, com.google.wireless.android.sdk.stats.LintIssueId.Builder, com.google.wireless.android.sdk.stats.LintIssueIdOrBuilder>(
                issueIds_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        issueIds_ = null;
      }
      return issueIdsBuilder_;
    }

    private java.lang.Object projectId_ = "";
    /**
     * <pre>
     * Client-side salted, sha256 of the root project path.
     * This exists to allow multiple instant run builds in one project by one
     * user to be correlated.
     * The salt is rotated every 28 days, so it is not a permanent pseudonymous
     * identifier. It is anonymized and is unique per user, but has a 1-N
     * relation.
     * </pre>
     *
     * <code>optional string project_id = 4;</code>
     * @return Whether the projectId field is set.
     */
    public boolean hasProjectId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Client-side salted, sha256 of the root project path.
     * This exists to allow multiple instant run builds in one project by one
     * user to be correlated.
     * The salt is rotated every 28 days, so it is not a permanent pseudonymous
     * identifier. It is anonymized and is unique per user, but has a 1-N
     * relation.
     * </pre>
     *
     * <code>optional string project_id = 4;</code>
     * @return The projectId.
     */
    public java.lang.String getProjectId() {
      java.lang.Object ref = projectId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          projectId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Client-side salted, sha256 of the root project path.
     * This exists to allow multiple instant run builds in one project by one
     * user to be correlated.
     * The salt is rotated every 28 days, so it is not a permanent pseudonymous
     * identifier. It is anonymized and is unique per user, but has a 1-N
     * relation.
     * </pre>
     *
     * <code>optional string project_id = 4;</code>
     * @return The bytes for projectId.
     */
    public com.google.protobuf.ByteString
        getProjectIdBytes() {
      java.lang.Object ref = projectId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        projectId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Client-side salted, sha256 of the root project path.
     * This exists to allow multiple instant run builds in one project by one
     * user to be correlated.
     * The salt is rotated every 28 days, so it is not a permanent pseudonymous
     * identifier. It is anonymized and is unique per user, but has a 1-N
     * relation.
     * </pre>
     *
     * <code>optional string project_id = 4;</code>
     * @param value The projectId to set.
     * @return This builder for chaining.
     */
    public Builder setProjectId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      projectId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Client-side salted, sha256 of the root project path.
     * This exists to allow multiple instant run builds in one project by one
     * user to be correlated.
     * The salt is rotated every 28 days, so it is not a permanent pseudonymous
     * identifier. It is anonymized and is unique per user, but has a 1-N
     * relation.
     * </pre>
     *
     * <code>optional string project_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearProjectId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      projectId_ = getDefaultInstance().getProjectId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Client-side salted, sha256 of the root project path.
     * This exists to allow multiple instant run builds in one project by one
     * user to be correlated.
     * The salt is rotated every 28 days, so it is not a permanent pseudonymous
     * identifier. It is anonymized and is unique per user, but has a 1-N
     * relation.
     * </pre>
     *
     * <code>optional string project_id = 4;</code>
     * @param value The bytes for projectId to set.
     * @return This builder for chaining.
     */
    public Builder setProjectIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      projectId_ = value;
      onChanged();
      return this;
    }

    private boolean baselineEnabled_ ;
    /**
     * <pre>
     * true if user is using baselines
     * </pre>
     *
     * <code>optional bool baseline_enabled = 5;</code>
     * @return Whether the baselineEnabled field is set.
     */
    public boolean hasBaselineEnabled() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * true if user is using baselines
     * </pre>
     *
     * <code>optional bool baseline_enabled = 5;</code>
     * @return The baselineEnabled.
     */
    public boolean getBaselineEnabled() {
      return baselineEnabled_;
    }
    /**
     * <pre>
     * true if user is using baselines
     * </pre>
     *
     * <code>optional bool baseline_enabled = 5;</code>
     * @param value The baselineEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setBaselineEnabled(boolean value) {
      bitField0_ |= 0x00000010;
      baselineEnabled_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if user is using baselines
     * </pre>
     *
     * <code>optional bool baseline_enabled = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearBaselineEnabled() {
      bitField0_ = (bitField0_ & ~0x00000010);
      baselineEnabled_ = false;
      onChanged();
      return this;
    }

    private boolean includingTestSources_ ;
    /**
     * <pre>
     * true if user is analyzing test sources
     * </pre>
     *
     * <code>optional bool including_test_sources = 6;</code>
     * @return Whether the includingTestSources field is set.
     */
    public boolean hasIncludingTestSources() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * true if user is analyzing test sources
     * </pre>
     *
     * <code>optional bool including_test_sources = 6;</code>
     * @return The includingTestSources.
     */
    public boolean getIncludingTestSources() {
      return includingTestSources_;
    }
    /**
     * <pre>
     * true if user is analyzing test sources
     * </pre>
     *
     * <code>optional bool including_test_sources = 6;</code>
     * @param value The includingTestSources to set.
     * @return This builder for chaining.
     */
    public Builder setIncludingTestSources(boolean value) {
      bitField0_ |= 0x00000020;
      includingTestSources_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if user is analyzing test sources
     * </pre>
     *
     * <code>optional bool including_test_sources = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearIncludingTestSources() {
      bitField0_ = (bitField0_ & ~0x00000020);
      includingTestSources_ = false;
      onChanged();
      return this;
    }

    private boolean includingGeneratedSources_ ;
    /**
     * <pre>
     * true if user is analyzing generated sources
     * </pre>
     *
     * <code>optional bool including_generated_sources = 7;</code>
     * @return Whether the includingGeneratedSources field is set.
     */
    public boolean hasIncludingGeneratedSources() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * true if user is analyzing generated sources
     * </pre>
     *
     * <code>optional bool including_generated_sources = 7;</code>
     * @return The includingGeneratedSources.
     */
    public boolean getIncludingGeneratedSources() {
      return includingGeneratedSources_;
    }
    /**
     * <pre>
     * true if user is analyzing generated sources
     * </pre>
     *
     * <code>optional bool including_generated_sources = 7;</code>
     * @param value The includingGeneratedSources to set.
     * @return This builder for chaining.
     */
    public Builder setIncludingGeneratedSources(boolean value) {
      bitField0_ |= 0x00000040;
      includingGeneratedSources_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if user is analyzing generated sources
     * </pre>
     *
     * <code>optional bool including_generated_sources = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearIncludingGeneratedSources() {
      bitField0_ = (bitField0_ & ~0x00000040);
      includingGeneratedSources_ = false;
      onChanged();
      return this;
    }

    private boolean includingDependencies_ ;
    /**
     * <pre>
     * true if user is analyzing dependencies
     * </pre>
     *
     * <code>optional bool including_dependencies = 8;</code>
     * @return Whether the includingDependencies field is set.
     */
    public boolean hasIncludingDependencies() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * true if user is analyzing dependencies
     * </pre>
     *
     * <code>optional bool including_dependencies = 8;</code>
     * @return The includingDependencies.
     */
    public boolean getIncludingDependencies() {
      return includingDependencies_;
    }
    /**
     * <pre>
     * true if user is analyzing dependencies
     * </pre>
     *
     * <code>optional bool including_dependencies = 8;</code>
     * @param value The includingDependencies to set.
     * @return This builder for chaining.
     */
    public Builder setIncludingDependencies(boolean value) {
      bitField0_ |= 0x00000080;
      includingDependencies_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if user is analyzing dependencies
     * </pre>
     *
     * <code>optional bool including_dependencies = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearIncludingDependencies() {
      bitField0_ = (bitField0_ & ~0x00000080);
      includingDependencies_ = false;
      onChanged();
      return this;
    }

    private boolean abortOnError_ ;
    /**
     * <pre>
     * true if the build is configured to abort on error
     * </pre>
     *
     * <code>optional bool abort_on_error = 9;</code>
     * @return Whether the abortOnError field is set.
     */
    public boolean hasAbortOnError() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * true if the build is configured to abort on error
     * </pre>
     *
     * <code>optional bool abort_on_error = 9;</code>
     * @return The abortOnError.
     */
    public boolean getAbortOnError() {
      return abortOnError_;
    }
    /**
     * <pre>
     * true if the build is configured to abort on error
     * </pre>
     *
     * <code>optional bool abort_on_error = 9;</code>
     * @param value The abortOnError to set.
     * @return This builder for chaining.
     */
    public Builder setAbortOnError(boolean value) {
      bitField0_ |= 0x00000100;
      abortOnError_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if the build is configured to abort on error
     * </pre>
     *
     * <code>optional bool abort_on_error = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearAbortOnError() {
      bitField0_ = (bitField0_ & ~0x00000100);
      abortOnError_ = false;
      onChanged();
      return this;
    }

    private boolean ignoreWarnings_ ;
    /**
     * <pre>
     * true if the build is configured to only check errors, not warnings
     * </pre>
     *
     * <code>optional bool ignore_warnings = 10;</code>
     * @return Whether the ignoreWarnings field is set.
     */
    public boolean hasIgnoreWarnings() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * true if the build is configured to only check errors, not warnings
     * </pre>
     *
     * <code>optional bool ignore_warnings = 10;</code>
     * @return The ignoreWarnings.
     */
    public boolean getIgnoreWarnings() {
      return ignoreWarnings_;
    }
    /**
     * <pre>
     * true if the build is configured to only check errors, not warnings
     * </pre>
     *
     * <code>optional bool ignore_warnings = 10;</code>
     * @param value The ignoreWarnings to set.
     * @return This builder for chaining.
     */
    public Builder setIgnoreWarnings(boolean value) {
      bitField0_ |= 0x00000200;
      ignoreWarnings_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if the build is configured to only check errors, not warnings
     * </pre>
     *
     * <code>optional bool ignore_warnings = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearIgnoreWarnings() {
      bitField0_ = (bitField0_ & ~0x00000200);
      ignoreWarnings_ = false;
      onChanged();
      return this;
    }

    private boolean warningsAsErrors_ ;
    /**
     * <pre>
     * true if the build is configured to promote all warnings to errors
     * </pre>
     *
     * <code>optional bool warnings_as_errors = 11;</code>
     * @return Whether the warningsAsErrors field is set.
     */
    public boolean hasWarningsAsErrors() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * true if the build is configured to promote all warnings to errors
     * </pre>
     *
     * <code>optional bool warnings_as_errors = 11;</code>
     * @return The warningsAsErrors.
     */
    public boolean getWarningsAsErrors() {
      return warningsAsErrors_;
    }
    /**
     * <pre>
     * true if the build is configured to promote all warnings to errors
     * </pre>
     *
     * <code>optional bool warnings_as_errors = 11;</code>
     * @param value The warningsAsErrors to set.
     * @return This builder for chaining.
     */
    public Builder setWarningsAsErrors(boolean value) {
      bitField0_ |= 0x00000400;
      warningsAsErrors_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * true if the build is configured to promote all warnings to errors
     * </pre>
     *
     * <code>optional bool warnings_as_errors = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearWarningsAsErrors() {
      bitField0_ = (bitField0_ & ~0x00000400);
      warningsAsErrors_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:android_studio.LintSession)
  }

  // @@protoc_insertion_point(class_scope:android_studio.LintSession)
  private static final com.google.wireless.android.sdk.stats.LintSession DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.wireless.android.sdk.stats.LintSession();
  }

  public static com.google.wireless.android.sdk.stats.LintSession getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<LintSession>
      PARSER = new com.google.protobuf.AbstractParser<LintSession>() {
    @java.lang.Override
    public LintSession parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LintSession(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LintSession> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LintSession> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.wireless.android.sdk.stats.LintSession getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

