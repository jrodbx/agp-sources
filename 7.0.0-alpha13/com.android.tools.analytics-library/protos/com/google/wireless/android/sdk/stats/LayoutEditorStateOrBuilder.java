// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface LayoutEditorStateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.LayoutEditorState)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * layout editor preview or design mode
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Mode mode = 1;</code>
   * @return Whether the mode field is set.
   */
  boolean hasMode();
  /**
   * <pre>
   * layout editor preview or design mode
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Mode mode = 1;</code>
   * @return The mode.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorState.Mode getMode();

  /**
   * <pre>
   * layout type currently being displayed (layout, menu, drawable...)
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Type type = 2;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * layout type currently being displayed (layout, menu, drawable...)
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Type type = 2;</code>
   * @return The type.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorState.Type getType();

  /**
   * <pre>
   * android api level  e.g. '23' or 'N'
   * </pre>
   *
   * <code>optional string config_api_level = 3;</code>
   * @return Whether the configApiLevel field is set.
   */
  boolean hasConfigApiLevel();
  /**
   * <pre>
   * android api level  e.g. '23' or 'N'
   * </pre>
   *
   * <code>optional string config_api_level = 3;</code>
   * @return The configApiLevel.
   */
  java.lang.String getConfigApiLevel();
  /**
   * <pre>
   * android api level  e.g. '23' or 'N'
   * </pre>
   *
   * <code>optional string config_api_level = 3;</code>
   * @return The bytes for configApiLevel.
   */
  com.google.protobuf.ByteString
      getConfigApiLevelBytes();

  /**
   * <pre>
   * current layout zoom level
   * </pre>
   *
   * <code>optional int32 config_zoom_level = 4;</code>
   * @return Whether the configZoomLevel field is set.
   */
  boolean hasConfigZoomLevel();
  /**
   * <pre>
   * current layout zoom level
   * </pre>
   *
   * <code>optional int32 config_zoom_level = 4;</code>
   * @return The configZoomLevel.
   */
  int getConfigZoomLevel();

  /**
   * <pre>
   * current layout orientation
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Orientation config_orientation = 5;</code>
   * @return Whether the configOrientation field is set.
   */
  boolean hasConfigOrientation();
  /**
   * <pre>
   * current layout orientation
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Orientation config_orientation = 5;</code>
   * @return The configOrientation.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorState.Orientation getConfigOrientation();

  /**
   * <pre>
   * surfaces being displyaed
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Surfaces surfaces = 6;</code>
   * @return Whether the surfaces field is set.
   */
  boolean hasSurfaces();
  /**
   * <pre>
   * surfaces being displyaed
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.Surfaces surfaces = 6;</code>
   * @return The surfaces.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorState.Surfaces getSurfaces();

  /**
   * <pre>
   * Indicates how user previews the layout, whether it is a static (classic)
   * preview or an interactive (animated) mode
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.PreviewMode preview_mode = 7;</code>
   * @return Whether the previewMode field is set.
   */
  boolean hasPreviewMode();
  /**
   * <pre>
   * Indicates how user previews the layout, whether it is a static (classic)
   * preview or an interactive (animated) mode
   * </pre>
   *
   * <code>optional .android_studio.LayoutEditorState.PreviewMode preview_mode = 7;</code>
   * @return The previewMode.
   */
  com.google.wireless.android.sdk.stats.LayoutEditorState.PreviewMode getPreviewMode();
}
